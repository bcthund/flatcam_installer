/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.21
 *
 * Copyright (c) 2018 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt4.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 28 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/sip/QtCore/qstatemachine.sip"
#include <qstatemachine.h>
#line 29 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/QtCore/sipQtCoreQStateMachine.cpp"

#line 29 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 33 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/QtCore/sipQtCoreQStateMachine.cpp"
#line 28 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/sip/QtCore/qstate.sip"
#include <qstate.h>
#line 36 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/QtCore/sipQtCoreQStateMachine.cpp"
#line 26 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 39 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/QtCore/sipQtCoreQStateMachine.cpp"
#line 315 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/sip/QtCore/qset.sip"
#include <qset.h>
#line 42 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/QtCore/sipQtCoreQStateMachine.cpp"
#line 28 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/sip/QtCore/qabstractstate.sip"
#include <qabstractstate.h>
#line 45 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/QtCore/sipQtCoreQStateMachine.cpp"
#line 28 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/sip/QtCore/qabstractanimation.sip"
#include <qabstractanimation.h>
#line 48 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/QtCore/sipQtCoreQStateMachine.cpp"
#line 115 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 51 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/QtCore/sipQtCoreQStateMachine.cpp"
#line 27 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 54 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/QtCore/sipQtCoreQStateMachine.cpp"
#line 265 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 57 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/QtCore/sipQtCoreQStateMachine.cpp"
#line 115 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 60 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/QtCore/sipQtCoreQStateMachine.cpp"
#line 28 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/sip/QtCore/qabstracttransition.sip"
#include <qabstracttransition.h>
#line 63 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/QtCore/sipQtCoreQStateMachine.cpp"
#line 28 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/sip/QtCore/qsignaltransition.sip"
#include <qsignaltransition.h>
#line 66 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/QtCore/sipQtCoreQStateMachine.cpp"
#line 26 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 69 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/QtCore/sipQtCoreQStateMachine.cpp"
#line 368 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 72 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/QtCore/sipQtCoreQStateMachine.cpp"
#line 351 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 75 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/QtCore/sipQtCoreQStateMachine.cpp"
#line 28 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 78 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/QtCore/sipQtCoreQStateMachine.cpp"
#line 32 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 81 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/QtCore/sipQtCoreQStateMachine.cpp"
#line 26 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 84 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/QtCore/sipQtCoreQStateMachine.cpp"
#line 115 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 87 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/QtCore/sipQtCoreQStateMachine.cpp"
#line 26 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 90 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/QtCore/sipQtCoreQStateMachine.cpp"
#line 26 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 93 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/QtCore/sipQtCoreQStateMachine.cpp"
#line 26 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 96 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/QtCore/sipQtCoreQStateMachine.cpp"


class sipQStateMachine : public  ::QStateMachine
{
public:
    sipQStateMachine( ::QObject*);
    sipQStateMachine( ::QState::ChildMode, ::QObject*);
    virtual ~sipQStateMachine();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void onExit( ::QEvent*) SIP_OVERRIDE;
    void onEntry( ::QEvent*) SIP_OVERRIDE;
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQStateMachine(const sipQStateMachine &);
    sipQStateMachine &operator = (const sipQStateMachine &);

    char sipPyMethods[9];
};

sipQStateMachine::sipQStateMachine( ::QObject*a0):  ::QStateMachine(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQStateMachine::sipQStateMachine( ::QState::ChildMode a0, ::QObject*a1):  ::QStateMachine(a0,a1), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQStateMachine::~sipQStateMachine()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQStateMachine::metaObject() const
{
    return sip_QtCore_qt_metaobject(sipPySelf,sipType_QStateMachine);
}

int sipQStateMachine::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QStateMachine::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtCore_qt_metacall(sipPySelf,sipType_QStateMachine,_c,_id,_a);

    return _id;
}

void *sipQStateMachine::qt_metacast(const char *_clname)
{
    return (sip_QtCore_qt_metacast(sipPySelf, sipType_QStateMachine, _clname)) ? this :  ::QStateMachine::qt_metacast(_clname);
}

void sipQStateMachine::onExit( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_onExit);

    if (!sipMeth)
    {
         ::QStateMachine::onExit(a0);
        return;
    }

    extern void sipVH_QtCore_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtCore_4(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQStateMachine::onEntry( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_onEntry);

    if (!sipMeth)
    {
         ::QStateMachine::onEntry(a0);
        return;
    }

    extern void sipVH_QtCore_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtCore_4(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQStateMachine::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_event);

    if (!sipMeth)
        return  ::QStateMachine::event(a0);

    extern bool sipVH_QtCore_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtCore_0(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQStateMachine::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_eventFilter);

    if (!sipMeth)
        return  ::QStateMachine::eventFilter(a0,a1);

    extern bool sipVH_QtCore_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtCore_1(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void sipQStateMachine::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QStateMachine::timerEvent(a0);
        return;
    }

    extern void sipVH_QtCore_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtCore_2(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQStateMachine::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_childEvent);

    if (!sipMeth)
    {
         ::QStateMachine::childEvent(a0);
        return;
    }

    extern void sipVH_QtCore_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtCore_3(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQStateMachine::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_customEvent);

    if (!sipMeth)
    {
         ::QStateMachine::customEvent(a0);
        return;
    }

    extern void sipVH_QtCore_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtCore_4(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQStateMachine::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,SIP_NULLPTR,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QStateMachine::connectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQStateMachine::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,SIP_NULLPTR,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QStateMachine::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, 0, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QStateMachine_addState, "addState(self, QAbstractState)");

extern "C" {static PyObject *meth_QStateMachine_addState(PyObject *, PyObject *);}
static PyObject *meth_QStateMachine_addState(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QAbstractState* a0;
         ::QStateMachine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QStateMachine, &sipCpp, sipType_QAbstractState, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->addState(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStateMachine, sipName_addState, doc_QStateMachine_addState);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStateMachine_removeState, "removeState(self, QAbstractState)");

extern "C" {static PyObject *meth_QStateMachine_removeState(PyObject *, PyObject *);}
static PyObject *meth_QStateMachine_removeState(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QAbstractState* a0;
         ::QStateMachine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ<", &sipSelf, sipType_QStateMachine, &sipCpp, sipType_QAbstractState, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->removeState(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStateMachine, sipName_removeState, doc_QStateMachine_removeState);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStateMachine_error, "error(self) -> QStateMachine.Error");

extern "C" {static PyObject *meth_QStateMachine_error(PyObject *, PyObject *);}
static PyObject *meth_QStateMachine_error(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStateMachine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStateMachine, &sipCpp))
        {
             ::QStateMachine::Error sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->error();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QStateMachine_Error);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStateMachine, sipName_error, doc_QStateMachine_error);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStateMachine_errorString, "errorString(self) -> str");

extern "C" {static PyObject *meth_QStateMachine_errorString(PyObject *, PyObject *);}
static PyObject *meth_QStateMachine_errorString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStateMachine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStateMachine, &sipCpp))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->errorString());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStateMachine, sipName_errorString, doc_QStateMachine_errorString);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStateMachine_clearError, "clearError(self)");

extern "C" {static PyObject *meth_QStateMachine_clearError(PyObject *, PyObject *);}
static PyObject *meth_QStateMachine_clearError(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QStateMachine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStateMachine, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->clearError();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStateMachine, sipName_clearError, doc_QStateMachine_clearError);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStateMachine_isRunning, "isRunning(self) -> bool");

extern "C" {static PyObject *meth_QStateMachine_isRunning(PyObject *, PyObject *);}
static PyObject *meth_QStateMachine_isRunning(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStateMachine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStateMachine, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isRunning();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStateMachine, sipName_isRunning, doc_QStateMachine_isRunning);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStateMachine_isAnimated, "isAnimated(self) -> bool");

extern "C" {static PyObject *meth_QStateMachine_isAnimated(PyObject *, PyObject *);}
static PyObject *meth_QStateMachine_isAnimated(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStateMachine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStateMachine, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isAnimated();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStateMachine, sipName_isAnimated, doc_QStateMachine_isAnimated);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStateMachine_setAnimated, "setAnimated(self, bool)");

extern "C" {static PyObject *meth_QStateMachine_setAnimated(PyObject *, PyObject *);}
static PyObject *meth_QStateMachine_setAnimated(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QStateMachine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QStateMachine, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setAnimated(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStateMachine, sipName_setAnimated, doc_QStateMachine_setAnimated);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStateMachine_addDefaultAnimation, "addDefaultAnimation(self, QAbstractAnimation)");

extern "C" {static PyObject *meth_QStateMachine_addDefaultAnimation(PyObject *, PyObject *);}
static PyObject *meth_QStateMachine_addDefaultAnimation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QAbstractAnimation* a0;
        PyObject *a0Wrapper;
         ::QStateMachine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QStateMachine, &sipCpp, &a0Wrapper, sipType_QAbstractAnimation, &a0))
        {
#line 101 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/sip/QtCore/qstatemachine.sip"
        // We want to keep a reference to the animation but this is in addition to the
        // existing ones and does not replace them - so we can't use /KeepReference/.
        sipCpp->addDefaultAnimation(a0);
        
        // Use the user object as a list of the references.
        PyObject *user = ((sipSimpleWrapper *)sipSelf)->user;
        
        if (!user)
            user = ((sipSimpleWrapper *)sipSelf)->user = PyList_New(0);
        
        if (user)
            PyList_Append(user, a0Wrapper);
#line 594 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/QtCore/sipQtCoreQStateMachine.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStateMachine, sipName_addDefaultAnimation, doc_QStateMachine_addDefaultAnimation);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStateMachine_defaultAnimations, "defaultAnimations(self) -> List[QAbstractAnimation]");

extern "C" {static PyObject *meth_QStateMachine_defaultAnimations(PyObject *, PyObject *);}
static PyObject *meth_QStateMachine_defaultAnimations(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStateMachine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStateMachine, &sipCpp))
        {
            QList< ::QAbstractAnimation*>*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList< ::QAbstractAnimation*>(sipCpp->defaultAnimations());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0101QAbstractAnimation,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStateMachine, sipName_defaultAnimations, doc_QStateMachine_defaultAnimations);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStateMachine_removeDefaultAnimation, "removeDefaultAnimation(self, QAbstractAnimation)");

extern "C" {static PyObject *meth_QStateMachine_removeDefaultAnimation(PyObject *, PyObject *);}
static PyObject *meth_QStateMachine_removeDefaultAnimation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QAbstractAnimation* a0;
        PyObject *a0Wrapper;
         ::QStateMachine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QStateMachine, &sipCpp, &a0Wrapper, sipType_QAbstractAnimation, &a0))
        {
#line 118 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/sip/QtCore/qstatemachine.sip"
        // Discard the extra animation reference that we took in addDefaultAnimation().
        sipCpp->removeDefaultAnimation(a0);
        
        // Use the user object as a list of the references.
        PyObject *user = ((sipSimpleWrapper *)sipSelf)->user;
        
        if (user)
        {
            SIP_SSIZE_T i = 0;
            
            // Note that we deal with an object appearing in the list more than once.
            while (i < PyList_GET_SIZE(user))
                if (PyList_GET_ITEM(user, i) == a0Wrapper)
                    PyList_SetSlice(user, i, i + 1, NULL);
                else
                    ++i;
        }
#line 671 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/QtCore/sipQtCoreQStateMachine.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStateMachine, sipName_removeDefaultAnimation, doc_QStateMachine_removeDefaultAnimation);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStateMachine_globalRestorePolicy, "globalRestorePolicy(self) -> QState.RestorePolicy");

extern "C" {static PyObject *meth_QStateMachine_globalRestorePolicy(PyObject *, PyObject *);}
static PyObject *meth_QStateMachine_globalRestorePolicy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStateMachine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStateMachine, &sipCpp))
        {
             ::QState::RestorePolicy sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->globalRestorePolicy();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QState_RestorePolicy);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStateMachine, sipName_globalRestorePolicy, doc_QStateMachine_globalRestorePolicy);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStateMachine_setGlobalRestorePolicy, "setGlobalRestorePolicy(self, QState.RestorePolicy)");

extern "C" {static PyObject *meth_QStateMachine_setGlobalRestorePolicy(PyObject *, PyObject *);}
static PyObject *meth_QStateMachine_setGlobalRestorePolicy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QState::RestorePolicy a0;
         ::QStateMachine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QStateMachine, &sipCpp, sipType_QState_RestorePolicy, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setGlobalRestorePolicy(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStateMachine, sipName_setGlobalRestorePolicy, doc_QStateMachine_setGlobalRestorePolicy);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStateMachine_postEvent, "postEvent(self, QEvent, priority: QStateMachine.EventPriority = QStateMachine.NormalPriority)");

extern "C" {static PyObject *meth_QStateMachine_postEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QStateMachine_postEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QEvent* a0;
         ::QStateMachine::EventPriority a1 = QStateMachine::NormalPriority;
         ::QStateMachine *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_priority,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ:|E", &sipSelf, sipType_QStateMachine, &sipCpp, sipType_QEvent, &a0, sipType_QStateMachine_EventPriority, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->postEvent(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStateMachine, sipName_postEvent, doc_QStateMachine_postEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStateMachine_postDelayedEvent, "postDelayedEvent(self, QEvent, int) -> int");

extern "C" {static PyObject *meth_QStateMachine_postDelayedEvent(PyObject *, PyObject *);}
static PyObject *meth_QStateMachine_postDelayedEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QEvent* a0;
        int a1;
         ::QStateMachine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:i", &sipSelf, sipType_QStateMachine, &sipCpp, sipType_QEvent, &a0, &a1))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->postDelayedEvent(a0,a1);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStateMachine, sipName_postDelayedEvent, doc_QStateMachine_postDelayedEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStateMachine_cancelDelayedEvent, "cancelDelayedEvent(self, int) -> bool");

extern "C" {static PyObject *meth_QStateMachine_cancelDelayedEvent(PyObject *, PyObject *);}
static PyObject *meth_QStateMachine_cancelDelayedEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QStateMachine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QStateMachine, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->cancelDelayedEvent(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStateMachine, sipName_cancelDelayedEvent, doc_QStateMachine_cancelDelayedEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStateMachine_configuration, "configuration(self) -> Set[QAbstractState]");

extern "C" {static PyObject *meth_QStateMachine_configuration(PyObject *, PyObject *);}
static PyObject *meth_QStateMachine_configuration(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStateMachine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStateMachine, &sipCpp))
        {
            QSet< ::QAbstractState*>*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QSet< ::QAbstractState*>(sipCpp->configuration());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSet_0101QAbstractState,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStateMachine, sipName_configuration, doc_QStateMachine_configuration);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStateMachine_eventFilter, "eventFilter(self, QObject, QEvent) -> bool");

extern "C" {static PyObject *meth_QStateMachine_eventFilter(PyObject *, PyObject *);}
static PyObject *meth_QStateMachine_eventFilter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QObject* a0;
         ::QEvent* a1;
         ::QStateMachine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8J8", &sipSelf, sipType_QStateMachine, &sipCpp, sipType_QObject, &a0, sipType_QEvent, &a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QStateMachine::eventFilter(a0,a1) : sipCpp->eventFilter(a0,a1));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStateMachine, sipName_eventFilter, doc_QStateMachine_eventFilter);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStateMachine_start, "start(self)");

extern "C" {static PyObject *meth_QStateMachine_start(PyObject *, PyObject *);}
static PyObject *meth_QStateMachine_start(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QStateMachine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStateMachine, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->start();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStateMachine, sipName_start, doc_QStateMachine_start);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStateMachine_stop, "stop(self)");

extern "C" {static PyObject *meth_QStateMachine_stop(PyObject *, PyObject *);}
static PyObject *meth_QStateMachine_stop(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QStateMachine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStateMachine, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->stop();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStateMachine, sipName_stop, doc_QStateMachine_stop);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStateMachine_onEntry, "onEntry(self, QEvent)");

extern "C" {static PyObject *meth_QStateMachine_onEntry(PyObject *, PyObject *);}
static PyObject *meth_QStateMachine_onEntry(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
         ::QStateMachine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QStateMachine, &sipCpp, sipType_QEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QStateMachine::onEntry(a0) : sipCpp->onEntry(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStateMachine, sipName_onEntry, doc_QStateMachine_onEntry);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStateMachine_onExit, "onExit(self, QEvent)");

extern "C" {static PyObject *meth_QStateMachine_onExit(PyObject *, PyObject *);}
static PyObject *meth_QStateMachine_onExit(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
         ::QStateMachine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QStateMachine, &sipCpp, sipType_QEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QStateMachine::onExit(a0) : sipCpp->onExit(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStateMachine, sipName_onExit, doc_QStateMachine_onExit);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStateMachine_event, "event(self, QEvent) -> bool");

extern "C" {static PyObject *meth_QStateMachine_event(PyObject *, PyObject *);}
static PyObject *meth_QStateMachine_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
         ::QStateMachine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QStateMachine, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QStateMachine::event(a0) : sipCpp->event(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStateMachine, sipName_event, doc_QStateMachine_event);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QStateMachine(void *, const sipTypeDef *);}
static void *cast_QStateMachine(void *sipCppV, const sipTypeDef *targetType)
{
     ::QStateMachine *sipCpp = reinterpret_cast< ::QStateMachine *>(sipCppV);

    if (targetType == sipType_QState)
        return static_cast< ::QState *>(sipCpp);

    if (targetType == sipType_QAbstractState)
        return static_cast< ::QAbstractState *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QStateMachine(void *, int);}
static void release_QStateMachine(void *sipCppV, int)
{
     ::QStateMachine *sipCpp = reinterpret_cast< ::QStateMachine *>(sipCppV);

    Py_BEGIN_ALLOW_THREADS

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QStateMachine(sipSimpleWrapper *);}
static void dealloc_QStateMachine(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQStateMachine *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QStateMachine(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QStateMachine(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QStateMachine(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQStateMachine *sipCpp = SIP_NULLPTR;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQStateMachine(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
         ::QState::ChildMode a0;
         ::QObject* a1 = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "E|JH", sipType_QState_ChildMode, &a0, sipType_QObject, &a1, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQStateMachine(a0,a1);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QStateMachine[] = {{186, 255, 1}};


static PyMethodDef methods_QStateMachine[] = {
    {SIP_MLNAME_CAST(sipName_addDefaultAnimation), meth_QStateMachine_addDefaultAnimation, METH_VARARGS, SIP_MLDOC_CAST(doc_QStateMachine_addDefaultAnimation)},
    {SIP_MLNAME_CAST(sipName_addState), meth_QStateMachine_addState, METH_VARARGS, SIP_MLDOC_CAST(doc_QStateMachine_addState)},
    {SIP_MLNAME_CAST(sipName_cancelDelayedEvent), meth_QStateMachine_cancelDelayedEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QStateMachine_cancelDelayedEvent)},
    {SIP_MLNAME_CAST(sipName_clearError), meth_QStateMachine_clearError, METH_VARARGS, SIP_MLDOC_CAST(doc_QStateMachine_clearError)},
    {SIP_MLNAME_CAST(sipName_configuration), meth_QStateMachine_configuration, METH_VARARGS, SIP_MLDOC_CAST(doc_QStateMachine_configuration)},
    {SIP_MLNAME_CAST(sipName_defaultAnimations), meth_QStateMachine_defaultAnimations, METH_VARARGS, SIP_MLDOC_CAST(doc_QStateMachine_defaultAnimations)},
    {SIP_MLNAME_CAST(sipName_error), meth_QStateMachine_error, METH_VARARGS, SIP_MLDOC_CAST(doc_QStateMachine_error)},
    {SIP_MLNAME_CAST(sipName_errorString), meth_QStateMachine_errorString, METH_VARARGS, SIP_MLDOC_CAST(doc_QStateMachine_errorString)},
    {SIP_MLNAME_CAST(sipName_event), meth_QStateMachine_event, METH_VARARGS, SIP_MLDOC_CAST(doc_QStateMachine_event)},
    {SIP_MLNAME_CAST(sipName_eventFilter), meth_QStateMachine_eventFilter, METH_VARARGS, SIP_MLDOC_CAST(doc_QStateMachine_eventFilter)},
    {SIP_MLNAME_CAST(sipName_globalRestorePolicy), meth_QStateMachine_globalRestorePolicy, METH_VARARGS, SIP_MLDOC_CAST(doc_QStateMachine_globalRestorePolicy)},
    {SIP_MLNAME_CAST(sipName_isAnimated), meth_QStateMachine_isAnimated, METH_VARARGS, SIP_MLDOC_CAST(doc_QStateMachine_isAnimated)},
    {SIP_MLNAME_CAST(sipName_isRunning), meth_QStateMachine_isRunning, METH_VARARGS, SIP_MLDOC_CAST(doc_QStateMachine_isRunning)},
    {SIP_MLNAME_CAST(sipName_onEntry), meth_QStateMachine_onEntry, METH_VARARGS, SIP_MLDOC_CAST(doc_QStateMachine_onEntry)},
    {SIP_MLNAME_CAST(sipName_onExit), meth_QStateMachine_onExit, METH_VARARGS, SIP_MLDOC_CAST(doc_QStateMachine_onExit)},
    {SIP_MLNAME_CAST(sipName_postDelayedEvent), meth_QStateMachine_postDelayedEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QStateMachine_postDelayedEvent)},
    {SIP_MLNAME_CAST(sipName_postEvent), SIP_MLMETH_CAST(meth_QStateMachine_postEvent), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QStateMachine_postEvent)},
    {SIP_MLNAME_CAST(sipName_removeDefaultAnimation), meth_QStateMachine_removeDefaultAnimation, METH_VARARGS, SIP_MLDOC_CAST(doc_QStateMachine_removeDefaultAnimation)},
    {SIP_MLNAME_CAST(sipName_removeState), meth_QStateMachine_removeState, METH_VARARGS, SIP_MLDOC_CAST(doc_QStateMachine_removeState)},
    {SIP_MLNAME_CAST(sipName_setAnimated), meth_QStateMachine_setAnimated, METH_VARARGS, SIP_MLDOC_CAST(doc_QStateMachine_setAnimated)},
    {SIP_MLNAME_CAST(sipName_setGlobalRestorePolicy), meth_QStateMachine_setGlobalRestorePolicy, METH_VARARGS, SIP_MLDOC_CAST(doc_QStateMachine_setGlobalRestorePolicy)},
    {SIP_MLNAME_CAST(sipName_start), meth_QStateMachine_start, METH_VARARGS, SIP_MLDOC_CAST(doc_QStateMachine_start)},
    {SIP_MLNAME_CAST(sipName_stop), meth_QStateMachine_stop, METH_VARARGS, SIP_MLDOC_CAST(doc_QStateMachine_stop)}
};

static sipEnumMemberDef enummembers_QStateMachine[] = {
    {sipName_HighPriority, static_cast<int>( ::QStateMachine::HighPriority), 191},
    {sipName_NoCommonAncestorForTransitionError, static_cast<int>( ::QStateMachine::NoCommonAncestorForTransitionError), 190},
    {sipName_NoDefaultStateInHistoryStateError, static_cast<int>( ::QStateMachine::NoDefaultStateInHistoryStateError), 190},
    {sipName_NoError, static_cast<int>( ::QStateMachine::NoError), 190},
    {sipName_NoInitialStateError, static_cast<int>( ::QStateMachine::NoInitialStateError), 190},
    {sipName_NormalPriority, static_cast<int>( ::QStateMachine::NormalPriority), 191},
};

PyDoc_STRVAR(doc_QStateMachine, "\1QStateMachine(parent: QObject = None)\n"
"QStateMachine(QState.ChildMode, parent: QObject = None)");


/* Define this type's signals. */
static const pyqt4QtSignal signals_QStateMachine[] = {
    {"stopped()", "\1stopped(self)", SIP_NULLPTR, 0},
    {"started()", "\1started(self)", SIP_NULLPTR, 0},
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, 0}
};


static pyqt4ClassPluginDef plugin_QStateMachine = {
    & ::QStateMachine::staticMetaObject,
    0,
    signals_QStateMachine
};


sipClassTypeDef sipTypeDef_QtCore_QStateMachine = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QStateMachine,
        {SIP_NULLPTR},
        &plugin_QStateMachine
    },
    {
        sipNameNr_QStateMachine,
        {0, 0, 1},
        23, methods_QStateMachine,
        6, enummembers_QStateMachine,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QStateMachine,
    -1,
    -1,
    supers_QStateMachine,
    SIP_NULLPTR,
    init_type_QStateMachine,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QStateMachine,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QStateMachine,
    cast_QStateMachine,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.21
 *
 * Copyright (c) 2018 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt4.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 26 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/sip/QtCore/qsettings.sip"
#include <qsettings.h>
#line 29 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/QtCore/sipQtCoreQSettings.cpp"

#line 27 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 33 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/QtCore/sipQtCoreQSettings.cpp"
#line 29 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 36 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/QtCore/sipQtCoreQSettings.cpp"
#line 26 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 39 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/QtCore/sipQtCoreQSettings.cpp"
#line 26 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/sip/QtCore/qtextcodec.sip"
#include <qtextcodec.h>
#line 42 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/QtCore/sipQtCoreQSettings.cpp"
#line 265 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 45 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/QtCore/sipQtCoreQSettings.cpp"
#line 27 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 48 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/QtCore/sipQtCoreQSettings.cpp"
#line 26 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 51 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/QtCore/sipQtCoreQSettings.cpp"
#line 368 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 54 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/QtCore/sipQtCoreQSettings.cpp"
#line 351 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 57 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/QtCore/sipQtCoreQSettings.cpp"
#line 28 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 60 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/QtCore/sipQtCoreQSettings.cpp"
#line 32 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 63 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/QtCore/sipQtCoreQSettings.cpp"
#line 26 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 66 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/QtCore/sipQtCoreQSettings.cpp"
#line 115 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 69 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/QtCore/sipQtCoreQSettings.cpp"
#line 26 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 72 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/QtCore/sipQtCoreQSettings.cpp"
#line 26 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 75 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/QtCore/sipQtCoreQSettings.cpp"
#line 26 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 78 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/QtCore/sipQtCoreQSettings.cpp"


class sipQSettings : public  ::QSettings
{
public:
    sipQSettings(const  ::QString&,const  ::QString&, ::QObject*);
    sipQSettings( ::QSettings::Scope,const  ::QString&,const  ::QString&, ::QObject*);
    sipQSettings( ::QSettings::Format, ::QSettings::Scope,const  ::QString&,const  ::QString&, ::QObject*);
    sipQSettings(const  ::QString&, ::QSettings::Format, ::QObject*);
    sipQSettings( ::QObject*);
    virtual ~sipQSettings();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQSettings(const sipQSettings &);
    sipQSettings &operator = (const sipQSettings &);

    char sipPyMethods[7];
};

sipQSettings::sipQSettings(const  ::QString& a0,const  ::QString& a1, ::QObject*a2):  ::QSettings(a0,a1,a2), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQSettings::sipQSettings( ::QSettings::Scope a0,const  ::QString& a1,const  ::QString& a2, ::QObject*a3):  ::QSettings(a0,a1,a2,a3), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQSettings::sipQSettings( ::QSettings::Format a0, ::QSettings::Scope a1,const  ::QString& a2,const  ::QString& a3, ::QObject*a4):  ::QSettings(a0,a1,a2,a3,a4), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQSettings::sipQSettings(const  ::QString& a0, ::QSettings::Format a1, ::QObject*a2):  ::QSettings(a0,a1,a2), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQSettings::sipQSettings( ::QObject*a0):  ::QSettings(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQSettings::~sipQSettings()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQSettings::metaObject() const
{
    return sip_QtCore_qt_metaobject(sipPySelf,sipType_QSettings);
}

int sipQSettings::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QSettings::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtCore_qt_metacall(sipPySelf,sipType_QSettings,_c,_id,_a);

    return _id;
}

void *sipQSettings::qt_metacast(const char *_clname)
{
    return (sip_QtCore_qt_metacast(sipPySelf, sipType_QSettings, _clname)) ? this :  ::QSettings::qt_metacast(_clname);
}

bool sipQSettings::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_event);

    if (!sipMeth)
        return  ::QSettings::event(a0);

    extern bool sipVH_QtCore_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtCore_0(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQSettings::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_eventFilter);

    if (!sipMeth)
        return  ::QSettings::eventFilter(a0,a1);

    extern bool sipVH_QtCore_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtCore_1(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void sipQSettings::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QSettings::timerEvent(a0);
        return;
    }

    extern void sipVH_QtCore_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtCore_2(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQSettings::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_childEvent);

    if (!sipMeth)
    {
         ::QSettings::childEvent(a0);
        return;
    }

    extern void sipVH_QtCore_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtCore_3(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQSettings::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_customEvent);

    if (!sipMeth)
    {
         ::QSettings::customEvent(a0);
        return;
    }

    extern void sipVH_QtCore_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtCore_4(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQSettings::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QSettings::connectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQSettings::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QSettings::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, 0, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QSettings_clear, "clear(self)");

extern "C" {static PyObject *meth_QSettings_clear(PyObject *, PyObject *);}
static PyObject *meth_QSettings_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSettings, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->clear();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_clear, doc_QSettings_clear);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSettings_sync, "sync(self)");

extern "C" {static PyObject *meth_QSettings_sync(PyObject *, PyObject *);}
static PyObject *meth_QSettings_sync(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSettings, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sync();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_sync, doc_QSettings_sync);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSettings_status, "status(self) -> QSettings.Status");

extern "C" {static PyObject *meth_QSettings_status(PyObject *, PyObject *);}
static PyObject *meth_QSettings_status(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSettings, &sipCpp))
        {
             ::QSettings::Status sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->status();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QSettings_Status);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_status, doc_QSettings_status);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSettings_beginGroup, "beginGroup(self, str)");

extern "C" {static PyObject *meth_QSettings_beginGroup(PyObject *, PyObject *);}
static PyObject *meth_QSettings_beginGroup(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSettings, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->beginGroup(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_beginGroup, doc_QSettings_beginGroup);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSettings_endGroup, "endGroup(self)");

extern "C" {static PyObject *meth_QSettings_endGroup(PyObject *, PyObject *);}
static PyObject *meth_QSettings_endGroup(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSettings, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->endGroup();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_endGroup, doc_QSettings_endGroup);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSettings_group, "group(self) -> str");

extern "C" {static PyObject *meth_QSettings_group(PyObject *, PyObject *);}
static PyObject *meth_QSettings_group(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSettings, &sipCpp))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->group());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_group, doc_QSettings_group);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSettings_beginReadArray, "beginReadArray(self, str) -> int");

extern "C" {static PyObject *meth_QSettings_beginReadArray(PyObject *, PyObject *);}
static PyObject *meth_QSettings_beginReadArray(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSettings, &sipCpp, sipType_QString,&a0, &a0State))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->beginReadArray(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_beginReadArray, doc_QSettings_beginReadArray);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSettings_beginWriteArray, "beginWriteArray(self, str, size: int = -1)");

extern "C" {static PyObject *meth_QSettings_beginWriteArray(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSettings_beginWriteArray(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        int a1 = -1;
         ::QSettings *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_size,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|i", &sipSelf, sipType_QSettings, &sipCpp, sipType_QString,&a0, &a0State, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->beginWriteArray(*a0,a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_beginWriteArray, doc_QSettings_beginWriteArray);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSettings_endArray, "endArray(self)");

extern "C" {static PyObject *meth_QSettings_endArray(PyObject *, PyObject *);}
static PyObject *meth_QSettings_endArray(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSettings, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->endArray();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_endArray, doc_QSettings_endArray);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSettings_setArrayIndex, "setArrayIndex(self, int)");

extern "C" {static PyObject *meth_QSettings_setArrayIndex(PyObject *, PyObject *);}
static PyObject *meth_QSettings_setArrayIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QSettings, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setArrayIndex(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_setArrayIndex, doc_QSettings_setArrayIndex);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSettings_allKeys, "allKeys(self) -> List[str]");

extern "C" {static PyObject *meth_QSettings_allKeys(PyObject *, PyObject *);}
static PyObject *meth_QSettings_allKeys(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSettings, &sipCpp))
        {
             ::QStringList*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QStringList(sipCpp->allKeys());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QStringList,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_allKeys, doc_QSettings_allKeys);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSettings_childKeys, "childKeys(self) -> List[str]");

extern "C" {static PyObject *meth_QSettings_childKeys(PyObject *, PyObject *);}
static PyObject *meth_QSettings_childKeys(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSettings, &sipCpp))
        {
             ::QStringList*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QStringList(sipCpp->childKeys());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QStringList,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_childKeys, doc_QSettings_childKeys);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSettings_childGroups, "childGroups(self) -> List[str]");

extern "C" {static PyObject *meth_QSettings_childGroups(PyObject *, PyObject *);}
static PyObject *meth_QSettings_childGroups(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSettings, &sipCpp))
        {
             ::QStringList*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QStringList(sipCpp->childGroups());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QStringList,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_childGroups, doc_QSettings_childGroups);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSettings_isWritable, "isWritable(self) -> bool");

extern "C" {static PyObject *meth_QSettings_isWritable(PyObject *, PyObject *);}
static PyObject *meth_QSettings_isWritable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSettings, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isWritable();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_isWritable, doc_QSettings_isWritable);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSettings_setValue, "setValue(self, str, Any)");

extern "C" {static PyObject *meth_QSettings_setValue(PyObject *, PyObject *);}
static PyObject *meth_QSettings_setValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QVariant* a1;
        int a1State = 0;
         ::QSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QSettings, &sipCpp, sipType_QString,&a0, &a0State, sipType_QVariant,&a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setValue(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QVariant *>(a1),sipType_QVariant,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_setValue, doc_QSettings_setValue);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSettings_value, "value(self, str, defaultValue: Any = None, type: type = None) -> object");

extern "C" {static PyObject *meth_QSettings_value(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSettings_value(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QVariant& a1def = QVariant();
        const  ::QVariant* a1 = &a1def;
        int a1State = 0;
        PyObject * a2 = 0;
        const  ::QSettings *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_defaultValue,
            sipName_type,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|J1P0", &sipSelf, sipType_QSettings, &sipCpp, sipType_QString,&a0, &a0State, sipType_QVariant,&a1, &a1State, &a2))
        {
            PyObject * sipRes = SIP_NULLPTR;
            int sipIsErr = 0;

#line 73 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/sip/QtCore/qsettings.sip"
        QVariant value;
        
        // QSettings has an internal mutex so release the GIL to avoid the possibility
        // of deadlocks.
        Py_BEGIN_ALLOW_THREADS
        value = sipCpp->value(*a0, *a1);
        Py_END_ALLOW_THREADS
        
        sipRes = pyqt4_from_qvariant_by_type(value, a2);
        
        sipIsErr = !sipRes;
#line 793 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/QtCore/sipQtCoreQSettings.cpp"
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QVariant *>(a1),sipType_QVariant,a1State);

            if (sipIsErr)
                return 0;

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_value, doc_QSettings_value);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSettings_remove, "remove(self, str)");

extern "C" {static PyObject *meth_QSettings_remove(PyObject *, PyObject *);}
static PyObject *meth_QSettings_remove(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSettings, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->remove(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_remove, doc_QSettings_remove);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSettings_contains, "contains(self, str) -> bool");

extern "C" {static PyObject *meth_QSettings_contains(PyObject *, PyObject *);}
static PyObject *meth_QSettings_contains(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSettings, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->contains(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_contains, doc_QSettings_contains);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSettings_setFallbacksEnabled, "setFallbacksEnabled(self, bool)");

extern "C" {static PyObject *meth_QSettings_setFallbacksEnabled(PyObject *, PyObject *);}
static PyObject *meth_QSettings_setFallbacksEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QSettings, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setFallbacksEnabled(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_setFallbacksEnabled, doc_QSettings_setFallbacksEnabled);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSettings_fallbacksEnabled, "fallbacksEnabled(self) -> bool");

extern "C" {static PyObject *meth_QSettings_fallbacksEnabled(PyObject *, PyObject *);}
static PyObject *meth_QSettings_fallbacksEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSettings, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->fallbacksEnabled();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_fallbacksEnabled, doc_QSettings_fallbacksEnabled);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSettings_fileName, "fileName(self) -> str");

extern "C" {static PyObject *meth_QSettings_fileName(PyObject *, PyObject *);}
static PyObject *meth_QSettings_fileName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSettings, &sipCpp))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->fileName());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_fileName, doc_QSettings_fileName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSettings_setSystemIniPath, "setSystemIniPath(str)");

extern "C" {static PyObject *meth_QSettings_setSystemIniPath(PyObject *, PyObject *);}
static PyObject *meth_QSettings_setSystemIniPath(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
             ::QSettings::setSystemIniPath(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_setSystemIniPath, doc_QSettings_setSystemIniPath);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSettings_setUserIniPath, "setUserIniPath(str)");

extern "C" {static PyObject *meth_QSettings_setUserIniPath(PyObject *, PyObject *);}
static PyObject *meth_QSettings_setUserIniPath(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
             ::QSettings::setUserIniPath(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_setUserIniPath, doc_QSettings_setUserIniPath);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSettings_setPath, "setPath(QSettings.Format, QSettings.Scope, str)");

extern "C" {static PyObject *meth_QSettings_setPath(PyObject *, PyObject *);}
static PyObject *meth_QSettings_setPath(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSettings::Format a0;
         ::QSettings::Scope a1;
        const  ::QString* a2;
        int a2State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "EEJ1", sipType_QSettings_Format, &a0, sipType_QSettings_Scope, &a1, sipType_QString,&a2, &a2State))
        {
            Py_BEGIN_ALLOW_THREADS
             ::QSettings::setPath(a0,a1,*a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a2),sipType_QString,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_setPath, doc_QSettings_setPath);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSettings_format, "format(self) -> QSettings.Format");

extern "C" {static PyObject *meth_QSettings_format(PyObject *, PyObject *);}
static PyObject *meth_QSettings_format(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSettings, &sipCpp))
        {
             ::QSettings::Format sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->format();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QSettings_Format);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_format, doc_QSettings_format);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSettings_scope, "scope(self) -> QSettings.Scope");

extern "C" {static PyObject *meth_QSettings_scope(PyObject *, PyObject *);}
static PyObject *meth_QSettings_scope(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSettings, &sipCpp))
        {
             ::QSettings::Scope sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->scope();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QSettings_Scope);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_scope, doc_QSettings_scope);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSettings_organizationName, "organizationName(self) -> str");

extern "C" {static PyObject *meth_QSettings_organizationName(PyObject *, PyObject *);}
static PyObject *meth_QSettings_organizationName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSettings, &sipCpp))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->organizationName());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_organizationName, doc_QSettings_organizationName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSettings_applicationName, "applicationName(self) -> str");

extern "C" {static PyObject *meth_QSettings_applicationName(PyObject *, PyObject *);}
static PyObject *meth_QSettings_applicationName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSettings, &sipCpp))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->applicationName());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_applicationName, doc_QSettings_applicationName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSettings_setDefaultFormat, "setDefaultFormat(QSettings.Format)");

extern "C" {static PyObject *meth_QSettings_setDefaultFormat(PyObject *, PyObject *);}
static PyObject *meth_QSettings_setDefaultFormat(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSettings::Format a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "E", sipType_QSettings_Format, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
             ::QSettings::setDefaultFormat(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_setDefaultFormat, doc_QSettings_setDefaultFormat);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSettings_defaultFormat, "defaultFormat() -> QSettings.Format");

extern "C" {static PyObject *meth_QSettings_defaultFormat(PyObject *, PyObject *);}
static PyObject *meth_QSettings_defaultFormat(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QSettings::Format sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes =  ::QSettings::defaultFormat();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QSettings_Format);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_defaultFormat, doc_QSettings_defaultFormat);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSettings_setIniCodec, "setIniCodec(self, QTextCodec)\n"
"setIniCodec(self, str)");

extern "C" {static PyObject *meth_QSettings_setIniCodec(PyObject *, PyObject *);}
static PyObject *meth_QSettings_setIniCodec(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextCodec* a0;
        PyObject *a0Keep;
         ::QSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QSettings, &sipCpp, &a0Keep, sipType_QTextCodec, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setIniCodec(a0);
            Py_END_ALLOW_THREADS

            sipKeepReference(sipSelf, -2, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
         ::QSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAA", &sipSelf, sipType_QSettings, &sipCpp, &a0Keep, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setIniCodec(a0);
            Py_END_ALLOW_THREADS
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_setIniCodec, doc_QSettings_setIniCodec);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSettings_iniCodec, "iniCodec(self) -> QTextCodec");

extern "C" {static PyObject *meth_QSettings_iniCodec(PyObject *, PyObject *);}
static PyObject *meth_QSettings_iniCodec(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSettings, &sipCpp))
        {
             ::QTextCodec*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->iniCodec();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QTextCodec,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_iniCodec, doc_QSettings_iniCodec);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSettings_event, "event(self, QEvent) -> bool");

extern "C" {static PyObject *meth_QSettings_event(PyObject *, PyObject *);}
static PyObject *meth_QSettings_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
         ::QSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QSettings, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QSettings::event(a0) : sipCpp->event(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_event, doc_QSettings_event);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QSettings(void *, const sipTypeDef *);}
static void *cast_QSettings(void *sipCppV, const sipTypeDef *targetType)
{
     ::QSettings *sipCpp = reinterpret_cast< ::QSettings *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QSettings(void *, int);}
static void release_QSettings(void *sipCppV, int)
{
     ::QSettings *sipCpp = reinterpret_cast< ::QSettings *>(sipCppV);

    Py_BEGIN_ALLOW_THREADS

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QSettings(sipSimpleWrapper *);}
static void dealloc_QSettings(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQSettings *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QSettings(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QSettings(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QSettings(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQSettings *sipCpp = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QString& a1def = QString();
        const  ::QString* a1 = &a1def;
        int a1State = 0;
         ::QObject* a2 = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_application,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1|J1JH", sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State, sipType_QObject, &a2, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQSettings(*a0,*a1,a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
         ::QSettings::Scope a0;
        const  ::QString* a1;
        int a1State = 0;
        const  ::QString& a2def = QString();
        const  ::QString* a2 = &a2def;
        int a2State = 0;
         ::QObject* a3 = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_application,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "EJ1|J1JH", sipType_QSettings_Scope, &a0, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State, sipType_QObject, &a3, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQSettings(a0,*a1,*a2,a3);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast< ::QString *>(a2),sipType_QString,a2State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
         ::QSettings::Format a0;
         ::QSettings::Scope a1;
        const  ::QString* a2;
        int a2State = 0;
        const  ::QString& a3def = QString();
        const  ::QString* a3 = &a3def;
        int a3State = 0;
         ::QObject* a4 = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_application,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "EEJ1|J1JH", sipType_QSettings_Format, &a0, sipType_QSettings_Scope, &a1, sipType_QString,&a2, &a2State, sipType_QString,&a3, &a3State, sipType_QObject, &a4, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQSettings(a0,a1,*a2,*a3,a4);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a2),sipType_QString,a2State);
            sipReleaseType(const_cast< ::QString *>(a3),sipType_QString,a3State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QSettings::Format a1;
         ::QObject* a2 = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1E|JH", sipType_QString,&a0, &a0State, sipType_QSettings_Format, &a1, sipType_QObject, &a2, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQSettings(*a0,a1,a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQSettings(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QSettings[] = {{138, 255, 1}};


static PyMethodDef methods_QSettings[] = {
    {SIP_MLNAME_CAST(sipName_allKeys), meth_QSettings_allKeys, METH_VARARGS, SIP_MLDOC_CAST(doc_QSettings_allKeys)},
    {SIP_MLNAME_CAST(sipName_applicationName), meth_QSettings_applicationName, METH_VARARGS, SIP_MLDOC_CAST(doc_QSettings_applicationName)},
    {SIP_MLNAME_CAST(sipName_beginGroup), meth_QSettings_beginGroup, METH_VARARGS, SIP_MLDOC_CAST(doc_QSettings_beginGroup)},
    {SIP_MLNAME_CAST(sipName_beginReadArray), meth_QSettings_beginReadArray, METH_VARARGS, SIP_MLDOC_CAST(doc_QSettings_beginReadArray)},
    {SIP_MLNAME_CAST(sipName_beginWriteArray), SIP_MLMETH_CAST(meth_QSettings_beginWriteArray), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSettings_beginWriteArray)},
    {SIP_MLNAME_CAST(sipName_childGroups), meth_QSettings_childGroups, METH_VARARGS, SIP_MLDOC_CAST(doc_QSettings_childGroups)},
    {SIP_MLNAME_CAST(sipName_childKeys), meth_QSettings_childKeys, METH_VARARGS, SIP_MLDOC_CAST(doc_QSettings_childKeys)},
    {SIP_MLNAME_CAST(sipName_clear), meth_QSettings_clear, METH_VARARGS, SIP_MLDOC_CAST(doc_QSettings_clear)},
    {SIP_MLNAME_CAST(sipName_contains), meth_QSettings_contains, METH_VARARGS, SIP_MLDOC_CAST(doc_QSettings_contains)},
    {SIP_MLNAME_CAST(sipName_defaultFormat), meth_QSettings_defaultFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QSettings_defaultFormat)},
    {SIP_MLNAME_CAST(sipName_endArray), meth_QSettings_endArray, METH_VARARGS, SIP_MLDOC_CAST(doc_QSettings_endArray)},
    {SIP_MLNAME_CAST(sipName_endGroup), meth_QSettings_endGroup, METH_VARARGS, SIP_MLDOC_CAST(doc_QSettings_endGroup)},
    {SIP_MLNAME_CAST(sipName_event), meth_QSettings_event, METH_VARARGS, SIP_MLDOC_CAST(doc_QSettings_event)},
    {SIP_MLNAME_CAST(sipName_fallbacksEnabled), meth_QSettings_fallbacksEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QSettings_fallbacksEnabled)},
    {SIP_MLNAME_CAST(sipName_fileName), meth_QSettings_fileName, METH_VARARGS, SIP_MLDOC_CAST(doc_QSettings_fileName)},
    {SIP_MLNAME_CAST(sipName_format), meth_QSettings_format, METH_VARARGS, SIP_MLDOC_CAST(doc_QSettings_format)},
    {SIP_MLNAME_CAST(sipName_group), meth_QSettings_group, METH_VARARGS, SIP_MLDOC_CAST(doc_QSettings_group)},
    {SIP_MLNAME_CAST(sipName_iniCodec), meth_QSettings_iniCodec, METH_VARARGS, SIP_MLDOC_CAST(doc_QSettings_iniCodec)},
    {SIP_MLNAME_CAST(sipName_isWritable), meth_QSettings_isWritable, METH_VARARGS, SIP_MLDOC_CAST(doc_QSettings_isWritable)},
    {SIP_MLNAME_CAST(sipName_organizationName), meth_QSettings_organizationName, METH_VARARGS, SIP_MLDOC_CAST(doc_QSettings_organizationName)},
    {SIP_MLNAME_CAST(sipName_remove), meth_QSettings_remove, METH_VARARGS, SIP_MLDOC_CAST(doc_QSettings_remove)},
    {SIP_MLNAME_CAST(sipName_scope), meth_QSettings_scope, METH_VARARGS, SIP_MLDOC_CAST(doc_QSettings_scope)},
    {SIP_MLNAME_CAST(sipName_setArrayIndex), meth_QSettings_setArrayIndex, METH_VARARGS, SIP_MLDOC_CAST(doc_QSettings_setArrayIndex)},
    {SIP_MLNAME_CAST(sipName_setDefaultFormat), meth_QSettings_setDefaultFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QSettings_setDefaultFormat)},
    {SIP_MLNAME_CAST(sipName_setFallbacksEnabled), meth_QSettings_setFallbacksEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QSettings_setFallbacksEnabled)},
    {SIP_MLNAME_CAST(sipName_setIniCodec), meth_QSettings_setIniCodec, METH_VARARGS, SIP_MLDOC_CAST(doc_QSettings_setIniCodec)},
    {SIP_MLNAME_CAST(sipName_setPath), meth_QSettings_setPath, METH_VARARGS, SIP_MLDOC_CAST(doc_QSettings_setPath)},
    {SIP_MLNAME_CAST(sipName_setSystemIniPath), meth_QSettings_setSystemIniPath, METH_VARARGS, SIP_MLDOC_CAST(doc_QSettings_setSystemIniPath)},
    {SIP_MLNAME_CAST(sipName_setUserIniPath), meth_QSettings_setUserIniPath, METH_VARARGS, SIP_MLDOC_CAST(doc_QSettings_setUserIniPath)},
    {SIP_MLNAME_CAST(sipName_setValue), meth_QSettings_setValue, METH_VARARGS, SIP_MLDOC_CAST(doc_QSettings_setValue)},
    {SIP_MLNAME_CAST(sipName_status), meth_QSettings_status, METH_VARARGS, SIP_MLDOC_CAST(doc_QSettings_status)},
    {SIP_MLNAME_CAST(sipName_sync), meth_QSettings_sync, METH_VARARGS, SIP_MLDOC_CAST(doc_QSettings_sync)},
    {SIP_MLNAME_CAST(sipName_value), SIP_MLMETH_CAST(meth_QSettings_value), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSettings_value)}
};

static sipEnumMemberDef enummembers_QSettings[] = {
    {sipName_AccessError, static_cast<int>( ::QSettings::AccessError), 176},
    {sipName_FormatError, static_cast<int>( ::QSettings::FormatError), 176},
    {sipName_IniFormat, static_cast<int>( ::QSettings::IniFormat), 174},
    {sipName_InvalidFormat, static_cast<int>( ::QSettings::InvalidFormat), 174},
    {sipName_NativeFormat, static_cast<int>( ::QSettings::NativeFormat), 174},
    {sipName_NoError, static_cast<int>( ::QSettings::NoError), 176},
    {sipName_SystemScope, static_cast<int>( ::QSettings::SystemScope), 175},
    {sipName_UserScope, static_cast<int>( ::QSettings::UserScope), 175},
};

PyDoc_STRVAR(doc_QSettings, "\1QSettings(str, application: str = '', parent: QObject = None)\n"
"QSettings(QSettings.Scope, str, application: str = '', parent: QObject = None)\n"
"QSettings(QSettings.Format, QSettings.Scope, str, application: str = '', parent: QObject = None)\n"
"QSettings(str, QSettings.Format, parent: QObject = None)\n"
"QSettings(parent: QObject = None)");


static pyqt4ClassPluginDef plugin_QSettings = {
    & ::QSettings::staticMetaObject,
    0,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QSettings = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QSettings,
        {SIP_NULLPTR},
        &plugin_QSettings
    },
    {
        sipNameNr_QSettings,
        {0, 0, 1},
        33, methods_QSettings,
        8, enummembers_QSettings,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QSettings,
    -1,
    -1,
    supers_QSettings,
    SIP_NULLPTR,
    init_type_QSettings,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QSettings,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QSettings,
    cast_QSettings,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.21
 *
 * Copyright (c) 2018 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt4.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 98 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/sip/QtCore/qurl.sip"
#include <qurl.h>
#line 29 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/QtCore/sipQtCoreQUrl.cpp"

#line 27 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 33 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/QtCore/sipQtCoreQUrl.cpp"
#line 98 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/sip/QtCore/qurl.sip"
#include <qurl.h>
#line 36 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/QtCore/sipQtCoreQUrl.cpp"
#line 28 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/sip/QtCore/qurlquery.sip"
#include <qurlquery.h>
#line 39 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/QtCore/sipQtCoreQUrl.cpp"
#line 32 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 42 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/QtCore/sipQtCoreQUrl.cpp"
#line 28 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 45 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/QtCore/sipQtCoreQUrl.cpp"
#line 196 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/sip/QtCore/qlist.sip"
#include <qlist.h>
#include <qpair.h>
#line 49 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/QtCore/sipQtCoreQUrl.cpp"
#line 27 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 52 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/QtCore/sipQtCoreQUrl.cpp"
#line 98 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/sip/QtCore/qurl.sip"
#include <qurl.h>
#line 55 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/QtCore/sipQtCoreQUrl.cpp"
#line 196 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/sip/QtCore/qlist.sip"
#include <qlist.h>
#include <qpair.h>
#line 59 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/QtCore/sipQtCoreQUrl.cpp"
#line 68 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 62 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/QtCore/sipQtCoreQUrl.cpp"
#line 102 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/sip/QtCore/qurl.sip"
#include <QHash>
#line 65 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/QtCore/sipQtCoreQUrl.cpp"


PyDoc_STRVAR(doc_QUrl_setUrl, "setUrl(self, str, mode: QUrl.ParsingMode = QUrl.TolerantMode)");

extern "C" {static PyObject *meth_QUrl_setUrl(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QUrl_setUrl(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QUrl::ParsingMode a1 = QUrl::TolerantMode;
         ::QUrl *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|E", &sipSelf, sipType_QUrl, &sipCpp, sipType_QString,&a0, &a0State, sipType_QUrl_ParsingMode, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setUrl(*a0,a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_setUrl, doc_QUrl_setUrl);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_setEncodedUrl, "setEncodedUrl(self, Union[QByteArray, bytes, bytearray], mode: QUrl.ParsingMode = QUrl.TolerantMode)");

extern "C" {static PyObject *meth_QUrl_setEncodedUrl(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QUrl_setEncodedUrl(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray* a0;
        int a0State = 0;
         ::QUrl::ParsingMode a1 = QUrl::TolerantMode;
         ::QUrl *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|E", &sipSelf, sipType_QUrl, &sipCpp, sipType_QByteArray, &a0, &a0State, sipType_QUrl_ParsingMode, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setEncodedUrl(*a0,a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_setEncodedUrl, doc_QUrl_setEncodedUrl);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_isValid, "isValid(self) -> bool");

extern "C" {static PyObject *meth_QUrl_isValid(PyObject *, PyObject *);}
static PyObject *meth_QUrl_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUrl, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isValid();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_isValid, doc_QUrl_isValid);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_isEmpty, "isEmpty(self) -> bool");

extern "C" {static PyObject *meth_QUrl_isEmpty(PyObject *, PyObject *);}
static PyObject *meth_QUrl_isEmpty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUrl, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isEmpty();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_isEmpty, doc_QUrl_isEmpty);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_clear, "clear(self)");

extern "C" {static PyObject *meth_QUrl_clear(PyObject *, PyObject *);}
static PyObject *meth_QUrl_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUrl, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->clear();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_clear, doc_QUrl_clear);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_setScheme, "setScheme(self, str)");

extern "C" {static PyObject *meth_QUrl_setScheme(PyObject *, PyObject *);}
static PyObject *meth_QUrl_setScheme(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QUrl, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setScheme(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_setScheme, doc_QUrl_setScheme);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_scheme, "scheme(self) -> str");

extern "C" {static PyObject *meth_QUrl_scheme(PyObject *, PyObject *);}
static PyObject *meth_QUrl_scheme(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUrl, &sipCpp))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->scheme());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_scheme, doc_QUrl_scheme);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_setAuthority, "setAuthority(self, str, mode: QUrl.ParsingMode = QUrl.TolerantMode)");

extern "C" {static PyObject *meth_QUrl_setAuthority(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QUrl_setAuthority(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QUrl::ParsingMode a1 = QUrl::TolerantMode;
         ::QUrl *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|E", &sipSelf, sipType_QUrl, &sipCpp, sipType_QString,&a0, &a0State, sipType_QUrl_ParsingMode, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setAuthority(*a0,a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_setAuthority, doc_QUrl_setAuthority);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_authority, "authority(self, options: QUrl.ComponentFormattingOptions = QUrl.PrettyDecoded) -> str");

extern "C" {static PyObject *meth_QUrl_authority(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QUrl_authority(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QUrl::ComponentFormattingOptions a0def = QUrl::PrettyDecoded;
         ::QUrl::ComponentFormattingOptions* a0 = &a0def;
        int a0State = 0;
        const  ::QUrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|J1", &sipSelf, sipType_QUrl, &sipCpp, sipType_QUrl_ComponentFormattingOptions, &a0, &a0State))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->authority(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QUrl_ComponentFormattingOptions,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_authority, doc_QUrl_authority);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_setUserInfo, "setUserInfo(self, str, mode: QUrl.ParsingMode = QUrl.TolerantMode)");

extern "C" {static PyObject *meth_QUrl_setUserInfo(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QUrl_setUserInfo(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QUrl::ParsingMode a1 = QUrl::TolerantMode;
         ::QUrl *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|E", &sipSelf, sipType_QUrl, &sipCpp, sipType_QString,&a0, &a0State, sipType_QUrl_ParsingMode, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setUserInfo(*a0,a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_setUserInfo, doc_QUrl_setUserInfo);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_userInfo, "userInfo(self, options: QUrl.ComponentFormattingOptions = QUrl.PrettyDecoded) -> str");

extern "C" {static PyObject *meth_QUrl_userInfo(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QUrl_userInfo(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QUrl::ComponentFormattingOptions a0def = QUrl::PrettyDecoded;
         ::QUrl::ComponentFormattingOptions* a0 = &a0def;
        int a0State = 0;
        const  ::QUrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|J1", &sipSelf, sipType_QUrl, &sipCpp, sipType_QUrl_ComponentFormattingOptions, &a0, &a0State))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->userInfo(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QUrl_ComponentFormattingOptions,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_userInfo, doc_QUrl_userInfo);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_setUserName, "setUserName(self, str, mode: QUrl.ParsingMode = QUrl.TolerantMode)");

extern "C" {static PyObject *meth_QUrl_setUserName(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QUrl_setUserName(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QUrl::ParsingMode a1 = QUrl::TolerantMode;
         ::QUrl *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|E", &sipSelf, sipType_QUrl, &sipCpp, sipType_QString,&a0, &a0State, sipType_QUrl_ParsingMode, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setUserName(*a0,a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_setUserName, doc_QUrl_setUserName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_userName, "userName(self, options: QUrl.ComponentFormattingOptions = QUrl.PrettyDecoded) -> str");

extern "C" {static PyObject *meth_QUrl_userName(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QUrl_userName(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QUrl::ComponentFormattingOptions a0def = QUrl::PrettyDecoded;
         ::QUrl::ComponentFormattingOptions* a0 = &a0def;
        int a0State = 0;
        const  ::QUrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|J1", &sipSelf, sipType_QUrl, &sipCpp, sipType_QUrl_ComponentFormattingOptions, &a0, &a0State))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->userName(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QUrl_ComponentFormattingOptions,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_userName, doc_QUrl_userName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_setPassword, "setPassword(self, str, mode: QUrl.ParsingMode = QUrl.TolerantMode)");

extern "C" {static PyObject *meth_QUrl_setPassword(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QUrl_setPassword(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QUrl::ParsingMode a1 = QUrl::TolerantMode;
         ::QUrl *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|E", &sipSelf, sipType_QUrl, &sipCpp, sipType_QString,&a0, &a0State, sipType_QUrl_ParsingMode, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setPassword(*a0,a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_setPassword, doc_QUrl_setPassword);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_password, "password(self, options: QUrl.ComponentFormattingOptions = QUrl.PrettyDecoded) -> str");

extern "C" {static PyObject *meth_QUrl_password(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QUrl_password(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QUrl::ComponentFormattingOptions a0def = QUrl::PrettyDecoded;
         ::QUrl::ComponentFormattingOptions* a0 = &a0def;
        int a0State = 0;
        const  ::QUrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|J1", &sipSelf, sipType_QUrl, &sipCpp, sipType_QUrl_ComponentFormattingOptions, &a0, &a0State))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->password(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QUrl_ComponentFormattingOptions,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_password, doc_QUrl_password);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_setHost, "setHost(self, str, mode: QUrl.ParsingMode = QUrl.TolerantMode)");

extern "C" {static PyObject *meth_QUrl_setHost(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QUrl_setHost(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QUrl::ParsingMode a1 = QUrl::TolerantMode;
         ::QUrl *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|E", &sipSelf, sipType_QUrl, &sipCpp, sipType_QString,&a0, &a0State, sipType_QUrl_ParsingMode, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setHost(*a0,a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_setHost, doc_QUrl_setHost);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_host, "host(self, options: QUrl.ComponentFormattingOptions = QUrl.PrettyDecoded) -> str");

extern "C" {static PyObject *meth_QUrl_host(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QUrl_host(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QUrl::ComponentFormattingOptions a0def = QUrl::PrettyDecoded;
         ::QUrl::ComponentFormattingOptions* a0 = &a0def;
        int a0State = 0;
        const  ::QUrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|J1", &sipSelf, sipType_QUrl, &sipCpp, sipType_QUrl_ComponentFormattingOptions, &a0, &a0State))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->host(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QUrl_ComponentFormattingOptions,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_host, doc_QUrl_host);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_setPort, "setPort(self, int)");

extern "C" {static PyObject *meth_QUrl_setPort(PyObject *, PyObject *);}
static PyObject *meth_QUrl_setPort(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QUrl, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setPort(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_setPort, doc_QUrl_setPort);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_port, "port(self, defaultPort: int = -1) -> int");

extern "C" {static PyObject *meth_QUrl_port(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QUrl_port(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0 = -1;
        const  ::QUrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_defaultPort,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|i", &sipSelf, sipType_QUrl, &sipCpp, &a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->port(a0);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_port, doc_QUrl_port);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_setPath, "setPath(self, str, mode: QUrl.ParsingMode = QUrl.TolerantMode)");

extern "C" {static PyObject *meth_QUrl_setPath(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QUrl_setPath(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QUrl::ParsingMode a1 = QUrl::TolerantMode;
         ::QUrl *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|E", &sipSelf, sipType_QUrl, &sipCpp, sipType_QString,&a0, &a0State, sipType_QUrl_ParsingMode, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setPath(*a0,a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_setPath, doc_QUrl_setPath);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_path, "path(self, options: QUrl.ComponentFormattingOptions = QUrl.PrettyDecoded) -> str");

extern "C" {static PyObject *meth_QUrl_path(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QUrl_path(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QUrl::ComponentFormattingOptions a0def = QUrl::PrettyDecoded;
         ::QUrl::ComponentFormattingOptions* a0 = &a0def;
        int a0State = 0;
        const  ::QUrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|J1", &sipSelf, sipType_QUrl, &sipCpp, sipType_QUrl_ComponentFormattingOptions, &a0, &a0State))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->path(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QUrl_ComponentFormattingOptions,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_path, doc_QUrl_path);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_setEncodedQuery, "setEncodedQuery(self, Union[QByteArray, bytes, bytearray])");

extern "C" {static PyObject *meth_QUrl_setEncodedQuery(PyObject *, PyObject *);}
static PyObject *meth_QUrl_setEncodedQuery(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray* a0;
        int a0State = 0;
         ::QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QUrl, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setEncodedQuery(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_setEncodedQuery, doc_QUrl_setEncodedQuery);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_encodedQuery, "encodedQuery(self) -> QByteArray");

extern "C" {static PyObject *meth_QUrl_encodedQuery(PyObject *, PyObject *);}
static PyObject *meth_QUrl_encodedQuery(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUrl, &sipCpp))
        {
             ::QByteArray*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QByteArray(sipCpp->encodedQuery());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_encodedQuery, doc_QUrl_encodedQuery);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_setQueryItems, "setQueryItems(self, Sequence[Tuple[str, str]])");

extern "C" {static PyObject *meth_QUrl_setQueryItems(PyObject *, PyObject *);}
static PyObject *meth_QUrl_setQueryItems(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const QList<QPair<QString,QString> >* a0;
        int a0State = 0;
         ::QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QUrl, &sipCpp, sipType_QList_0600QPair_0100QString_0100QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setQueryItems(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QList<QPair<QString,QString> > *>(a0),sipType_QList_0600QPair_0100QString_0100QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_setQueryItems, doc_QUrl_setQueryItems);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_addQueryItem, "addQueryItem(self, str, str)");

extern "C" {static PyObject *meth_QUrl_addQueryItem(PyObject *, PyObject *);}
static PyObject *meth_QUrl_addQueryItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QString* a1;
        int a1State = 0;
         ::QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QUrl, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->addQueryItem(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_addQueryItem, doc_QUrl_addQueryItem);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_queryItems, "queryItems(self) -> List[Tuple[str, str]]");

extern "C" {static PyObject *meth_QUrl_queryItems(PyObject *, PyObject *);}
static PyObject *meth_QUrl_queryItems(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUrl, &sipCpp))
        {
            QList<QPair<QString,QString> >*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList<QPair<QString,QString> >(sipCpp->queryItems());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0600QPair_0100QString_0100QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_queryItems, doc_QUrl_queryItems);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_hasQueryItem, "hasQueryItem(self, str) -> bool");

extern "C" {static PyObject *meth_QUrl_hasQueryItem(PyObject *, PyObject *);}
static PyObject *meth_QUrl_hasQueryItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QUrl, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->hasQueryItem(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_hasQueryItem, doc_QUrl_hasQueryItem);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_queryItemValue, "queryItemValue(self, str) -> str");

extern "C" {static PyObject *meth_QUrl_queryItemValue(PyObject *, PyObject *);}
static PyObject *meth_QUrl_queryItemValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QUrl, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->queryItemValue(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_queryItemValue, doc_QUrl_queryItemValue);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_allQueryItemValues, "allQueryItemValues(self, str) -> List[str]");

extern "C" {static PyObject *meth_QUrl_allQueryItemValues(PyObject *, PyObject *);}
static PyObject *meth_QUrl_allQueryItemValues(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QUrl, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::QStringList*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QStringList(sipCpp->allQueryItemValues(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QStringList,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_allQueryItemValues, doc_QUrl_allQueryItemValues);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_removeQueryItem, "removeQueryItem(self, str)");

extern "C" {static PyObject *meth_QUrl_removeQueryItem(PyObject *, PyObject *);}
static PyObject *meth_QUrl_removeQueryItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QUrl, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->removeQueryItem(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_removeQueryItem, doc_QUrl_removeQueryItem);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_removeAllQueryItems, "removeAllQueryItems(self, str)");

extern "C" {static PyObject *meth_QUrl_removeAllQueryItems(PyObject *, PyObject *);}
static PyObject *meth_QUrl_removeAllQueryItems(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QUrl, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->removeAllQueryItems(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_removeAllQueryItems, doc_QUrl_removeAllQueryItems);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_setFragment, "setFragment(self, str, mode: QUrl.ParsingMode = QUrl.TolerantMode)");

extern "C" {static PyObject *meth_QUrl_setFragment(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QUrl_setFragment(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QUrl::ParsingMode a1 = QUrl::TolerantMode;
         ::QUrl *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|E", &sipSelf, sipType_QUrl, &sipCpp, sipType_QString,&a0, &a0State, sipType_QUrl_ParsingMode, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setFragment(*a0,a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_setFragment, doc_QUrl_setFragment);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_fragment, "fragment(self, options: QUrl.ComponentFormattingOptions = QUrl.PrettyDecoded) -> str");

extern "C" {static PyObject *meth_QUrl_fragment(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QUrl_fragment(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QUrl::ComponentFormattingOptions a0def = QUrl::PrettyDecoded;
         ::QUrl::ComponentFormattingOptions* a0 = &a0def;
        int a0State = 0;
        const  ::QUrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|J1", &sipSelf, sipType_QUrl, &sipCpp, sipType_QUrl_ComponentFormattingOptions, &a0, &a0State))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->fragment(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QUrl_ComponentFormattingOptions,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_fragment, doc_QUrl_fragment);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_resolved, "resolved(self, QUrl) -> QUrl");

extern "C" {static PyObject *meth_QUrl_resolved(PyObject *, PyObject *);}
static PyObject *meth_QUrl_resolved(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QUrl* a0;
        const  ::QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QUrl, &sipCpp, sipType_QUrl, &a0))
        {
             ::QUrl*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QUrl(sipCpp->resolved(*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QUrl,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_resolved, doc_QUrl_resolved);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_isRelative, "isRelative(self) -> bool");

extern "C" {static PyObject *meth_QUrl_isRelative(PyObject *, PyObject *);}
static PyObject *meth_QUrl_isRelative(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUrl, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isRelative();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_isRelative, doc_QUrl_isRelative);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_isParentOf, "isParentOf(self, QUrl) -> bool");

extern "C" {static PyObject *meth_QUrl_isParentOf(PyObject *, PyObject *);}
static PyObject *meth_QUrl_isParentOf(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QUrl* a0;
        const  ::QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QUrl, &sipCpp, sipType_QUrl, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isParentOf(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_isParentOf, doc_QUrl_isParentOf);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_fromLocalFile, "fromLocalFile(str) -> QUrl");

extern "C" {static PyObject *meth_QUrl_fromLocalFile(PyObject *, PyObject *);}
static PyObject *meth_QUrl_fromLocalFile(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
             ::QUrl*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QUrl( ::QUrl::fromLocalFile(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QUrl,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_fromLocalFile, doc_QUrl_fromLocalFile);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_toLocalFile, "toLocalFile(self) -> str");

extern "C" {static PyObject *meth_QUrl_toLocalFile(PyObject *, PyObject *);}
static PyObject *meth_QUrl_toLocalFile(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUrl, &sipCpp))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->toLocalFile());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_toLocalFile, doc_QUrl_toLocalFile);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_toString, "toString(self, options: QUrl.FormattingOptions = QUrl.PrettyDecoded) -> str");

extern "C" {static PyObject *meth_QUrl_toString(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QUrl_toString(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QUrl::FormattingOptions a0def = QUrl::PrettyDecoded;
         ::QUrl::FormattingOptions* a0 = &a0def;
        int a0State = 0;
        const  ::QUrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|J1", &sipSelf, sipType_QUrl, &sipCpp, sipType_QUrl_FormattingOptions, &a0, &a0State))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->toString(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QUrl_FormattingOptions,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_toString, doc_QUrl_toString);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_toEncoded, "toEncoded(self, options: QUrl.FormattingOptions = QUrl.FullyEncoded) -> QByteArray");

extern "C" {static PyObject *meth_QUrl_toEncoded(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QUrl_toEncoded(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QUrl::FormattingOptions a0def = QUrl::FullyEncoded;
         ::QUrl::FormattingOptions* a0 = &a0def;
        int a0State = 0;
        const  ::QUrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|J1", &sipSelf, sipType_QUrl, &sipCpp, sipType_QUrl_FormattingOptions, &a0, &a0State))
        {
             ::QByteArray*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QByteArray(sipCpp->toEncoded(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QUrl_FormattingOptions,a0State);

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_toEncoded, doc_QUrl_toEncoded);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_fromEncoded, "fromEncoded(Union[QByteArray, bytes, bytearray], mode: QUrl.ParsingMode = QUrl.TolerantMode) -> QUrl");

extern "C" {static PyObject *meth_QUrl_fromEncoded(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QUrl_fromEncoded(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray* a0;
        int a0State = 0;
         ::QUrl::ParsingMode a1 = QUrl::TolerantMode;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "J1|E", sipType_QByteArray, &a0, &a0State, sipType_QUrl_ParsingMode, &a1))
        {
             ::QUrl*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QUrl( ::QUrl::fromEncoded(*a0,a1));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipConvertFromNewType(sipRes,sipType_QUrl,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_fromEncoded, doc_QUrl_fromEncoded);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_detach, "detach(self)");

extern "C" {static PyObject *meth_QUrl_detach(PyObject *, PyObject *);}
static PyObject *meth_QUrl_detach(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUrl, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->detach();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_detach, doc_QUrl_detach);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_isDetached, "isDetached(self) -> bool");

extern "C" {static PyObject *meth_QUrl_isDetached(PyObject *, PyObject *);}
static PyObject *meth_QUrl_isDetached(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUrl, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isDetached();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_isDetached, doc_QUrl_isDetached);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_fromPercentEncoding, "fromPercentEncoding(Union[QByteArray, bytes, bytearray]) -> str");

extern "C" {static PyObject *meth_QUrl_fromPercentEncoding(PyObject *, PyObject *);}
static PyObject *meth_QUrl_fromPercentEncoding(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QByteArray, &a0, &a0State))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString( ::QUrl::fromPercentEncoding(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_fromPercentEncoding, doc_QUrl_fromPercentEncoding);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_toPercentEncoding, "toPercentEncoding(str, exclude: Union[QByteArray, bytes, bytearray] = QByteArray(), include: Union[QByteArray, bytes, bytearray] = QByteArray()) -> QByteArray");

extern "C" {static PyObject *meth_QUrl_toPercentEncoding(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QUrl_toPercentEncoding(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QByteArray& a1def = QByteArray();
        const  ::QByteArray* a1 = &a1def;
        int a1State = 0;
        const  ::QByteArray& a2def = QByteArray();
        const  ::QByteArray* a2 = &a2def;
        int a2State = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_exclude,
            sipName_include,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "J1|J1J1", sipType_QString,&a0, &a0State, sipType_QByteArray, &a1, &a1State, sipType_QByteArray, &a2, &a2State))
        {
             ::QByteArray*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QByteArray( ::QUrl::toPercentEncoding(*a0,*a1,*a2));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QByteArray *>(a1),sipType_QByteArray,a1State);
            sipReleaseType(const_cast< ::QByteArray *>(a2),sipType_QByteArray,a2State);

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_toPercentEncoding, doc_QUrl_toPercentEncoding);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_fromPunycode, "fromPunycode(Union[QByteArray, bytes, bytearray]) -> str");

extern "C" {static PyObject *meth_QUrl_fromPunycode(PyObject *, PyObject *);}
static PyObject *meth_QUrl_fromPunycode(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QByteArray, &a0, &a0State))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString( ::QUrl::fromPunycode(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_fromPunycode, doc_QUrl_fromPunycode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_toPunycode, "toPunycode(str) -> QByteArray");

extern "C" {static PyObject *meth_QUrl_toPunycode(PyObject *, PyObject *);}
static PyObject *meth_QUrl_toPunycode(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
             ::QByteArray*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QByteArray( ::QUrl::toPunycode(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_toPunycode, doc_QUrl_toPunycode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_hasQuery, "hasQuery(self) -> bool");

extern "C" {static PyObject *meth_QUrl_hasQuery(PyObject *, PyObject *);}
static PyObject *meth_QUrl_hasQuery(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUrl, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->hasQuery();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_hasQuery, doc_QUrl_hasQuery);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_hasFragment, "hasFragment(self) -> bool");

extern "C" {static PyObject *meth_QUrl_hasFragment(PyObject *, PyObject *);}
static PyObject *meth_QUrl_hasFragment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUrl, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->hasFragment();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_hasFragment, doc_QUrl_hasFragment);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_errorString, "errorString(self) -> str");

extern "C" {static PyObject *meth_QUrl_errorString(PyObject *, PyObject *);}
static PyObject *meth_QUrl_errorString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUrl, &sipCpp))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->errorString());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_errorString, doc_QUrl_errorString);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_fromAce, "fromAce(Union[QByteArray, bytes, bytearray]) -> str");

extern "C" {static PyObject *meth_QUrl_fromAce(PyObject *, PyObject *);}
static PyObject *meth_QUrl_fromAce(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QByteArray, &a0, &a0State))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString( ::QUrl::fromAce(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_fromAce, doc_QUrl_fromAce);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_toAce, "toAce(str) -> QByteArray");

extern "C" {static PyObject *meth_QUrl_toAce(PyObject *, PyObject *);}
static PyObject *meth_QUrl_toAce(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
             ::QByteArray*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QByteArray( ::QUrl::toAce(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_toAce, doc_QUrl_toAce);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_idnWhitelist, "idnWhitelist() -> List[str]");

extern "C" {static PyObject *meth_QUrl_idnWhitelist(PyObject *, PyObject *);}
static PyObject *meth_QUrl_idnWhitelist(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QStringList*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QStringList( ::QUrl::idnWhitelist());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QStringList,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_idnWhitelist, doc_QUrl_idnWhitelist);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_setIdnWhitelist, "setIdnWhitelist(Sequence[str])");

extern "C" {static PyObject *meth_QUrl_setIdnWhitelist(PyObject *, PyObject *);}
static PyObject *meth_QUrl_setIdnWhitelist(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStringList* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QStringList,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
             ::QUrl::setIdnWhitelist(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QStringList *>(a0),sipType_QStringList,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_setIdnWhitelist, doc_QUrl_setIdnWhitelist);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_setEncodedUserName, "setEncodedUserName(self, Union[QByteArray, bytes, bytearray])");

extern "C" {static PyObject *meth_QUrl_setEncodedUserName(PyObject *, PyObject *);}
static PyObject *meth_QUrl_setEncodedUserName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray* a0;
        int a0State = 0;
         ::QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QUrl, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setEncodedUserName(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_setEncodedUserName, doc_QUrl_setEncodedUserName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_encodedUserName, "encodedUserName(self) -> QByteArray");

extern "C" {static PyObject *meth_QUrl_encodedUserName(PyObject *, PyObject *);}
static PyObject *meth_QUrl_encodedUserName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUrl, &sipCpp))
        {
             ::QByteArray*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QByteArray(sipCpp->encodedUserName());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_encodedUserName, doc_QUrl_encodedUserName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_setEncodedPassword, "setEncodedPassword(self, Union[QByteArray, bytes, bytearray])");

extern "C" {static PyObject *meth_QUrl_setEncodedPassword(PyObject *, PyObject *);}
static PyObject *meth_QUrl_setEncodedPassword(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray* a0;
        int a0State = 0;
         ::QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QUrl, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setEncodedPassword(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_setEncodedPassword, doc_QUrl_setEncodedPassword);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_encodedPassword, "encodedPassword(self) -> QByteArray");

extern "C" {static PyObject *meth_QUrl_encodedPassword(PyObject *, PyObject *);}
static PyObject *meth_QUrl_encodedPassword(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUrl, &sipCpp))
        {
             ::QByteArray*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QByteArray(sipCpp->encodedPassword());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_encodedPassword, doc_QUrl_encodedPassword);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_setEncodedHost, "setEncodedHost(self, Union[QByteArray, bytes, bytearray])");

extern "C" {static PyObject *meth_QUrl_setEncodedHost(PyObject *, PyObject *);}
static PyObject *meth_QUrl_setEncodedHost(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray* a0;
        int a0State = 0;
         ::QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QUrl, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setEncodedHost(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_setEncodedHost, doc_QUrl_setEncodedHost);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_encodedHost, "encodedHost(self) -> QByteArray");

extern "C" {static PyObject *meth_QUrl_encodedHost(PyObject *, PyObject *);}
static PyObject *meth_QUrl_encodedHost(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUrl, &sipCpp))
        {
             ::QByteArray*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QByteArray(sipCpp->encodedHost());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_encodedHost, doc_QUrl_encodedHost);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_setEncodedPath, "setEncodedPath(self, Union[QByteArray, bytes, bytearray])");

extern "C" {static PyObject *meth_QUrl_setEncodedPath(PyObject *, PyObject *);}
static PyObject *meth_QUrl_setEncodedPath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray* a0;
        int a0State = 0;
         ::QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QUrl, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setEncodedPath(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_setEncodedPath, doc_QUrl_setEncodedPath);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_encodedPath, "encodedPath(self) -> QByteArray");

extern "C" {static PyObject *meth_QUrl_encodedPath(PyObject *, PyObject *);}
static PyObject *meth_QUrl_encodedPath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUrl, &sipCpp))
        {
             ::QByteArray*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QByteArray(sipCpp->encodedPath());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_encodedPath, doc_QUrl_encodedPath);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_setEncodedQueryItems, "setEncodedQueryItems(self, Sequence[Tuple[Union[QByteArray, bytes, bytearray], Union[QByteArray, bytes, bytearray]]])");

extern "C" {static PyObject *meth_QUrl_setEncodedQueryItems(PyObject *, PyObject *);}
static PyObject *meth_QUrl_setEncodedQueryItems(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const QList<QPair<QByteArray,QByteArray> >* a0;
        int a0State = 0;
         ::QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QUrl, &sipCpp, sipType_QList_0600QPair_0100QByteArray_0100QByteArray,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setEncodedQueryItems(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QList<QPair<QByteArray,QByteArray> > *>(a0),sipType_QList_0600QPair_0100QByteArray_0100QByteArray,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_setEncodedQueryItems, doc_QUrl_setEncodedQueryItems);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_addEncodedQueryItem, "addEncodedQueryItem(self, Union[QByteArray, bytes, bytearray], Union[QByteArray, bytes, bytearray])");

extern "C" {static PyObject *meth_QUrl_addEncodedQueryItem(PyObject *, PyObject *);}
static PyObject *meth_QUrl_addEncodedQueryItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray* a0;
        int a0State = 0;
        const  ::QByteArray* a1;
        int a1State = 0;
         ::QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QUrl, &sipCpp, sipType_QByteArray, &a0, &a0State, sipType_QByteArray, &a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->addEncodedQueryItem(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);
            sipReleaseType(const_cast< ::QByteArray *>(a1),sipType_QByteArray,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_addEncodedQueryItem, doc_QUrl_addEncodedQueryItem);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_encodedQueryItems, "encodedQueryItems(self) -> List[Tuple[QByteArray, QByteArray]]");

extern "C" {static PyObject *meth_QUrl_encodedQueryItems(PyObject *, PyObject *);}
static PyObject *meth_QUrl_encodedQueryItems(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUrl, &sipCpp))
        {
            QList<QPair<QByteArray,QByteArray> >*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList<QPair<QByteArray,QByteArray> >(sipCpp->encodedQueryItems());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0600QPair_0100QByteArray_0100QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_encodedQueryItems, doc_QUrl_encodedQueryItems);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_hasEncodedQueryItem, "hasEncodedQueryItem(self, Union[QByteArray, bytes, bytearray]) -> bool");

extern "C" {static PyObject *meth_QUrl_hasEncodedQueryItem(PyObject *, PyObject *);}
static PyObject *meth_QUrl_hasEncodedQueryItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray* a0;
        int a0State = 0;
        const  ::QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QUrl, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->hasEncodedQueryItem(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_hasEncodedQueryItem, doc_QUrl_hasEncodedQueryItem);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_encodedQueryItemValue, "encodedQueryItemValue(self, Union[QByteArray, bytes, bytearray]) -> QByteArray");

extern "C" {static PyObject *meth_QUrl_encodedQueryItemValue(PyObject *, PyObject *);}
static PyObject *meth_QUrl_encodedQueryItemValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray* a0;
        int a0State = 0;
        const  ::QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QUrl, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
             ::QByteArray*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QByteArray(sipCpp->encodedQueryItemValue(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_encodedQueryItemValue, doc_QUrl_encodedQueryItemValue);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_allEncodedQueryItemValues, "allEncodedQueryItemValues(self, Union[QByteArray, bytes, bytearray]) -> List[QByteArray]");

extern "C" {static PyObject *meth_QUrl_allEncodedQueryItemValues(PyObject *, PyObject *);}
static PyObject *meth_QUrl_allEncodedQueryItemValues(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray* a0;
        int a0State = 0;
        const  ::QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QUrl, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            QList< ::QByteArray>*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList< ::QByteArray>(sipCpp->allEncodedQueryItemValues(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipConvertFromNewType(sipRes,sipType_QList_0100QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_allEncodedQueryItemValues, doc_QUrl_allEncodedQueryItemValues);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_removeEncodedQueryItem, "removeEncodedQueryItem(self, Union[QByteArray, bytes, bytearray])");

extern "C" {static PyObject *meth_QUrl_removeEncodedQueryItem(PyObject *, PyObject *);}
static PyObject *meth_QUrl_removeEncodedQueryItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray* a0;
        int a0State = 0;
         ::QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QUrl, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->removeEncodedQueryItem(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_removeEncodedQueryItem, doc_QUrl_removeEncodedQueryItem);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_removeAllEncodedQueryItems, "removeAllEncodedQueryItems(self, Union[QByteArray, bytes, bytearray])");

extern "C" {static PyObject *meth_QUrl_removeAllEncodedQueryItems(PyObject *, PyObject *);}
static PyObject *meth_QUrl_removeAllEncodedQueryItems(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray* a0;
        int a0State = 0;
         ::QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QUrl, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->removeAllEncodedQueryItems(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_removeAllEncodedQueryItems, doc_QUrl_removeAllEncodedQueryItems);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_setEncodedFragment, "setEncodedFragment(self, Union[QByteArray, bytes, bytearray])");

extern "C" {static PyObject *meth_QUrl_setEncodedFragment(PyObject *, PyObject *);}
static PyObject *meth_QUrl_setEncodedFragment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray* a0;
        int a0State = 0;
         ::QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QUrl, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setEncodedFragment(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_setEncodedFragment, doc_QUrl_setEncodedFragment);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_encodedFragment, "encodedFragment(self) -> QByteArray");

extern "C" {static PyObject *meth_QUrl_encodedFragment(PyObject *, PyObject *);}
static PyObject *meth_QUrl_encodedFragment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUrl, &sipCpp))
        {
             ::QByteArray*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QByteArray(sipCpp->encodedFragment());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_encodedFragment, doc_QUrl_encodedFragment);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_fromUserInput, "fromUserInput(str) -> QUrl");

extern "C" {static PyObject *meth_QUrl_fromUserInput(PyObject *, PyObject *);}
static PyObject *meth_QUrl_fromUserInput(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
             ::QUrl*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QUrl( ::QUrl::fromUserInput(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QUrl,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_fromUserInput, doc_QUrl_fromUserInput);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_swap, "swap(self, QUrl)");

extern "C" {static PyObject *meth_QUrl_swap(PyObject *, PyObject *);}
static PyObject *meth_QUrl_swap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QUrl* a0;
         ::QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QUrl, &sipCpp, sipType_QUrl, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->swap(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_swap, doc_QUrl_swap);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_topLevelDomain, "topLevelDomain(self, options: QUrl.ComponentFormattingOptions = QUrl.PrettyDecoded) -> str");

extern "C" {static PyObject *meth_QUrl_topLevelDomain(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QUrl_topLevelDomain(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QUrl::ComponentFormattingOptions a0def = QUrl::PrettyDecoded;
         ::QUrl::ComponentFormattingOptions* a0 = &a0def;
        int a0State = 0;
        const  ::QUrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|J1", &sipSelf, sipType_QUrl, &sipCpp, sipType_QUrl_ComponentFormattingOptions, &a0, &a0State))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->topLevelDomain(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QUrl_ComponentFormattingOptions,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_topLevelDomain, doc_QUrl_topLevelDomain);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_isLocalFile, "isLocalFile(self) -> bool");

extern "C" {static PyObject *meth_QUrl_isLocalFile(PyObject *, PyObject *);}
static PyObject *meth_QUrl_isLocalFile(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUrl, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isLocalFile();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_isLocalFile, doc_QUrl_isLocalFile);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_setQuery, "setQuery(self, str, mode: QUrl.ParsingMode = QUrl.TolerantMode)\n"
"setQuery(self, QUrlQuery)");

extern "C" {static PyObject *meth_QUrl_setQuery(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QUrl_setQuery(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QUrl::ParsingMode a1 = QUrl::TolerantMode;
         ::QUrl *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|E", &sipSelf, sipType_QUrl, &sipCpp, sipType_QString,&a0, &a0State, sipType_QUrl_ParsingMode, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setQuery(*a0,a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QUrlQuery* a0;
         ::QUrl *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "BJ9", &sipSelf, sipType_QUrl, &sipCpp, sipType_QUrlQuery, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setQuery(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_setQuery, doc_QUrl_setQuery);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_query, "query(self, options: QUrl.ComponentFormattingOptions = QUrl.PrettyDecoded) -> str");

extern "C" {static PyObject *meth_QUrl_query(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QUrl_query(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QUrl::ComponentFormattingOptions a0def = QUrl::PrettyDecoded;
         ::QUrl::ComponentFormattingOptions* a0 = &a0def;
        int a0State = 0;
        const  ::QUrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|J1", &sipSelf, sipType_QUrl, &sipCpp, sipType_QUrl_ComponentFormattingOptions, &a0, &a0State))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->query(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QUrl_ComponentFormattingOptions,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_query, doc_QUrl_query);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QUrl___ge__(PyObject *,PyObject *);}
static PyObject *slot_QUrl___ge__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QUrl *sipCpp = reinterpret_cast< ::QUrl *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QUrl));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QUrl* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QUrl, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = !sipCpp-> ::QUrl::operator<(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, ge_slot, sipType_QUrl, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QUrl___ne__(PyObject *,PyObject *);}
static PyObject *slot_QUrl___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QUrl *sipCpp = reinterpret_cast< ::QUrl *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QUrl));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QUrl* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QUrl, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp-> ::QUrl::operator!=(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, ne_slot, sipType_QUrl, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QUrl___eq__(PyObject *,PyObject *);}
static PyObject *slot_QUrl___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QUrl *sipCpp = reinterpret_cast< ::QUrl *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QUrl));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QUrl* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QUrl, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp-> ::QUrl::operator==(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, eq_slot, sipType_QUrl, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QUrl___lt__(PyObject *,PyObject *);}
static PyObject *slot_QUrl___lt__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QUrl *sipCpp = reinterpret_cast< ::QUrl *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QUrl));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QUrl* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QUrl, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp-> ::QUrl::operator<(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, lt_slot, sipType_QUrl, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QUrl___repr__(PyObject *);}
static PyObject *slot_QUrl___repr__(PyObject *sipSelf)
{
     ::QUrl *sipCpp = reinterpret_cast< ::QUrl *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QUrl));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            PyObject * sipRes = SIP_NULLPTR;

#line 146 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/sip/QtCore/qurl.sip"
        PyObject *uni = qpycore_PyObject_FromQString(sipCpp->toString());
        
        if (uni)
        {
        #if PY_MAJOR_VERSION >= 3
            sipRes = PyUnicode_FromFormat("PyQt4.QtCore.QUrl(%R)", uni);
        #else
            sipRes = PyString_FromFormat("PyQt4.QtCore.QUrl(");
            PyString_ConcatAndDel(&sipRes, PyObject_Repr(uni));
            PyString_ConcatAndDel(&sipRes, PyString_FromString(")"));
        #endif
        
            Py_DECREF(uni);
        }
#line 2853 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/QtCore/sipQtCoreQUrl.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static long slot_QUrl___hash__(PyObject *);}
static long slot_QUrl___hash__(PyObject *sipSelf)
{
     ::QUrl *sipCpp = reinterpret_cast< ::QUrl *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QUrl));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 129 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/sip/QtCore/qurl.sip"
        if (sipIsAPIEnabled("QUrl", 2, 0))
        {
        #if QT_VERSION >= 0x040700
            sipRes = qHash(*sipCpp);
        #else
            sipRes = qHash(sipCpp->toString());
        #endif
        }
        else
        {
            // Mimic Python's default behavour.
            sipRes = _Py_HashPointer(sipSelf);
        }
#line 2890 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/QtCore/sipQtCoreQUrl.cpp"

            return sipRes;
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QUrl(void *, int);}
static void release_QUrl(void *sipCppV, int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast< ::QUrl *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void assign_QUrl(void *, SIP_SSIZE_T, void *);}
static void assign_QUrl(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QUrl *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QUrl *>(sipSrc);
}


extern "C" {static void *array_QUrl(SIP_SSIZE_T);}
static void *array_QUrl(SIP_SSIZE_T sipNrElem)
{
    return new  ::QUrl[sipNrElem];
}


extern "C" {static void *copy_QUrl(const void *, SIP_SSIZE_T);}
static void *copy_QUrl(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QUrl(reinterpret_cast<const  ::QUrl *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QUrl(sipSimpleWrapper *);}
static void dealloc_QUrl(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QUrl(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QUrl(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QUrl(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QUrl *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new  ::QUrl();
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QUrl::ParsingMode a1 = QUrl::TolerantMode;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_mode,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1|E", sipType_QString,&a0, &a0State, sipType_QUrl_ParsingMode, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new  ::QUrl(*a0,a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipCpp;
        }
    }

    {
        const  ::QUrl* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QUrl, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new  ::QUrl(*a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QUrl[] = {
    {(void *)slot_QUrl___ge__, ge_slot},
    {(void *)slot_QUrl___ne__, ne_slot},
    {(void *)slot_QUrl___eq__, eq_slot},
    {(void *)slot_QUrl___lt__, lt_slot},
    {(void *)slot_QUrl___repr__, repr_slot},
    {(void *)slot_QUrl___hash__, hash_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QUrl[] = {
    {SIP_MLNAME_CAST(sipName_addEncodedQueryItem), meth_QUrl_addEncodedQueryItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_addEncodedQueryItem)},
    {SIP_MLNAME_CAST(sipName_addQueryItem), meth_QUrl_addQueryItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_addQueryItem)},
    {SIP_MLNAME_CAST(sipName_allEncodedQueryItemValues), meth_QUrl_allEncodedQueryItemValues, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_allEncodedQueryItemValues)},
    {SIP_MLNAME_CAST(sipName_allQueryItemValues), meth_QUrl_allQueryItemValues, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_allQueryItemValues)},
    {SIP_MLNAME_CAST(sipName_authority), SIP_MLMETH_CAST(meth_QUrl_authority), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QUrl_authority)},
    {SIP_MLNAME_CAST(sipName_clear), meth_QUrl_clear, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_clear)},
    {SIP_MLNAME_CAST(sipName_detach), meth_QUrl_detach, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_detach)},
    {SIP_MLNAME_CAST(sipName_encodedFragment), meth_QUrl_encodedFragment, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_encodedFragment)},
    {SIP_MLNAME_CAST(sipName_encodedHost), meth_QUrl_encodedHost, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_encodedHost)},
    {SIP_MLNAME_CAST(sipName_encodedPassword), meth_QUrl_encodedPassword, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_encodedPassword)},
    {SIP_MLNAME_CAST(sipName_encodedPath), meth_QUrl_encodedPath, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_encodedPath)},
    {SIP_MLNAME_CAST(sipName_encodedQuery), meth_QUrl_encodedQuery, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_encodedQuery)},
    {SIP_MLNAME_CAST(sipName_encodedQueryItemValue), meth_QUrl_encodedQueryItemValue, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_encodedQueryItemValue)},
    {SIP_MLNAME_CAST(sipName_encodedQueryItems), meth_QUrl_encodedQueryItems, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_encodedQueryItems)},
    {SIP_MLNAME_CAST(sipName_encodedUserName), meth_QUrl_encodedUserName, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_encodedUserName)},
    {SIP_MLNAME_CAST(sipName_errorString), meth_QUrl_errorString, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_errorString)},
    {SIP_MLNAME_CAST(sipName_fragment), SIP_MLMETH_CAST(meth_QUrl_fragment), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QUrl_fragment)},
    {SIP_MLNAME_CAST(sipName_fromAce), meth_QUrl_fromAce, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_fromAce)},
    {SIP_MLNAME_CAST(sipName_fromEncoded), SIP_MLMETH_CAST(meth_QUrl_fromEncoded), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QUrl_fromEncoded)},
    {SIP_MLNAME_CAST(sipName_fromLocalFile), meth_QUrl_fromLocalFile, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_fromLocalFile)},
    {SIP_MLNAME_CAST(sipName_fromPercentEncoding), meth_QUrl_fromPercentEncoding, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_fromPercentEncoding)},
    {SIP_MLNAME_CAST(sipName_fromPunycode), meth_QUrl_fromPunycode, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_fromPunycode)},
    {SIP_MLNAME_CAST(sipName_fromUserInput), meth_QUrl_fromUserInput, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_fromUserInput)},
    {SIP_MLNAME_CAST(sipName_hasEncodedQueryItem), meth_QUrl_hasEncodedQueryItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_hasEncodedQueryItem)},
    {SIP_MLNAME_CAST(sipName_hasFragment), meth_QUrl_hasFragment, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_hasFragment)},
    {SIP_MLNAME_CAST(sipName_hasQuery), meth_QUrl_hasQuery, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_hasQuery)},
    {SIP_MLNAME_CAST(sipName_hasQueryItem), meth_QUrl_hasQueryItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_hasQueryItem)},
    {SIP_MLNAME_CAST(sipName_host), SIP_MLMETH_CAST(meth_QUrl_host), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QUrl_host)},
    {SIP_MLNAME_CAST(sipName_idnWhitelist), meth_QUrl_idnWhitelist, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_idnWhitelist)},
    {SIP_MLNAME_CAST(sipName_isDetached), meth_QUrl_isDetached, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_isDetached)},
    {SIP_MLNAME_CAST(sipName_isEmpty), meth_QUrl_isEmpty, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_isEmpty)},
    {SIP_MLNAME_CAST(sipName_isLocalFile), meth_QUrl_isLocalFile, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_isLocalFile)},
    {SIP_MLNAME_CAST(sipName_isParentOf), meth_QUrl_isParentOf, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_isParentOf)},
    {SIP_MLNAME_CAST(sipName_isRelative), meth_QUrl_isRelative, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_isRelative)},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QUrl_isValid, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_isValid)},
    {SIP_MLNAME_CAST(sipName_password), SIP_MLMETH_CAST(meth_QUrl_password), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QUrl_password)},
    {SIP_MLNAME_CAST(sipName_path), SIP_MLMETH_CAST(meth_QUrl_path), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QUrl_path)},
    {SIP_MLNAME_CAST(sipName_port), SIP_MLMETH_CAST(meth_QUrl_port), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QUrl_port)},
    {SIP_MLNAME_CAST(sipName_query), SIP_MLMETH_CAST(meth_QUrl_query), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QUrl_query)},
    {SIP_MLNAME_CAST(sipName_queryItemValue), meth_QUrl_queryItemValue, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_queryItemValue)},
    {SIP_MLNAME_CAST(sipName_queryItems), meth_QUrl_queryItems, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_queryItems)},
    {SIP_MLNAME_CAST(sipName_removeAllEncodedQueryItems), meth_QUrl_removeAllEncodedQueryItems, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_removeAllEncodedQueryItems)},
    {SIP_MLNAME_CAST(sipName_removeAllQueryItems), meth_QUrl_removeAllQueryItems, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_removeAllQueryItems)},
    {SIP_MLNAME_CAST(sipName_removeEncodedQueryItem), meth_QUrl_removeEncodedQueryItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_removeEncodedQueryItem)},
    {SIP_MLNAME_CAST(sipName_removeQueryItem), meth_QUrl_removeQueryItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_removeQueryItem)},
    {SIP_MLNAME_CAST(sipName_resolved), meth_QUrl_resolved, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_resolved)},
    {SIP_MLNAME_CAST(sipName_scheme), meth_QUrl_scheme, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_scheme)},
    {SIP_MLNAME_CAST(sipName_setAuthority), SIP_MLMETH_CAST(meth_QUrl_setAuthority), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QUrl_setAuthority)},
    {SIP_MLNAME_CAST(sipName_setEncodedFragment), meth_QUrl_setEncodedFragment, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_setEncodedFragment)},
    {SIP_MLNAME_CAST(sipName_setEncodedHost), meth_QUrl_setEncodedHost, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_setEncodedHost)},
    {SIP_MLNAME_CAST(sipName_setEncodedPassword), meth_QUrl_setEncodedPassword, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_setEncodedPassword)},
    {SIP_MLNAME_CAST(sipName_setEncodedPath), meth_QUrl_setEncodedPath, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_setEncodedPath)},
    {SIP_MLNAME_CAST(sipName_setEncodedQuery), meth_QUrl_setEncodedQuery, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_setEncodedQuery)},
    {SIP_MLNAME_CAST(sipName_setEncodedQueryItems), meth_QUrl_setEncodedQueryItems, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_setEncodedQueryItems)},
    {SIP_MLNAME_CAST(sipName_setEncodedUrl), SIP_MLMETH_CAST(meth_QUrl_setEncodedUrl), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QUrl_setEncodedUrl)},
    {SIP_MLNAME_CAST(sipName_setEncodedUserName), meth_QUrl_setEncodedUserName, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_setEncodedUserName)},
    {SIP_MLNAME_CAST(sipName_setFragment), SIP_MLMETH_CAST(meth_QUrl_setFragment), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QUrl_setFragment)},
    {SIP_MLNAME_CAST(sipName_setHost), SIP_MLMETH_CAST(meth_QUrl_setHost), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QUrl_setHost)},
    {SIP_MLNAME_CAST(sipName_setIdnWhitelist), meth_QUrl_setIdnWhitelist, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_setIdnWhitelist)},
    {SIP_MLNAME_CAST(sipName_setPassword), SIP_MLMETH_CAST(meth_QUrl_setPassword), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QUrl_setPassword)},
    {SIP_MLNAME_CAST(sipName_setPath), SIP_MLMETH_CAST(meth_QUrl_setPath), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QUrl_setPath)},
    {SIP_MLNAME_CAST(sipName_setPort), meth_QUrl_setPort, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_setPort)},
    {SIP_MLNAME_CAST(sipName_setQuery), SIP_MLMETH_CAST(meth_QUrl_setQuery), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QUrl_setQuery)},
    {SIP_MLNAME_CAST(sipName_setQueryItems), meth_QUrl_setQueryItems, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_setQueryItems)},
    {SIP_MLNAME_CAST(sipName_setScheme), meth_QUrl_setScheme, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_setScheme)},
    {SIP_MLNAME_CAST(sipName_setUrl), SIP_MLMETH_CAST(meth_QUrl_setUrl), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QUrl_setUrl)},
    {SIP_MLNAME_CAST(sipName_setUserInfo), SIP_MLMETH_CAST(meth_QUrl_setUserInfo), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QUrl_setUserInfo)},
    {SIP_MLNAME_CAST(sipName_setUserName), SIP_MLMETH_CAST(meth_QUrl_setUserName), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QUrl_setUserName)},
    {SIP_MLNAME_CAST(sipName_swap), meth_QUrl_swap, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_swap)},
    {SIP_MLNAME_CAST(sipName_toAce), meth_QUrl_toAce, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_toAce)},
    {SIP_MLNAME_CAST(sipName_toEncoded), SIP_MLMETH_CAST(meth_QUrl_toEncoded), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QUrl_toEncoded)},
    {SIP_MLNAME_CAST(sipName_toLocalFile), meth_QUrl_toLocalFile, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_toLocalFile)},
    {SIP_MLNAME_CAST(sipName_toPercentEncoding), SIP_MLMETH_CAST(meth_QUrl_toPercentEncoding), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QUrl_toPercentEncoding)},
    {SIP_MLNAME_CAST(sipName_toPunycode), meth_QUrl_toPunycode, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_toPunycode)},
    {SIP_MLNAME_CAST(sipName_toString), SIP_MLMETH_CAST(meth_QUrl_toString), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QUrl_toString)},
    {SIP_MLNAME_CAST(sipName_topLevelDomain), SIP_MLMETH_CAST(meth_QUrl_topLevelDomain), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QUrl_topLevelDomain)},
    {SIP_MLNAME_CAST(sipName_userInfo), SIP_MLMETH_CAST(meth_QUrl_userInfo), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QUrl_userInfo)},
    {SIP_MLNAME_CAST(sipName_userName), SIP_MLMETH_CAST(meth_QUrl_userName), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QUrl_userName)}
};

static sipEnumMemberDef enummembers_QUrl[] = {
    {sipName_DecodeReserved, static_cast<int>( ::QUrl::DecodeReserved), 238},
    {sipName_DecodedMode, static_cast<int>( ::QUrl::DecodedMode), 241},
    {sipName_EncodeDelimiters, static_cast<int>( ::QUrl::EncodeDelimiters), 238},
    {sipName_EncodeReserved, static_cast<int>( ::QUrl::EncodeReserved), 238},
    {sipName_EncodeSpaces, static_cast<int>( ::QUrl::EncodeSpaces), 238},
    {sipName_EncodeUnicode, static_cast<int>( ::QUrl::EncodeUnicode), 238},
    {sipName_FullyDecoded, static_cast<int>( ::QUrl::FullyDecoded), 238},
    {sipName_FullyEncoded, static_cast<int>( ::QUrl::FullyEncoded), 238},
    {sipName_None_, static_cast<int>( ::QUrl::None), 242},
    {sipName_PreferLocalFile, static_cast<int>( ::QUrl::PreferLocalFile), 242},
    {sipName_PrettyDecoded, static_cast<int>( ::QUrl::PrettyDecoded), 238},
    {sipName_RemoveAuthority, static_cast<int>( ::QUrl::RemoveAuthority), 242},
    {sipName_RemoveFragment, static_cast<int>( ::QUrl::RemoveFragment), 242},
    {sipName_RemovePassword, static_cast<int>( ::QUrl::RemovePassword), 242},
    {sipName_RemovePath, static_cast<int>( ::QUrl::RemovePath), 242},
    {sipName_RemovePort, static_cast<int>( ::QUrl::RemovePort), 242},
    {sipName_RemoveQuery, static_cast<int>( ::QUrl::RemoveQuery), 242},
    {sipName_RemoveScheme, static_cast<int>( ::QUrl::RemoveScheme), 242},
    {sipName_RemoveUserInfo, static_cast<int>( ::QUrl::RemoveUserInfo), 242},
    {sipName_StrictMode, static_cast<int>( ::QUrl::StrictMode), 241},
    {sipName_StripTrailingSlash, static_cast<int>( ::QUrl::StripTrailingSlash), 242},
    {sipName_TolerantMode, static_cast<int>( ::QUrl::TolerantMode), 241},
};

PyDoc_STRVAR(doc_QUrl, "\1QUrl()\n"
"QUrl(str, mode: QUrl.ParsingMode = QUrl.TolerantMode)\n"
"QUrl(QUrl)");


static pyqt4ClassPluginDef plugin_QUrl = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QUrl = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_CLASS,
        sipNameNr_QUrl,
        {SIP_NULLPTR},
        &plugin_QUrl
    },
    {
        sipNameNr_QUrl,
        {0, 0, 1},
        78, methods_QUrl,
        22, enummembers_QUrl,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QUrl,
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QUrl,
    init_type_QUrl,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QUrl,
    assign_QUrl,
    array_QUrl,
    copy_QUrl,
    release_QUrl,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

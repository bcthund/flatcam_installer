/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.21
 *
 * Copyright (c) 2018 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt4.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 26 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 29 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/QtCore/sipQtCoreQVariant_4.cpp"

#line 265 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 33 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/QtCore/sipQtCoreQVariant_4.cpp"
#line 26 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 36 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/QtCore/sipQtCoreQVariant_4.cpp"
#line 28 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/sip/QtCore/quuid.sip"
#include <quuid.h>
#line 39 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/QtCore/sipQtCoreQVariant_4.cpp"
#line 28 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/sip/QtCore/qeasingcurve.sip"
#include <qeasingcurve.h>
#line 42 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/QtCore/sipQtCoreQVariant_4.cpp"
#line 26 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/sip/QtCore/qdatastream.sip"
#include <qdatastream.h>
#line 45 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/QtCore/sipQtCoreQVariant_4.cpp"
#line 26 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 48 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/QtCore/sipQtCoreQVariant_4.cpp"
#line 26 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 51 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/QtCore/sipQtCoreQVariant_4.cpp"
#line 98 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/sip/QtCore/qurl.sip"
#include <qurl.h>
#line 54 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/QtCore/sipQtCoreQVariant_4.cpp"
#line 159 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/sip/QtCore/qrect.sip"
#include <qrect.h>
#line 57 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/QtCore/sipQtCoreQVariant_4.cpp"
#line 26 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/sip/QtCore/qrect.sip"
#include <qrect.h>
#line 60 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/QtCore/sipQtCoreQVariant_4.cpp"
#line 104 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/sip/QtCore/qline.sip"
#include <qline.h>
#line 63 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/QtCore/sipQtCoreQVariant_4.cpp"
#line 26 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/sip/QtCore/qline.sip"
#include <qline.h>
#line 66 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/QtCore/sipQtCoreQVariant_4.cpp"
#line 103 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/sip/QtCore/qsize.sip"
#include <qsize.h>
#line 69 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/QtCore/sipQtCoreQVariant_4.cpp"
#line 26 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/sip/QtCore/qsize.sip"
#include <qsize.h>
#line 72 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/QtCore/sipQtCoreQVariant_4.cpp"
#line 110 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 75 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/QtCore/sipQtCoreQVariant_4.cpp"
#line 26 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 78 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/QtCore/sipQtCoreQVariant_4.cpp"
#line 28 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/sip/QtCore/qhash.sip"
#include <qhash.h>
#line 81 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/QtCore/sipQtCoreQVariant_4.cpp"
#line 68 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 84 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/QtCore/sipQtCoreQVariant_4.cpp"
#line 27 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 87 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/QtCore/sipQtCoreQVariant_4.cpp"
#line 28 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/sip/QtCore/qmap.sip"
#include <qmap.h>
#line 90 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/QtCore/sipQtCoreQVariant_4.cpp"
#line 28 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 93 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/QtCore/sipQtCoreQVariant_4.cpp"
#line 397 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/sip/QtCore/qdatetime.sip"
#include <qdatetime.h>
#line 96 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/QtCore/sipQtCoreQVariant_4.cpp"
#line 241 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/sip/QtCore/qdatetime.sip"
#include <qdatetime.h>
#line 99 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/QtCore/sipQtCoreQVariant_4.cpp"
#line 26 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/sip/QtCore/qdatetime.sip"
#include <qdatetime.h>
#line 102 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/QtCore/sipQtCoreQVariant_4.cpp"
#line 63 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/sip/QtCore/qchar.sip"
#include <qchar.h>
#line 105 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/QtCore/sipQtCoreQVariant_4.cpp"
#line 27 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 108 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/QtCore/sipQtCoreQVariant_4.cpp"
#line 26 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/sip/QtCore/qbitarray.sip"
#include <qbitarray.h>
#line 111 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/QtCore/sipQtCoreQVariant_4.cpp"
#line 32 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 114 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/QtCore/sipQtCoreQVariant_4.cpp"


extern "C" {static PyObject *meth_QVariant_4_fromList(PyObject *, PyObject *);}
static PyObject *meth_QVariant_4_fromList(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const QList< ::QVariant>* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QList_0100QVariant,&a0, &a0State))
        {
             ::QVariant*sipRes = 0;

#line 161 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/sip/QtCore/qvariant.sip"
        // We don't implement this as a Python ctor to allow an empty Python list to be
        // handled as a Python object.
        sipRes = new QVariant(*a0);
#line 134 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/QtCore/sipQtCoreQVariant_4.cpp"
            sipReleaseType(const_cast<QList< ::QVariant> *>(a0),sipType_QList_0100QVariant,a0State);

            return sipConvertFromNewType(sipRes,sipType_QVariant,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariant, sipName_fromList, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_QVariant_4_fromMap(PyObject *, PyObject *);}
static PyObject *meth_QVariant_4_fromMap(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const QMap< ::QString, ::QVariant>* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QMap_0100QString_0100QVariant,&a0, &a0State))
        {
             ::QVariant*sipRes = 0;

#line 168 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/sip/QtCore/qvariant.sip"
        // We don't implement this as a Python ctor to allow an empty Python dictionary
        // to be handled as a Python object.
        sipRes = new QVariant(*a0);
#line 165 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/QtCore/sipQtCoreQVariant_4.cpp"
            sipReleaseType(const_cast<QMap< ::QString, ::QVariant> *>(a0),sipType_QMap_0100QString_0100QVariant,a0State);

            return sipConvertFromNewType(sipRes,sipType_QVariant,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariant, sipName_fromMap, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_QVariant_4_type(PyObject *, PyObject *);}
static PyObject *meth_QVariant_4_type(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVariant *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVariant, &sipCpp))
        {
             ::QVariant::Type sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->type();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QVariant_Type);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariant, sipName_type, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_QVariant_4_userType(PyObject *, PyObject *);}
static PyObject *meth_QVariant_4_userType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVariant *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVariant, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->userType();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariant, sipName_userType, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_QVariant_4_typeName(PyObject *, PyObject *);}
static PyObject *meth_QVariant_4_typeName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVariant *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVariant, &sipCpp))
        {
            const char*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->typeName();
            Py_END_ALLOW_THREADS

            if (sipRes == SIP_NULLPTR)
            {
                Py_INCREF(Py_None);
                return Py_None;
            }

            return PyUnicode_DecodeASCII(sipRes, strlen(sipRes), SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariant, sipName_typeName, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_QVariant_4_canConvert(PyObject *, PyObject *);}
static PyObject *meth_QVariant_4_canConvert(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QVariant *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QVariant, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->canConvert(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariant, sipName_canConvert, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_QVariant_4_convert(PyObject *, PyObject *);}
static PyObject *meth_QVariant_4_convert(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QVariant *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QVariant, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->convert(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariant, sipName_convert, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_QVariant_4_isValid(PyObject *, PyObject *);}
static PyObject *meth_QVariant_4_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVariant *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVariant, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isValid();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariant, sipName_isValid, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_QVariant_4_isNull(PyObject *, PyObject *);}
static PyObject *meth_QVariant_4_isNull(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVariant *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVariant, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isNull();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariant, sipName_isNull, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_QVariant_4_clear(PyObject *, PyObject *);}
static PyObject *meth_QVariant_4_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QVariant *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVariant, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->clear();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariant, sipName_clear, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_QVariant_4_detach(PyObject *, PyObject *);}
static PyObject *meth_QVariant_4_detach(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QVariant *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVariant, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->detach();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariant, sipName_detach, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_QVariant_4_isDetached(PyObject *, PyObject *);}
static PyObject *meth_QVariant_4_isDetached(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVariant *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVariant, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isDetached();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariant, sipName_isDetached, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_QVariant_4_toInt(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QVariant_4_toInt(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
        const  ::QVariant *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "B", &sipSelf, sipType_QVariant, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->toInt(&a0);
            Py_END_ALLOW_THREADS

            return sipBuildResult(0,"(ib)",sipRes,a0);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariant, sipName_toInt, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_QVariant_4_toUInt(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QVariant_4_toUInt(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
        const  ::QVariant *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "B", &sipSelf, sipType_QVariant, &sipCpp))
        {
             ::uint sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->toUInt(&a0);
            Py_END_ALLOW_THREADS

            return sipBuildResult(0,"(ub)",sipRes,a0);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariant, sipName_toUInt, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_QVariant_4_toLongLong(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QVariant_4_toLongLong(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
        const  ::QVariant *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "B", &sipSelf, sipType_QVariant, &sipCpp))
        {
             ::qlonglong sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->toLongLong(&a0);
            Py_END_ALLOW_THREADS

            return sipBuildResult(0,"(nb)",sipRes,a0);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariant, sipName_toLongLong, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_QVariant_4_toULongLong(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QVariant_4_toULongLong(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
        const  ::QVariant *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "B", &sipSelf, sipType_QVariant, &sipCpp))
        {
             ::qulonglong sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->toULongLong(&a0);
            Py_END_ALLOW_THREADS

            return sipBuildResult(0,"(ob)",sipRes,a0);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariant, sipName_toULongLong, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_QVariant_4_toBool(PyObject *, PyObject *);}
static PyObject *meth_QVariant_4_toBool(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVariant *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVariant, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->toBool();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariant, sipName_toBool, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_QVariant_4_toDouble(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QVariant_4_toDouble(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
        const  ::QVariant *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "B", &sipSelf, sipType_QVariant, &sipCpp))
        {
            double sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->toDouble(&a0);
            Py_END_ALLOW_THREADS

            return sipBuildResult(0,"(db)",sipRes,a0);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariant, sipName_toDouble, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_QVariant_4_toByteArray(PyObject *, PyObject *);}
static PyObject *meth_QVariant_4_toByteArray(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVariant *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVariant, &sipCpp))
        {
             ::QByteArray*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QByteArray(sipCpp->toByteArray());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariant, sipName_toByteArray, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_QVariant_4_toBitArray(PyObject *, PyObject *);}
static PyObject *meth_QVariant_4_toBitArray(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVariant *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVariant, &sipCpp))
        {
             ::QBitArray*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QBitArray(sipCpp->toBitArray());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QBitArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariant, sipName_toBitArray, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_QVariant_4_toString(PyObject *, PyObject *);}
static PyObject *meth_QVariant_4_toString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVariant *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVariant, &sipCpp))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->toString());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariant, sipName_toString, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_QVariant_4_toStringList(PyObject *, PyObject *);}
static PyObject *meth_QVariant_4_toStringList(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVariant *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVariant, &sipCpp))
        {
             ::QStringList*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QStringList(sipCpp->toStringList());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QStringList,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariant, sipName_toStringList, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_QVariant_4_toChar(PyObject *, PyObject *);}
static PyObject *meth_QVariant_4_toChar(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVariant *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVariant, &sipCpp))
        {
             ::QChar*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QChar(sipCpp->toChar());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QChar,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariant, sipName_toChar, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_QVariant_4_toDate(PyObject *, PyObject *);}
static PyObject *meth_QVariant_4_toDate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVariant *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVariant, &sipCpp))
        {
             ::QDate*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QDate(sipCpp->toDate());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QDate,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariant, sipName_toDate, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_QVariant_4_toTime(PyObject *, PyObject *);}
static PyObject *meth_QVariant_4_toTime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVariant *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVariant, &sipCpp))
        {
             ::QTime*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QTime(sipCpp->toTime());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QTime,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariant, sipName_toTime, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_QVariant_4_toDateTime(PyObject *, PyObject *);}
static PyObject *meth_QVariant_4_toDateTime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVariant *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVariant, &sipCpp))
        {
             ::QDateTime*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QDateTime(sipCpp->toDateTime());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QDateTime,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariant, sipName_toDateTime, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_QVariant_4_toList(PyObject *, PyObject *);}
static PyObject *meth_QVariant_4_toList(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVariant *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVariant, &sipCpp))
        {
            QList< ::QVariant>*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList< ::QVariant>(sipCpp->toList());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0100QVariant,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariant, sipName_toList, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_QVariant_4_toMap(PyObject *, PyObject *);}
static PyObject *meth_QVariant_4_toMap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVariant *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVariant, &sipCpp))
        {
            QMap< ::QString, ::QVariant>*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QMap< ::QString, ::QVariant>(sipCpp->toMap());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QMap_0100QString_0100QVariant,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariant, sipName_toMap, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_QVariant_4_toHash(PyObject *, PyObject *);}
static PyObject *meth_QVariant_4_toHash(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVariant *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVariant, &sipCpp))
        {
            QHash< ::QString, ::QVariant>*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QHash< ::QString, ::QVariant>(sipCpp->toHash());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QHash_0100QString_0100QVariant,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariant, sipName_toHash, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_QVariant_4_toPoint(PyObject *, PyObject *);}
static PyObject *meth_QVariant_4_toPoint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVariant *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVariant, &sipCpp))
        {
             ::QPoint*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QPoint(sipCpp->toPoint());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPoint,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariant, sipName_toPoint, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_QVariant_4_toPointF(PyObject *, PyObject *);}
static PyObject *meth_QVariant_4_toPointF(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVariant *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVariant, &sipCpp))
        {
             ::QPointF*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QPointF(sipCpp->toPointF());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPointF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariant, sipName_toPointF, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_QVariant_4_toSize(PyObject *, PyObject *);}
static PyObject *meth_QVariant_4_toSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVariant *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVariant, &sipCpp))
        {
             ::QSize*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QSize(sipCpp->toSize());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSize,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariant, sipName_toSize, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_QVariant_4_toSizeF(PyObject *, PyObject *);}
static PyObject *meth_QVariant_4_toSizeF(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVariant *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVariant, &sipCpp))
        {
             ::QSizeF*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QSizeF(sipCpp->toSizeF());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSizeF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariant, sipName_toSizeF, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_QVariant_4_toLine(PyObject *, PyObject *);}
static PyObject *meth_QVariant_4_toLine(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVariant *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVariant, &sipCpp))
        {
             ::QLine*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QLine(sipCpp->toLine());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QLine,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariant, sipName_toLine, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_QVariant_4_toLineF(PyObject *, PyObject *);}
static PyObject *meth_QVariant_4_toLineF(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVariant *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVariant, &sipCpp))
        {
             ::QLineF*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QLineF(sipCpp->toLineF());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QLineF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariant, sipName_toLineF, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_QVariant_4_toRect(PyObject *, PyObject *);}
static PyObject *meth_QVariant_4_toRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVariant *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVariant, &sipCpp))
        {
             ::QRect*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QRect(sipCpp->toRect());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRect,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariant, sipName_toRect, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_QVariant_4_toRectF(PyObject *, PyObject *);}
static PyObject *meth_QVariant_4_toRectF(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVariant *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVariant, &sipCpp))
        {
             ::QRectF*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QRectF(sipCpp->toRectF());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRectF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariant, sipName_toRectF, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_QVariant_4_toUrl(PyObject *, PyObject *);}
static PyObject *meth_QVariant_4_toUrl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVariant *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVariant, &sipCpp))
        {
             ::QUrl*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QUrl(sipCpp->toUrl());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QUrl,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariant, sipName_toUrl, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_QVariant_4_toLocale(PyObject *, PyObject *);}
static PyObject *meth_QVariant_4_toLocale(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVariant *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVariant, &sipCpp))
        {
             ::QLocale*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QLocale(sipCpp->toLocale());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QLocale,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariant, sipName_toLocale, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_QVariant_4_toRegExp(PyObject *, PyObject *);}
static PyObject *meth_QVariant_4_toRegExp(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVariant *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVariant, &sipCpp))
        {
             ::QRegExp*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QRegExp(sipCpp->toRegExp());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRegExp,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariant, sipName_toRegExp, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_QVariant_4_toPyObject(PyObject *, PyObject *);}
static PyObject *meth_QVariant_4_toPyObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVariant *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVariant, &sipCpp))
        {
            PyObject * sipRes = SIP_NULLPTR;

#line 225 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/sip/QtCore/qvariant.sip"
        sipRes = qpycore_PyObject_FromQVariant(*sipCpp);
#line 1230 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/QtCore/sipQtCoreQVariant_4.cpp"

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariant, sipName_toPyObject, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_QVariant_4_load(PyObject *, PyObject *);}
static PyObject *meth_QVariant_4_load(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDataStream* a0;
         ::QVariant *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QVariant, &sipCpp, sipType_QDataStream, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->load(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariant, sipName_load, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_QVariant_4_save(PyObject *, PyObject *);}
static PyObject *meth_QVariant_4_save(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDataStream* a0;
        const  ::QVariant *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QVariant, &sipCpp, sipType_QDataStream, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->save(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariant, sipName_save, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_QVariant_4_typeToName(PyObject *, PyObject *);}
static PyObject *meth_QVariant_4_typeToName(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "i", &a0))
        {
            const char*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes =  ::QVariant::typeToName(a0);
            Py_END_ALLOW_THREADS

            if (sipRes == SIP_NULLPTR)
            {
                Py_INCREF(Py_None);
                return Py_None;
            }

            return PyUnicode_DecodeASCII(sipRes, strlen(sipRes), SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariant, sipName_typeToName, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_QVariant_4_nameToType(PyObject *, PyObject *);}
static PyObject *meth_QVariant_4_nameToType(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const char* a0;
        PyObject *a0Keep;

        if (sipParseArgs(&sipParseErr, sipArgs, "AA", &a0Keep, &a0))
        {
             ::QVariant::Type sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes =  ::QVariant::nameToType(a0);
            Py_END_ALLOW_THREADS
            Py_DECREF(a0Keep);

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QVariant_Type);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariant, sipName_nameToType, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_QVariant_4_data(PyObject *, PyObject *);}
static PyObject *meth_QVariant_4_data(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QVariant *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVariant, &sipCpp))
        {
            void*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->data();
            Py_END_ALLOW_THREADS

            return sipConvertFromVoidPtr(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariant, sipName_data, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_QVariant_4_toFloat(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QVariant_4_toFloat(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
        const  ::QVariant *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "B", &sipSelf, sipType_QVariant, &sipCpp))
        {
            float sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->toFloat(&a0);
            Py_END_ALLOW_THREADS

            return sipBuildResult(0,"(fb)",sipRes,a0);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariant, sipName_toFloat, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_QVariant_4_toReal(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QVariant_4_toReal(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
        const  ::QVariant *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "B", &sipSelf, sipType_QVariant, &sipCpp))
        {
             ::qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->toReal(&a0);
            Py_END_ALLOW_THREADS

            return sipBuildResult(0,"(db)",sipRes,a0);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariant, sipName_toReal, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_QVariant_4_toEasingCurve(PyObject *, PyObject *);}
static PyObject *meth_QVariant_4_toEasingCurve(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVariant *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVariant, &sipCpp))
        {
             ::QEasingCurve*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QEasingCurve(sipCpp->toEasingCurve());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QEasingCurve,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariant, sipName_toEasingCurve, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_QVariant_4_swap(PyObject *, PyObject *);}
static PyObject *meth_QVariant_4_swap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QVariant* a0;
        int a0State = 0;
         ::QVariant *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QVariant, &sipCpp, sipType_QVariant,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->swap(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QVariant,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariant, sipName_swap, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_QVariant_4_toUuid(PyObject *, PyObject *);}
static PyObject *meth_QVariant_4_toUuid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVariant *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVariant, &sipCpp))
        {
             ::QUuid*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QUuid(sipCpp->toUuid());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QUuid,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariant, sipName_toUuid, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_QVariant_4_toModelIndex(PyObject *, PyObject *);}
static PyObject *meth_QVariant_4_toModelIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVariant *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVariant, &sipCpp))
        {
             ::QModelIndex*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QModelIndex(sipCpp->toModelIndex());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariant, sipName_toModelIndex, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QVariant_4___ne__(PyObject *,PyObject *);}
static PyObject *slot_QVariant_4___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QVariant *sipCpp = reinterpret_cast< ::QVariant *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QVariant));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVariant* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QVariant,&a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp-> ::QVariant::operator!=(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QVariant *>(a0),sipType_QVariant,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, ne_slot, sipType_QVariant, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QVariant_4___eq__(PyObject *,PyObject *);}
static PyObject *slot_QVariant_4___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QVariant *sipCpp = reinterpret_cast< ::QVariant *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QVariant));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVariant* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QVariant,&a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp-> ::QVariant::operator==(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QVariant *>(a0),sipType_QVariant,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, eq_slot, sipType_QVariant, sipSelf, sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QVariant_4(void *, int);}
static void release_QVariant_4(void *sipCppV, int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast< ::QVariant *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void assign_QVariant_4(void *, SIP_SSIZE_T, void *);}
static void assign_QVariant_4(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QVariant *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QVariant *>(sipSrc);
}


extern "C" {static void *array_QVariant_4(SIP_SSIZE_T);}
static void *array_QVariant_4(SIP_SSIZE_T sipNrElem)
{
    return new  ::QVariant[sipNrElem];
}


extern "C" {static void *copy_QVariant_4(const void *, SIP_SSIZE_T);}
static void *copy_QVariant_4(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QVariant(reinterpret_cast<const  ::QVariant *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QVariant_4(sipSimpleWrapper *);}
static void dealloc_QVariant_4(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QVariant_4(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QVariant_4(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QVariant_4(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QVariant *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new  ::QVariant();
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
         ::QVariant::Type a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "XE", sipType_QVariant_Type, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new  ::QVariant(a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        int a0;
        const void* a1;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "iv", &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new  ::QVariant(a0,a1);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        const  ::QVariant* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QVariant,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new  ::QVariant(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QVariant *>(a0),sipType_QVariant,a0State);

            return sipCpp;
        }
    }

    {
        PyObject * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "P0", &a0))
        {
#line 149 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/sip/QtCore/qvariant.sip"
        int is_err = 0;
        QVariant var = qpycore_PyObject_AsQVariant(a0, &is_err);
        
        if (is_err)
            sipCpp = 0;
        else
            sipCpp = new QVariant(var);
#line 1738 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/QtCore/sipQtCoreQVariant_4.cpp"

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static int convertTo_QVariant_4(PyObject *, void **, int *, PyObject *);}
static int convertTo_QVariant_4(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::QVariant **sipCppPtr = reinterpret_cast< ::QVariant **>(sipCppPtrV);

#line 30 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/sip/QtCore/qvariant.sip"
if (sipIsErr == NULL)
    // We can convert everything to a QVariant.
    return 1;

// If it is already a QVariant then just return it.
if (Py_TYPE(sipPy) == sipTypeAsPyTypeObject(sipType_QVariant))
{
    *sipCppPtr = reinterpret_cast<QVariant *>(sipConvertToType(sipPy,
            sipType_QVariant, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

    return 0;
}

// Convert it to a QVariant.
QVariant var = qpycore_PyObject_AsQVariant(sipPy, sipIsErr);

if (*sipIsErr)
    return 0;

*sipCppPtr = new QVariant(var);

return sipGetState(sipTransferObj);
#line 1776 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/QtCore/sipQtCoreQVariant_4.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QVariant_4[] = {
    {(void *)slot_QVariant_4___ne__, ne_slot},
    {(void *)slot_QVariant_4___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QVariant_4[] = {
    {SIP_MLNAME_CAST(sipName_canConvert), meth_QVariant_4_canConvert, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_clear), meth_QVariant_4_clear, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_convert), meth_QVariant_4_convert, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_data), meth_QVariant_4_data, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_detach), meth_QVariant_4_detach, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_fromList), meth_QVariant_4_fromList, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_fromMap), meth_QVariant_4_fromMap, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_isDetached), meth_QVariant_4_isDetached, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_isNull), meth_QVariant_4_isNull, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QVariant_4_isValid, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_load), meth_QVariant_4_load, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_nameToType), meth_QVariant_4_nameToType, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_save), meth_QVariant_4_save, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_swap), meth_QVariant_4_swap, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_toBitArray), meth_QVariant_4_toBitArray, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_toBool), meth_QVariant_4_toBool, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_toByteArray), meth_QVariant_4_toByteArray, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_toChar), meth_QVariant_4_toChar, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_toDate), meth_QVariant_4_toDate, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_toDateTime), meth_QVariant_4_toDateTime, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_toDouble), SIP_MLMETH_CAST(meth_QVariant_4_toDouble), METH_VARARGS|METH_KEYWORDS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_toEasingCurve), meth_QVariant_4_toEasingCurve, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_toFloat), SIP_MLMETH_CAST(meth_QVariant_4_toFloat), METH_VARARGS|METH_KEYWORDS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_toHash), meth_QVariant_4_toHash, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_toInt), SIP_MLMETH_CAST(meth_QVariant_4_toInt), METH_VARARGS|METH_KEYWORDS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_toLine), meth_QVariant_4_toLine, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_toLineF), meth_QVariant_4_toLineF, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_toList), meth_QVariant_4_toList, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_toLocale), meth_QVariant_4_toLocale, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_toLongLong), SIP_MLMETH_CAST(meth_QVariant_4_toLongLong), METH_VARARGS|METH_KEYWORDS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_toMap), meth_QVariant_4_toMap, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_toModelIndex), meth_QVariant_4_toModelIndex, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_toPoint), meth_QVariant_4_toPoint, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_toPointF), meth_QVariant_4_toPointF, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_toPyObject), meth_QVariant_4_toPyObject, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_toReal), SIP_MLMETH_CAST(meth_QVariant_4_toReal), METH_VARARGS|METH_KEYWORDS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_toRect), meth_QVariant_4_toRect, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_toRectF), meth_QVariant_4_toRectF, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_toRegExp), meth_QVariant_4_toRegExp, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_toSize), meth_QVariant_4_toSize, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_toSizeF), meth_QVariant_4_toSizeF, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_toString), meth_QVariant_4_toString, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_toStringList), meth_QVariant_4_toStringList, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_toTime), meth_QVariant_4_toTime, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_toUInt), SIP_MLMETH_CAST(meth_QVariant_4_toUInt), METH_VARARGS|METH_KEYWORDS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_toULongLong), SIP_MLMETH_CAST(meth_QVariant_4_toULongLong), METH_VARARGS|METH_KEYWORDS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_toUrl), meth_QVariant_4_toUrl, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_toUuid), meth_QVariant_4_toUuid, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_type), meth_QVariant_4_type, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_typeName), meth_QVariant_4_typeName, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_typeToName), meth_QVariant_4_typeToName, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_userType), meth_QVariant_4_userType, METH_VARARGS, SIP_NULLPTR}
};

static sipEnumMemberDef enummembers_QVariant_4[] = {
    {sipName_BitArray, static_cast<int>( ::QVariant::BitArray), 248},
    {sipName_Bitmap, static_cast<int>( ::QVariant::Bitmap), 248},
    {sipName_Bool, static_cast<int>( ::QVariant::Bool), 248},
    {sipName_Brush, static_cast<int>( ::QVariant::Brush), 248},
    {sipName_ByteArray, static_cast<int>( ::QVariant::ByteArray), 248},
    {sipName_Char, static_cast<int>( ::QVariant::Char), 248},
    {sipName_Color, static_cast<int>( ::QVariant::Color), 248},
    {sipName_Cursor, static_cast<int>( ::QVariant::Cursor), 248},
    {sipName_Date, static_cast<int>( ::QVariant::Date), 248},
    {sipName_DateTime, static_cast<int>( ::QVariant::DateTime), 248},
    {sipName_Double, static_cast<int>( ::QVariant::Double), 248},
    {sipName_EasingCurve, static_cast<int>( ::QVariant::EasingCurve), 248},
    {sipName_Font, static_cast<int>( ::QVariant::Font), 248},
    {sipName_Hash, static_cast<int>( ::QVariant::Hash), 248},
    {sipName_Icon, static_cast<int>( ::QVariant::Icon), 248},
    {sipName_Image, static_cast<int>( ::QVariant::Image), 248},
    {sipName_Int, static_cast<int>( ::QVariant::Int), 248},
    {sipName_Invalid, static_cast<int>( ::QVariant::Invalid), 248},
    {sipName_KeySequence, static_cast<int>( ::QVariant::KeySequence), 248},
    {sipName_Line, static_cast<int>( ::QVariant::Line), 248},
    {sipName_LineF, static_cast<int>( ::QVariant::LineF), 248},
    {sipName_List, static_cast<int>( ::QVariant::List), 248},
    {sipName_Locale, static_cast<int>( ::QVariant::Locale), 248},
    {sipName_LongLong, static_cast<int>( ::QVariant::LongLong), 248},
    {sipName_Map, static_cast<int>( ::QVariant::Map), 248},
    {sipName_Matrix, static_cast<int>( ::QVariant::Matrix), 248},
    {sipName_Matrix4x4, static_cast<int>( ::QVariant::Matrix4x4), 248},
    {sipName_ModelIndex, static_cast<int>( ::QVariant::ModelIndex), 248},
    {sipName_Palette, static_cast<int>( ::QVariant::Palette), 248},
    {sipName_Pen, static_cast<int>( ::QVariant::Pen), 248},
    {sipName_Pixmap, static_cast<int>( ::QVariant::Pixmap), 248},
    {sipName_Point, static_cast<int>( ::QVariant::Point), 248},
    {sipName_PointF, static_cast<int>( ::QVariant::PointF), 248},
    {sipName_Polygon, static_cast<int>( ::QVariant::Polygon), 248},
    {sipName_PolygonF, static_cast<int>( ::QVariant::PolygonF), 248},
    {sipName_Quaternion, static_cast<int>( ::QVariant::Quaternion), 248},
    {sipName_Rect, static_cast<int>( ::QVariant::Rect), 248},
    {sipName_RectF, static_cast<int>( ::QVariant::RectF), 248},
    {sipName_RegExp, static_cast<int>( ::QVariant::RegExp), 248},
    {sipName_Region, static_cast<int>( ::QVariant::Region), 248},
    {sipName_RegularExpression, static_cast<int>( ::QVariant::RegularExpression), 248},
    {sipName_Size, static_cast<int>( ::QVariant::Size), 248},
    {sipName_SizeF, static_cast<int>( ::QVariant::SizeF), 248},
    {sipName_SizePolicy, static_cast<int>( ::QVariant::SizePolicy), 248},
    {sipName_String, static_cast<int>( ::QVariant::String), 248},
    {sipName_StringList, static_cast<int>( ::QVariant::StringList), 248},
    {sipName_TextFormat, static_cast<int>( ::QVariant::TextFormat), 248},
    {sipName_TextLength, static_cast<int>( ::QVariant::TextLength), 248},
    {sipName_Time, static_cast<int>( ::QVariant::Time), 248},
    {sipName_Transform, static_cast<int>( ::QVariant::Transform), 248},
    {sipName_UInt, static_cast<int>( ::QVariant::UInt), 248},
    {sipName_ULongLong, static_cast<int>( ::QVariant::ULongLong), 248},
    {sipName_Url, static_cast<int>( ::QVariant::Url), 248},
    {sipName_UserType, static_cast<int>( ::QVariant::UserType), 248},
    {sipName_Uuid, static_cast<int>( ::QVariant::Uuid), 248},
    {sipName_Vector2D, static_cast<int>( ::QVariant::Vector2D), 248},
    {sipName_Vector3D, static_cast<int>( ::QVariant::Vector3D), 248},
    {sipName_Vector4D, static_cast<int>( ::QVariant::Vector4D), 248},
};


static pyqt4ClassPluginDef plugin_QVariant_4 = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QVariant_4 = {
    {
        4,
        &sipTypeDef_QtCore_QVariant_5.mtd_base,
        SIP_NULLPTR,
        SIP_TYPE_ALLOW_NONE|SIP_TYPE_CLASS,
        sipNameNr_QVariant,
        {SIP_NULLPTR},
        &plugin_QVariant_4
    },
    {
        sipNameNr_QVariant,
        {0, 0, 1},
        52, methods_QVariant_4,
        58, enummembers_QVariant_4,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    SIP_NULLPTR,
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QVariant_4,
    init_type_QVariant_4,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QVariant_4,
    assign_QVariant_4,
    array_QVariant_4,
    copy_QVariant_4,
    release_QVariant_4,
    SIP_NULLPTR,
    convertTo_QVariant_4,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.21
 *
 * Copyright (c) 2018 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt4.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 803 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 29 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/QtCore/sipQtCoreQStringRef_0.cpp"

#line 27 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 33 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/QtCore/sipQtCoreQStringRef_0.cpp"
#line 785 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 36 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/QtCore/sipQtCoreQStringRef_0.cpp"
#line 698 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 39 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/QtCore/sipQtCoreQStringRef_0.cpp"
#line 26 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 42 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/QtCore/sipQtCoreQStringRef_0.cpp"
#line 150 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/sip/QtCore/qvector.sip"
#include <qvector.h>
#line 45 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/QtCore/sipQtCoreQStringRef_0.cpp"
#line 32 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 48 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/QtCore/sipQtCoreQStringRef_0.cpp"
#line 63 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/sip/QtCore/qchar.sip"
#include <qchar.h>
#line 51 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/QtCore/sipQtCoreQStringRef_0.cpp"


extern "C" {static PyObject *meth_QStringRef_0_string(PyObject *, PyObject *);}
static PyObject *meth_QStringRef_0_string(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStringRef *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStringRef, &sipCpp))
        {
            const  ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->string();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(const_cast< ::QString *>(sipRes),sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStringRef, sipName_string, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_QStringRef_0_position(PyObject *, PyObject *);}
static PyObject *meth_QStringRef_0_position(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStringRef *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStringRef, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->position();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStringRef, sipName_position, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_QStringRef_0_size(PyObject *, PyObject *);}
static PyObject *meth_QStringRef_0_size(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStringRef *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStringRef, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->size();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStringRef, sipName_size, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_QStringRef_0_count(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QStringRef_0_count(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStringRef *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "B", &sipSelf, sipType_QStringRef, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->count();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
         ::Qt::CaseSensitivity a1 = Qt::CaseSensitive;
        const  ::QStringRef *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_cs,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|E", &sipSelf, sipType_QStringRef, &sipCpp, sipType_QString,&a0, &a0State, sipType_Qt_CaseSensitivity, &a1))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->count(*a0,a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        const  ::QStringRef* a0;
        int a0State = 0;
         ::Qt::CaseSensitivity a1 = Qt::CaseSensitive;
        const  ::QStringRef *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_cs,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|E", &sipSelf, sipType_QStringRef, &sipCpp, sipType_QStringRef,&a0, &a0State, sipType_Qt_CaseSensitivity, &a1))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->count(*a0,a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QStringRef *>(a0),sipType_QStringRef,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStringRef, sipName_count, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_QStringRef_0_length(PyObject *, PyObject *);}
static PyObject *meth_QStringRef_0_length(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStringRef *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStringRef, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->length();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStringRef, sipName_length, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_QStringRef_0_unicode(PyObject *, PyObject *);}
static PyObject *meth_QStringRef_0_unicode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStringRef *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStringRef, &sipCpp))
        {
            const  ::QChar*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->unicode();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(const_cast< ::QChar *>(sipRes),sipType_QChar,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStringRef, sipName_unicode, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_QStringRef_0_data(PyObject *, PyObject *);}
static PyObject *meth_QStringRef_0_data(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStringRef *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStringRef, &sipCpp))
        {
            const  ::QChar*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->data();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(const_cast< ::QChar *>(sipRes),sipType_QChar,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStringRef, sipName_data, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_QStringRef_0_constData(PyObject *, PyObject *);}
static PyObject *meth_QStringRef_0_constData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStringRef *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStringRef, &sipCpp))
        {
            const  ::QChar*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->constData();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(const_cast< ::QChar *>(sipRes),sipType_QChar,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStringRef, sipName_constData, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_QStringRef_0_clear(PyObject *, PyObject *);}
static PyObject *meth_QStringRef_0_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QStringRef *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStringRef, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->clear();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStringRef, sipName_clear, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_QStringRef_0_toString(PyObject *, PyObject *);}
static PyObject *meth_QStringRef_0_toString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStringRef *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStringRef, &sipCpp))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->toString());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStringRef, sipName_toString, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_QStringRef_0_isEmpty(PyObject *, PyObject *);}
static PyObject *meth_QStringRef_0_isEmpty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStringRef *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStringRef, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isEmpty();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStringRef, sipName_isEmpty, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_QStringRef_0_isNull(PyObject *, PyObject *);}
static PyObject *meth_QStringRef_0_isNull(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStringRef *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStringRef, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isNull();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStringRef, sipName_isNull, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_QStringRef_0_appendTo(PyObject *, PyObject *);}
static PyObject *meth_QStringRef_0_appendTo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QString* a0;
        int a0State = 0;
        const  ::QStringRef *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ0", &sipSelf, sipType_QStringRef, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::QStringRef*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QStringRef(sipCpp->appendTo(a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QStringRef,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStringRef, sipName_appendTo, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_QStringRef_0_at(PyObject *, PyObject *);}
static PyObject *meth_QStringRef_0_at(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QStringRef *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QStringRef, &sipCpp, &a0))
        {
             ::QChar*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QChar(sipCpp->at(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QChar,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStringRef, sipName_at, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_QStringRef_0_compare(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QStringRef_0_compare(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::Qt::CaseSensitivity a1 = Qt::CaseSensitive;
        const  ::QStringRef *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_cs,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|E", &sipSelf, sipType_QStringRef, &sipCpp, sipType_QString,&a0, &a0State, sipType_Qt_CaseSensitivity, &a1))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->compare(*a0,a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        const  ::QStringRef* a0;
        int a0State = 0;
         ::Qt::CaseSensitivity a1 = Qt::CaseSensitive;
        const  ::QStringRef *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_cs,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|E", &sipSelf, sipType_QStringRef, &sipCpp, sipType_QStringRef,&a0, &a0State, sipType_Qt_CaseSensitivity, &a1))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->compare(*a0,a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QStringRef *>(a0),sipType_QStringRef,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    {
         ::QLatin1String* a0;
         ::Qt::CaseSensitivity a1 = Qt::CaseSensitive;
        const  ::QStringRef *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_cs,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9|E", &sipSelf, sipType_QStringRef, &sipCpp, sipType_QLatin1String, &a0, sipType_Qt_CaseSensitivity, &a1))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->compare(*a0,a1);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        const  ::QStringRef* a0;
        int a0State = 0;
        const  ::QString* a1;
        int a1State = 0;
         ::Qt::CaseSensitivity a2 = Qt::CaseSensitive;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_cs,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "J1J1|E", sipType_QStringRef,&a0, &a0State, sipType_QString,&a1, &a1State, sipType_Qt_CaseSensitivity, &a2))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes =  ::QStringRef::compare(*a0,*a1,a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QStringRef *>(a0),sipType_QStringRef,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        const  ::QStringRef* a0;
        int a0State = 0;
        const  ::QStringRef* a1;
        int a1State = 0;
         ::Qt::CaseSensitivity a2 = Qt::CaseSensitive;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_cs,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "J1J1|E", sipType_QStringRef,&a0, &a0State, sipType_QStringRef,&a1, &a1State, sipType_Qt_CaseSensitivity, &a2))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes =  ::QStringRef::compare(*a0,*a1,a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QStringRef *>(a0),sipType_QStringRef,a0State);
            sipReleaseType(const_cast< ::QStringRef *>(a1),sipType_QStringRef,a1State);

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        const  ::QStringRef* a0;
        int a0State = 0;
         ::QLatin1String* a1;
         ::Qt::CaseSensitivity a2 = Qt::CaseSensitive;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_cs,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "J1J9|E", sipType_QStringRef,&a0, &a0State, sipType_QLatin1String, &a1, sipType_Qt_CaseSensitivity, &a2))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes =  ::QStringRef::compare(*a0,*a1,a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QStringRef *>(a0),sipType_QStringRef,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStringRef, sipName_compare, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_QStringRef_0_localeAwareCompare(PyObject *, PyObject *);}
static PyObject *meth_QStringRef_0_localeAwareCompare(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QStringRef *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QStringRef, &sipCpp, sipType_QString,&a0, &a0State))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->localeAwareCompare(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        const  ::QStringRef* a0;
        int a0State = 0;
        const  ::QStringRef *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QStringRef, &sipCpp, sipType_QStringRef,&a0, &a0State))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->localeAwareCompare(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QStringRef *>(a0),sipType_QStringRef,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        const  ::QStringRef* a0;
        int a0State = 0;
        const  ::QString* a1;
        int a1State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1J1", sipType_QStringRef,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes =  ::QStringRef::localeAwareCompare(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QStringRef *>(a0),sipType_QStringRef,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        const  ::QStringRef* a0;
        int a0State = 0;
        const  ::QStringRef* a1;
        int a1State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1J1", sipType_QStringRef,&a0, &a0State, sipType_QStringRef,&a1, &a1State))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes =  ::QStringRef::localeAwareCompare(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QStringRef *>(a0),sipType_QStringRef,a0State);
            sipReleaseType(const_cast< ::QStringRef *>(a1),sipType_QStringRef,a1State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStringRef, sipName_localeAwareCompare, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_QStringRef_0_indexOf(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QStringRef_0_indexOf(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        int a1 = 0;
         ::Qt::CaseSensitivity a2 = Qt::CaseSensitive;
        const  ::QStringRef *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_from,
            sipName_cs,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|iE", &sipSelf, sipType_QStringRef, &sipCpp, sipType_QString,&a0, &a0State, &a1, sipType_Qt_CaseSensitivity, &a2))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->indexOf(*a0,a1,a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    {
         ::QLatin1String* a0;
        int a1 = 0;
         ::Qt::CaseSensitivity a2 = Qt::CaseSensitive;
        const  ::QStringRef *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_from,
            sipName_cs,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9|iE", &sipSelf, sipType_QStringRef, &sipCpp, sipType_QLatin1String, &a0, &a1, sipType_Qt_CaseSensitivity, &a2))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->indexOf(*a0,a1,a2);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        const  ::QStringRef* a0;
        int a0State = 0;
        int a1 = 0;
         ::Qt::CaseSensitivity a2 = Qt::CaseSensitive;
        const  ::QStringRef *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_from,
            sipName_cs,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|iE", &sipSelf, sipType_QStringRef, &sipCpp, sipType_QStringRef,&a0, &a0State, &a1, sipType_Qt_CaseSensitivity, &a2))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->indexOf(*a0,a1,a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QStringRef *>(a0),sipType_QStringRef,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStringRef, sipName_indexOf, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_QStringRef_0_lastIndexOf(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QStringRef_0_lastIndexOf(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        int a1 = -1;
         ::Qt::CaseSensitivity a2 = Qt::CaseSensitive;
        const  ::QStringRef *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_from,
            sipName_cs,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|iE", &sipSelf, sipType_QStringRef, &sipCpp, sipType_QString,&a0, &a0State, &a1, sipType_Qt_CaseSensitivity, &a2))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->lastIndexOf(*a0,a1,a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    {
         ::QLatin1String* a0;
        int a1 = -1;
         ::Qt::CaseSensitivity a2 = Qt::CaseSensitive;
        const  ::QStringRef *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_from,
            sipName_cs,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9|iE", &sipSelf, sipType_QStringRef, &sipCpp, sipType_QLatin1String, &a0, &a1, sipType_Qt_CaseSensitivity, &a2))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->lastIndexOf(*a0,a1,a2);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        const  ::QStringRef* a0;
        int a0State = 0;
        int a1 = -1;
         ::Qt::CaseSensitivity a2 = Qt::CaseSensitive;
        const  ::QStringRef *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_from,
            sipName_cs,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|iE", &sipSelf, sipType_QStringRef, &sipCpp, sipType_QStringRef,&a0, &a0State, &a1, sipType_Qt_CaseSensitivity, &a2))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->lastIndexOf(*a0,a1,a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QStringRef *>(a0),sipType_QStringRef,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStringRef, sipName_lastIndexOf, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_QStringRef_0_startsWith(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QStringRef_0_startsWith(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::Qt::CaseSensitivity a1 = Qt::CaseSensitive;
        const  ::QStringRef *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_cs,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|E", &sipSelf, sipType_QStringRef, &sipCpp, sipType_QString,&a0, &a0State, sipType_Qt_CaseSensitivity, &a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->startsWith(*a0,a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
         ::QLatin1String* a0;
         ::Qt::CaseSensitivity a1 = Qt::CaseSensitive;
        const  ::QStringRef *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_cs,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9|E", &sipSelf, sipType_QStringRef, &sipCpp, sipType_QLatin1String, &a0, sipType_Qt_CaseSensitivity, &a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->startsWith(*a0,a1);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const  ::QStringRef* a0;
        int a0State = 0;
         ::Qt::CaseSensitivity a1 = Qt::CaseSensitive;
        const  ::QStringRef *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_cs,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|E", &sipSelf, sipType_QStringRef, &sipCpp, sipType_QStringRef,&a0, &a0State, sipType_Qt_CaseSensitivity, &a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->startsWith(*a0,a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QStringRef *>(a0),sipType_QStringRef,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStringRef, sipName_startsWith, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_QStringRef_0_endsWith(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QStringRef_0_endsWith(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::Qt::CaseSensitivity a1 = Qt::CaseSensitive;
        const  ::QStringRef *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_cs,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|E", &sipSelf, sipType_QStringRef, &sipCpp, sipType_QString,&a0, &a0State, sipType_Qt_CaseSensitivity, &a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->endsWith(*a0,a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
         ::QLatin1String* a0;
         ::Qt::CaseSensitivity a1 = Qt::CaseSensitive;
        const  ::QStringRef *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_cs,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9|E", &sipSelf, sipType_QStringRef, &sipCpp, sipType_QLatin1String, &a0, sipType_Qt_CaseSensitivity, &a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->endsWith(*a0,a1);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const  ::QStringRef* a0;
        int a0State = 0;
         ::Qt::CaseSensitivity a1 = Qt::CaseSensitive;
        const  ::QStringRef *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_cs,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|E", &sipSelf, sipType_QStringRef, &sipCpp, sipType_QStringRef,&a0, &a0State, sipType_Qt_CaseSensitivity, &a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->endsWith(*a0,a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QStringRef *>(a0),sipType_QStringRef,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStringRef, sipName_endsWith, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_QStringRef_0_toAscii(PyObject *, PyObject *);}
static PyObject *meth_QStringRef_0_toAscii(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStringRef *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStringRef, &sipCpp))
        {
             ::QByteArray*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QByteArray(sipCpp->toAscii());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStringRef, sipName_toAscii, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_QStringRef_0_toLatin1(PyObject *, PyObject *);}
static PyObject *meth_QStringRef_0_toLatin1(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStringRef *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStringRef, &sipCpp))
        {
             ::QByteArray*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QByteArray(sipCpp->toLatin1());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStringRef, sipName_toLatin1, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_QStringRef_0_toUtf8(PyObject *, PyObject *);}
static PyObject *meth_QStringRef_0_toUtf8(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStringRef *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStringRef, &sipCpp))
        {
             ::QByteArray*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QByteArray(sipCpp->toUtf8());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStringRef, sipName_toUtf8, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_QStringRef_0_toLocal8Bit(PyObject *, PyObject *);}
static PyObject *meth_QStringRef_0_toLocal8Bit(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStringRef *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStringRef, &sipCpp))
        {
             ::QByteArray*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QByteArray(sipCpp->toLocal8Bit());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStringRef, sipName_toLocal8Bit, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_QStringRef_0_toUcs4(PyObject *, PyObject *);}
static PyObject *meth_QStringRef_0_toUcs4(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStringRef *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStringRef, &sipCpp))
        {
             ::QVector<uint>*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QVector<uint>(sipCpp->toUcs4());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QVector_1900,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStringRef, sipName_toUcs4, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_QStringRef_0_contains(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QStringRef_0_contains(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::Qt::CaseSensitivity a1 = Qt::CaseSensitive;
        const  ::QStringRef *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_cs,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|E", &sipSelf, sipType_QStringRef, &sipCpp, sipType_QString,&a0, &a0State, sipType_Qt_CaseSensitivity, &a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->contains(*a0,a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
         ::QLatin1String* a0;
         ::Qt::CaseSensitivity a1 = Qt::CaseSensitive;
        const  ::QStringRef *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_cs,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9|E", &sipSelf, sipType_QStringRef, &sipCpp, sipType_QLatin1String, &a0, sipType_Qt_CaseSensitivity, &a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->contains(*a0,a1);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const  ::QStringRef* a0;
        int a0State = 0;
         ::Qt::CaseSensitivity a1 = Qt::CaseSensitive;
        const  ::QStringRef *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_cs,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|E", &sipSelf, sipType_QStringRef, &sipCpp, sipType_QStringRef,&a0, &a0State, sipType_Qt_CaseSensitivity, &a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->contains(*a0,a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QStringRef *>(a0),sipType_QStringRef,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStringRef, sipName_contains, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QStringRef_0___eq__(PyObject *,PyObject *);}
static PyObject *slot_QStringRef_0___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QStringRef *sipCpp = reinterpret_cast< ::QStringRef *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QStringRef));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStringRef* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QStringRef,&a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = operator==((*sipCpp), *a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QStringRef *>(a0),sipType_QStringRef,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = operator==((*sipCpp), *a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
         ::QLatin1String* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QLatin1String, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = operator==((*sipCpp), *a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, eq_slot, sipType_QStringRef, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QStringRef_0___ne__(PyObject *,PyObject *);}
static PyObject *slot_QStringRef_0___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QStringRef *sipCpp = reinterpret_cast< ::QStringRef *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QStringRef));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStringRef* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QStringRef,&a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = operator!=((*sipCpp), *a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QStringRef *>(a0),sipType_QStringRef,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = operator!=((*sipCpp), *a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
         ::QLatin1String* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QLatin1String, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = operator!=((*sipCpp), *a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, ne_slot, sipType_QStringRef, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QStringRef_0___lt__(PyObject *,PyObject *);}
static PyObject *slot_QStringRef_0___lt__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QStringRef *sipCpp = reinterpret_cast< ::QStringRef *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QStringRef));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStringRef* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QStringRef,&a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = operator<((*sipCpp), *a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QStringRef *>(a0),sipType_QStringRef,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, lt_slot, sipType_QStringRef, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QStringRef_0___le__(PyObject *,PyObject *);}
static PyObject *slot_QStringRef_0___le__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QStringRef *sipCpp = reinterpret_cast< ::QStringRef *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QStringRef));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStringRef* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QStringRef,&a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = operator<=((*sipCpp), *a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QStringRef *>(a0),sipType_QStringRef,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, le_slot, sipType_QStringRef, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QStringRef_0___gt__(PyObject *,PyObject *);}
static PyObject *slot_QStringRef_0___gt__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QStringRef *sipCpp = reinterpret_cast< ::QStringRef *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QStringRef));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStringRef* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QStringRef,&a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = operator>((*sipCpp), *a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QStringRef *>(a0),sipType_QStringRef,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, gt_slot, sipType_QStringRef, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QStringRef_0___ge__(PyObject *,PyObject *);}
static PyObject *slot_QStringRef_0___ge__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QStringRef *sipCpp = reinterpret_cast< ::QStringRef *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QStringRef));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStringRef* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QStringRef,&a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = operator>=((*sipCpp), *a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QStringRef *>(a0),sipType_QStringRef,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, ge_slot, sipType_QStringRef, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QStringRef_0___str__(PyObject *);}
static PyObject *slot_QStringRef_0___str__(PyObject *sipSelf)
{
     ::QStringRef *sipCpp = reinterpret_cast< ::QStringRef *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QStringRef));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            PyObject * sipRes = SIP_NULLPTR;

#line 858 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/sip/QtCore/qstring.sip"
        sipRes = qpycore_PyObject_FromQString(sipCpp->toString());
#line 1584 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/QtCore/sipQtCoreQStringRef_0.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static SIP_SSIZE_T slot_QStringRef_0___len__(PyObject *);}
static SIP_SSIZE_T slot_QStringRef_0___len__(PyObject *sipSelf)
{
     ::QStringRef *sipCpp = reinterpret_cast< ::QStringRef *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QStringRef));

    if (!sipCpp)
        return 0;


    {
        {
            SIP_SSIZE_T sipRes = 0;

#line 1 "Auto-generated"
            sipRes = (SIP_SSIZE_T)sipCpp->count();
#line 1609 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp/pyqt4/QtCore/sipQtCoreQStringRef_0.cpp"

            return sipRes;
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QStringRef_0(void *, int);}
static void release_QStringRef_0(void *sipCppV, int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast< ::QStringRef *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void assign_QStringRef_0(void *, SIP_SSIZE_T, void *);}
static void assign_QStringRef_0(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QStringRef *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QStringRef *>(sipSrc);
}


extern "C" {static void *array_QStringRef_0(SIP_SSIZE_T);}
static void *array_QStringRef_0(SIP_SSIZE_T sipNrElem)
{
    return new  ::QStringRef[sipNrElem];
}


extern "C" {static void *copy_QStringRef_0(const void *, SIP_SSIZE_T);}
static void *copy_QStringRef_0(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QStringRef(reinterpret_cast<const  ::QStringRef *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QStringRef_0(sipSimpleWrapper *);}
static void dealloc_QStringRef_0(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QStringRef_0(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QStringRef_0(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QStringRef_0(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QStringRef *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new  ::QStringRef();
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
        int a1;
        int a2;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J0ii", sipType_QString,&a0, &a0State, &a1, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new  ::QStringRef(a0,a1,a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipCpp;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J0", sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new  ::QStringRef(a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipCpp;
        }
    }

    {
        const  ::QStringRef* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QStringRef,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new  ::QStringRef(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QStringRef *>(a0),sipType_QStringRef,a0State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QStringRef_0[] = {
    {(void *)slot_QStringRef_0___eq__, eq_slot},
    {(void *)slot_QStringRef_0___ne__, ne_slot},
    {(void *)slot_QStringRef_0___lt__, lt_slot},
    {(void *)slot_QStringRef_0___le__, le_slot},
    {(void *)slot_QStringRef_0___gt__, gt_slot},
    {(void *)slot_QStringRef_0___ge__, ge_slot},
    {(void *)slot_QStringRef_0___str__, str_slot},
    {(void *)slot_QStringRef_0___len__, len_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QStringRef_0[] = {
    {SIP_MLNAME_CAST(sipName_appendTo), meth_QStringRef_0_appendTo, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_at), meth_QStringRef_0_at, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_clear), meth_QStringRef_0_clear, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_compare), SIP_MLMETH_CAST(meth_QStringRef_0_compare), METH_VARARGS|METH_KEYWORDS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_constData), meth_QStringRef_0_constData, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_contains), SIP_MLMETH_CAST(meth_QStringRef_0_contains), METH_VARARGS|METH_KEYWORDS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_count), SIP_MLMETH_CAST(meth_QStringRef_0_count), METH_VARARGS|METH_KEYWORDS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_data), meth_QStringRef_0_data, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_endsWith), SIP_MLMETH_CAST(meth_QStringRef_0_endsWith), METH_VARARGS|METH_KEYWORDS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_indexOf), SIP_MLMETH_CAST(meth_QStringRef_0_indexOf), METH_VARARGS|METH_KEYWORDS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_isEmpty), meth_QStringRef_0_isEmpty, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_isNull), meth_QStringRef_0_isNull, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_lastIndexOf), SIP_MLMETH_CAST(meth_QStringRef_0_lastIndexOf), METH_VARARGS|METH_KEYWORDS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_length), meth_QStringRef_0_length, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_localeAwareCompare), meth_QStringRef_0_localeAwareCompare, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_position), meth_QStringRef_0_position, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_size), meth_QStringRef_0_size, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_startsWith), SIP_MLMETH_CAST(meth_QStringRef_0_startsWith), METH_VARARGS|METH_KEYWORDS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_string), meth_QStringRef_0_string, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_toAscii), meth_QStringRef_0_toAscii, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_toLatin1), meth_QStringRef_0_toLatin1, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_toLocal8Bit), meth_QStringRef_0_toLocal8Bit, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_toString), meth_QStringRef_0_toString, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_toUcs4), meth_QStringRef_0_toUcs4, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_toUtf8), meth_QStringRef_0_toUtf8, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_unicode), meth_QStringRef_0_unicode, METH_VARARGS, SIP_NULLPTR}
};


static pyqt4ClassPluginDef plugin_QStringRef_0 = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QStringRef_0 = {
    {
        0,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_CLASS,
        sipNameNr_QStringRef,
        {SIP_NULLPTR},
        &plugin_QStringRef_0
    },
    {
        sipNameNr_QStringRef,
        {0, 0, 1},
        26, methods_QStringRef_0,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    SIP_NULLPTR,
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QStringRef_0,
    init_type_QStringRef_0,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QStringRef_0,
    assign_QStringRef_0,
    array_QStringRef_0,
    copy_QStringRef_0,
    release_QStringRef_0,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

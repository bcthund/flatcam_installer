/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.23
 *
 * Copyright (c) 2018 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt4.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 250 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp2/pyqt4/sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 29 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp2/pyqt4/QtCore/sipQtCoreQMetaClassInfo.cpp"



PyDoc_STRVAR(doc_QMetaClassInfo_name, "name(self) -> str");

extern "C" {static PyObject *meth_QMetaClassInfo_name(PyObject *, PyObject *);}
static PyObject *meth_QMetaClassInfo_name(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMetaClassInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMetaClassInfo, &sipCpp))
        {
            const char*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->name();
            Py_END_ALLOW_THREADS

            if (sipRes == SIP_NULLPTR)
            {
                Py_INCREF(Py_None);
                return Py_None;
            }

            return SIPBytes_FromString(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QMetaClassInfo, sipName_name, doc_QMetaClassInfo_name);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMetaClassInfo_value, "value(self) -> str");

extern "C" {static PyObject *meth_QMetaClassInfo_value(PyObject *, PyObject *);}
static PyObject *meth_QMetaClassInfo_value(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMetaClassInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMetaClassInfo, &sipCpp))
        {
            const char*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->value();
            Py_END_ALLOW_THREADS

            if (sipRes == SIP_NULLPTR)
            {
                Py_INCREF(Py_None);
                return Py_None;
            }

            return SIPBytes_FromString(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QMetaClassInfo, sipName_value, doc_QMetaClassInfo_value);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QMetaClassInfo(void *, int);}
static void release_QMetaClassInfo(void *sipCppV, int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast< ::QMetaClassInfo *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void *array_QMetaClassInfo(Py_ssize_t);}
static void *array_QMetaClassInfo(Py_ssize_t sipNrElem)
{
    return new  ::QMetaClassInfo[sipNrElem];
}


extern "C" {static void assign_QMetaClassInfo(void *, SIP_SSIZE_T, void *);}
static void assign_QMetaClassInfo(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QMetaClassInfo *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QMetaClassInfo *>(sipSrc);
}


extern "C" {static void *copy_QMetaClassInfo(const void *, SIP_SSIZE_T);}
static void *copy_QMetaClassInfo(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QMetaClassInfo(reinterpret_cast<const  ::QMetaClassInfo *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QMetaClassInfo(sipSimpleWrapper *);}
static void dealloc_QMetaClassInfo(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QMetaClassInfo(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QMetaClassInfo(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QMetaClassInfo(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QMetaClassInfo *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new  ::QMetaClassInfo();
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        const  ::QMetaClassInfo* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QMetaClassInfo, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new  ::QMetaClassInfo(*a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_QMetaClassInfo[] = {
    {SIP_MLNAME_CAST(sipName_name), meth_QMetaClassInfo_name, METH_VARARGS, SIP_MLDOC_CAST(doc_QMetaClassInfo_name)},
    {SIP_MLNAME_CAST(sipName_value), meth_QMetaClassInfo_value, METH_VARARGS, SIP_MLDOC_CAST(doc_QMetaClassInfo_value)}
};

PyDoc_STRVAR(doc_QMetaClassInfo, "\1QMetaClassInfo()\n"
"QMetaClassInfo(QMetaClassInfo)");


static pyqt4ClassPluginDef plugin_QMetaClassInfo = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QMetaClassInfo = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_CLASS,
        sipNameNr_QMetaClassInfo,
        {SIP_NULLPTR},
        &plugin_QMetaClassInfo
    },
    {
        sipNameNr_QMetaClassInfo,
        {0, 0, 1},
        2, methods_QMetaClassInfo,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QMetaClassInfo,
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QMetaClassInfo,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QMetaClassInfo,
    assign_QMetaClassInfo,
    array_QMetaClassInfo,
    copy_QMetaClassInfo,
    release_QMetaClassInfo,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

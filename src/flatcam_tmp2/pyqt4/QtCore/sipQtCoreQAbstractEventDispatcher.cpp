/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.23
 *
 * Copyright (c) 2018 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt4.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 26 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp2/pyqt4/sip/QtCore/qabstracteventdispatcher.sip"
#include <qabstracteventdispatcher.h>
#line 29 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp2/pyqt4/QtCore/sipQtCoreQAbstractEventDispatcher.cpp"

#line 29 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp2/pyqt4/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 33 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp2/pyqt4/QtCore/sipQtCoreQAbstractEventDispatcher.cpp"
#line 28 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp2/pyqt4/sip/QtCore/qabstractnativeeventfilter.sip"
#include <qabstractnativeeventfilter.h>
#line 36 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp2/pyqt4/QtCore/sipQtCoreQAbstractEventDispatcher.cpp"
#line 28 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp2/pyqt4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 39 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp2/pyqt4/QtCore/sipQtCoreQAbstractEventDispatcher.cpp"
#line 26 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp2/pyqt4/sip/QtCore/qabstracteventdispatcher.sip"
#include <qabstracteventdispatcher.h>
#line 35 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp2/pyqt4/sip/QtCore/qabstracteventdispatcher.sip"
#include <qabstracteventdispatcher.h>
#line 44 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp2/pyqt4/QtCore/sipQtCoreQAbstractEventDispatcher.cpp"
#line 26 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp2/pyqt4/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 47 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp2/pyqt4/QtCore/sipQtCoreQAbstractEventDispatcher.cpp"
#line 26 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp2/pyqt4/sip/QtCore/qsocketnotifier.sip"
#include <qsocketnotifier.h>
#line 50 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp2/pyqt4/QtCore/sipQtCoreQAbstractEventDispatcher.cpp"
#line 26 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp2/pyqt4/sip/QtCore/qeventloop.sip"
#include <qeventloop.h>
#line 53 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp2/pyqt4/QtCore/sipQtCoreQAbstractEventDispatcher.cpp"
#line 26 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp2/pyqt4/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 56 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp2/pyqt4/QtCore/sipQtCoreQAbstractEventDispatcher.cpp"
#line 26 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp2/pyqt4/sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 59 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp2/pyqt4/QtCore/sipQtCoreQAbstractEventDispatcher.cpp"
#line 26 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp2/pyqt4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 62 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp2/pyqt4/QtCore/sipQtCoreQAbstractEventDispatcher.cpp"
#line 368 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp2/pyqt4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 65 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp2/pyqt4/QtCore/sipQtCoreQAbstractEventDispatcher.cpp"
#line 351 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp2/pyqt4/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 68 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp2/pyqt4/QtCore/sipQtCoreQAbstractEventDispatcher.cpp"
#line 27 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp2/pyqt4/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 71 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp2/pyqt4/QtCore/sipQtCoreQAbstractEventDispatcher.cpp"
#line 265 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp2/pyqt4/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 74 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp2/pyqt4/QtCore/sipQtCoreQAbstractEventDispatcher.cpp"
#line 28 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp2/pyqt4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 77 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp2/pyqt4/QtCore/sipQtCoreQAbstractEventDispatcher.cpp"
#line 32 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp2/pyqt4/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 80 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp2/pyqt4/QtCore/sipQtCoreQAbstractEventDispatcher.cpp"
#line 115 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp2/pyqt4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 83 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp2/pyqt4/QtCore/sipQtCoreQAbstractEventDispatcher.cpp"
#line 26 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp2/pyqt4/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 86 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp2/pyqt4/QtCore/sipQtCoreQAbstractEventDispatcher.cpp"
#line 26 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp2/pyqt4/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 89 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp2/pyqt4/QtCore/sipQtCoreQAbstractEventDispatcher.cpp"


class sipQAbstractEventDispatcher : public  ::QAbstractEventDispatcher
{
public:
    sipQAbstractEventDispatcher( ::QObject*);
    virtual ~sipQAbstractEventDispatcher();

    int qt_metacall(QMetaObject::Call, int, void **) ;
    void *qt_metacast(const char *) ;
    const QMetaObject *metaObject() const ;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    int remainingTime(int) ;
    void closingDown() ;
    void startingUp() ;
    void flush() ;
    void interrupt() ;
    void wakeUp() ;
    QList< ::QAbstractEventDispatcher::TimerInfo> registeredTimers( ::QObject*) const ;
    bool unregisterTimers( ::QObject*) ;
    bool unregisterTimer(int) ;
    void registerTimer(int,int, ::QObject*) ;
    void registerTimer(int,int, ::Qt::TimerType, ::QObject*) ;
    void unregisterSocketNotifier( ::QSocketNotifier*) ;
    void registerSocketNotifier( ::QSocketNotifier*) ;
    bool hasPendingEvents() ;
    bool processEvents( ::QEventLoop::ProcessEventsFlags) ;
    bool event( ::QEvent*) ;
    bool eventFilter( ::QObject*, ::QEvent*) ;
    void timerEvent( ::QTimerEvent*) ;
    void childEvent( ::QChildEvent*) ;
    void customEvent( ::QEvent*) ;
    void connectNotify(const  ::QMetaMethod&) ;
    void disconnectNotify(const  ::QMetaMethod&) ;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQAbstractEventDispatcher(const sipQAbstractEventDispatcher &);
    sipQAbstractEventDispatcher &operator = (const sipQAbstractEventDispatcher &);

    char sipPyMethods[22];
};

sipQAbstractEventDispatcher::sipQAbstractEventDispatcher( ::QObject*a0):  ::QAbstractEventDispatcher(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQAbstractEventDispatcher::~sipQAbstractEventDispatcher()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQAbstractEventDispatcher::metaObject() const
{
    return sip_QtCore_qt_metaobject(sipPySelf,sipType_QAbstractEventDispatcher);
}

int sipQAbstractEventDispatcher::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QAbstractEventDispatcher::qt_metacall(_c,_id,_a);

    if (_id >= 0)
    {
        SIP_BLOCK_THREADS
        _id = sip_QtCore_qt_metacall(sipPySelf,sipType_QAbstractEventDispatcher,_c,_id,_a);
        SIP_UNBLOCK_THREADS
    }

    return _id;
}

void *sipQAbstractEventDispatcher::qt_metacast(const char *_clname)
{
    return (sip_QtCore_qt_metacast(sipPySelf, sipType_QAbstractEventDispatcher, _clname)) ? this :  ::QAbstractEventDispatcher::qt_metacast(_clname);
}

int sipQAbstractEventDispatcher::remainingTime(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,sipName_QAbstractEventDispatcher,sipName_remainingTime);

    if (!sipMeth)
        return 0;

    extern int sipVH_QtCore_19(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtCore_19(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQAbstractEventDispatcher::closingDown()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_closingDown);

    if (!sipMeth)
    {
         ::QAbstractEventDispatcher::closingDown();
        return;
    }

    extern void sipVH_QtCore_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtCore_18(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQAbstractEventDispatcher::startingUp()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_startingUp);

    if (!sipMeth)
    {
         ::QAbstractEventDispatcher::startingUp();
        return;
    }

    extern void sipVH_QtCore_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtCore_18(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQAbstractEventDispatcher::flush()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,sipName_QAbstractEventDispatcher,sipName_flush);

    if (!sipMeth)
        return;

    extern void sipVH_QtCore_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtCore_18(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQAbstractEventDispatcher::interrupt()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,sipName_QAbstractEventDispatcher,sipName_interrupt);

    if (!sipMeth)
        return;

    extern void sipVH_QtCore_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtCore_18(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQAbstractEventDispatcher::wakeUp()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,sipName_QAbstractEventDispatcher,sipName_wakeUp);

    if (!sipMeth)
        return;

    extern void sipVH_QtCore_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtCore_18(sipGILState, 0, sipPySelf, sipMeth);
}

QList< ::QAbstractEventDispatcher::TimerInfo> sipQAbstractEventDispatcher::registeredTimers( ::QObject*a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[6]),sipPySelf,sipName_QAbstractEventDispatcher,sipName_registeredTimers);

    if (!sipMeth)
        return QList< ::QAbstractEventDispatcher::TimerInfo>();

    extern QList< ::QAbstractEventDispatcher::TimerInfo> sipVH_QtCore_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*);

    return sipVH_QtCore_17(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQAbstractEventDispatcher::unregisterTimers( ::QObject*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,sipName_QAbstractEventDispatcher,sipName_unregisterTimers);

    if (!sipMeth)
        return 0;

    extern bool sipVH_QtCore_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*);

    return sipVH_QtCore_16(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQAbstractEventDispatcher::unregisterTimer(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,sipName_QAbstractEventDispatcher,sipName_unregisterTimer);

    if (!sipMeth)
        return 0;

    extern bool sipVH_QtCore_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtCore_15(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQAbstractEventDispatcher::registerTimer(int a0,int a1, ::QObject*a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,sipName_QAbstractEventDispatcher,sipName_registerTimer);

    if (!sipMeth)
        return;

    extern void sipVH_QtCore_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int, ::QObject*);

    sipVH_QtCore_14(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

void sipQAbstractEventDispatcher::registerTimer(int a0,int a1, ::Qt::TimerType a2, ::QObject*a3)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,sipName_QAbstractEventDispatcher,sipName_registerTimer);

    if (!sipMeth)
        return;

    extern void sipVH_QtCore_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int, ::Qt::TimerType, ::QObject*);

    sipVH_QtCore_13(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2, a3);
}

void sipQAbstractEventDispatcher::unregisterSocketNotifier( ::QSocketNotifier*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,sipName_QAbstractEventDispatcher,sipName_unregisterSocketNotifier);

    if (!sipMeth)
        return;

    extern void sipVH_QtCore_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QSocketNotifier*);

    sipVH_QtCore_12(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQAbstractEventDispatcher::registerSocketNotifier( ::QSocketNotifier*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,sipName_QAbstractEventDispatcher,sipName_registerSocketNotifier);

    if (!sipMeth)
        return;

    extern void sipVH_QtCore_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QSocketNotifier*);

    sipVH_QtCore_12(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQAbstractEventDispatcher::hasPendingEvents()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,sipName_QAbstractEventDispatcher,sipName_hasPendingEvents);

    if (!sipMeth)
        return 0;

    extern bool sipVH_QtCore_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_11(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipQAbstractEventDispatcher::processEvents( ::QEventLoop::ProcessEventsFlags a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,sipName_QAbstractEventDispatcher,sipName_processEvents);

    if (!sipMeth)
        return 0;

    extern bool sipVH_QtCore_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEventLoop::ProcessEventsFlags);

    return sipVH_QtCore_10(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQAbstractEventDispatcher::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,SIP_NULLPTR,sipName_event);

    if (!sipMeth)
        return  ::QAbstractEventDispatcher::event(a0);

    extern bool sipVH_QtCore_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtCore_0(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQAbstractEventDispatcher::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,SIP_NULLPTR,sipName_eventFilter);

    if (!sipMeth)
        return  ::QAbstractEventDispatcher::eventFilter(a0,a1);

    extern bool sipVH_QtCore_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtCore_1(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void sipQAbstractEventDispatcher::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,SIP_NULLPTR,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QAbstractEventDispatcher::timerEvent(a0);
        return;
    }

    extern void sipVH_QtCore_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtCore_2(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQAbstractEventDispatcher::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,SIP_NULLPTR,sipName_childEvent);

    if (!sipMeth)
    {
         ::QAbstractEventDispatcher::childEvent(a0);
        return;
    }

    extern void sipVH_QtCore_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtCore_3(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQAbstractEventDispatcher::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,SIP_NULLPTR,sipName_customEvent);

    if (!sipMeth)
    {
         ::QAbstractEventDispatcher::customEvent(a0);
        return;
    }

    extern void sipVH_QtCore_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtCore_4(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQAbstractEventDispatcher::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,SIP_NULLPTR,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QAbstractEventDispatcher::connectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQAbstractEventDispatcher::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,SIP_NULLPTR,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QAbstractEventDispatcher::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, 0, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QAbstractEventDispatcher_instance, "instance(thread: QThread = None) -> QAbstractEventDispatcher");

extern "C" {static PyObject *meth_QAbstractEventDispatcher_instance(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractEventDispatcher_instance(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QThread* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_thread,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "|J8", sipType_QThread, &a0))
        {
             ::QAbstractEventDispatcher*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes =  ::QAbstractEventDispatcher::instance(a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QAbstractEventDispatcher,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractEventDispatcher, sipName_instance, doc_QAbstractEventDispatcher_instance);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractEventDispatcher_processEvents, "processEvents(self, QEventLoop.ProcessEventsFlags) -> bool");

extern "C" {static PyObject *meth_QAbstractEventDispatcher_processEvents(PyObject *, PyObject *);}
static PyObject *meth_QAbstractEventDispatcher_processEvents(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::QEventLoop::ProcessEventsFlags* a0;
        int a0State = 0;
         ::QAbstractEventDispatcher *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QAbstractEventDispatcher, &sipCpp, sipType_QEventLoop_ProcessEventsFlags, &a0, &a0State))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractEventDispatcher, sipName_processEvents);
                return SIP_NULLPTR;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->processEvents(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QEventLoop_ProcessEventsFlags,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractEventDispatcher, sipName_processEvents, doc_QAbstractEventDispatcher_processEvents);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractEventDispatcher_hasPendingEvents, "hasPendingEvents(self) -> bool");

extern "C" {static PyObject *meth_QAbstractEventDispatcher_hasPendingEvents(PyObject *, PyObject *);}
static PyObject *meth_QAbstractEventDispatcher_hasPendingEvents(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::QAbstractEventDispatcher *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractEventDispatcher, &sipCpp))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractEventDispatcher, sipName_hasPendingEvents);
                return SIP_NULLPTR;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->hasPendingEvents();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractEventDispatcher, sipName_hasPendingEvents, doc_QAbstractEventDispatcher_hasPendingEvents);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractEventDispatcher_registerSocketNotifier, "registerSocketNotifier(self, QSocketNotifier)");

extern "C" {static PyObject *meth_QAbstractEventDispatcher_registerSocketNotifier(PyObject *, PyObject *);}
static PyObject *meth_QAbstractEventDispatcher_registerSocketNotifier(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::QSocketNotifier* a0;
         ::QAbstractEventDispatcher *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QAbstractEventDispatcher, &sipCpp, sipType_QSocketNotifier, &a0))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractEventDispatcher, sipName_registerSocketNotifier);
                return SIP_NULLPTR;
            }

            Py_BEGIN_ALLOW_THREADS
            sipCpp->registerSocketNotifier(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractEventDispatcher, sipName_registerSocketNotifier, doc_QAbstractEventDispatcher_registerSocketNotifier);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractEventDispatcher_unregisterSocketNotifier, "unregisterSocketNotifier(self, QSocketNotifier)");

extern "C" {static PyObject *meth_QAbstractEventDispatcher_unregisterSocketNotifier(PyObject *, PyObject *);}
static PyObject *meth_QAbstractEventDispatcher_unregisterSocketNotifier(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::QSocketNotifier* a0;
         ::QAbstractEventDispatcher *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QAbstractEventDispatcher, &sipCpp, sipType_QSocketNotifier, &a0))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractEventDispatcher, sipName_unregisterSocketNotifier);
                return SIP_NULLPTR;
            }

            Py_BEGIN_ALLOW_THREADS
            sipCpp->unregisterSocketNotifier(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractEventDispatcher, sipName_unregisterSocketNotifier, doc_QAbstractEventDispatcher_unregisterSocketNotifier);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractEventDispatcher_registerTimer, "registerTimer(self, int, Qt.TimerType, QObject) -> int\n"
"registerTimer(self, int, QObject) -> int\n"
"registerTimer(self, int, int, Qt.TimerType, QObject)\n"
"registerTimer(self, int, int, QObject)");

extern "C" {static PyObject *meth_QAbstractEventDispatcher_registerTimer(PyObject *, PyObject *);}
static PyObject *meth_QAbstractEventDispatcher_registerTimer(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        int a0;
         ::Qt::TimerType a1;
         ::QObject* a2;
         ::QAbstractEventDispatcher *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiXEJ8", &sipSelf, sipType_QAbstractEventDispatcher, &sipCpp, &a0, sipType_Qt_TimerType, &a1, sipType_QObject, &a2))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->registerTimer(a0,a1,a2);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        int a0;
         ::QObject* a1;
         ::QAbstractEventDispatcher *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ8", &sipSelf, sipType_QAbstractEventDispatcher, &sipCpp, &a0, sipType_QObject, &a1))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->registerTimer(a0,a1);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        int a0;
        int a1;
         ::Qt::TimerType a2;
         ::QObject* a3;
         ::QAbstractEventDispatcher *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiiEJ8", &sipSelf, sipType_QAbstractEventDispatcher, &sipCpp, &a0, &a1, sipType_Qt_TimerType, &a2, sipType_QObject, &a3))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractEventDispatcher, sipName_registerTimer);
                return SIP_NULLPTR;
            }

            Py_BEGIN_ALLOW_THREADS
            sipCpp->registerTimer(a0,a1,a2,a3);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
         ::QObject* a2;
         ::QAbstractEventDispatcher *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiiJ8", &sipSelf, sipType_QAbstractEventDispatcher, &sipCpp, &a0, &a1, sipType_QObject, &a2))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractEventDispatcher, sipName_registerTimer);
                return SIP_NULLPTR;
            }

            Py_BEGIN_ALLOW_THREADS
            sipCpp->registerTimer(a0,a1,a2);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractEventDispatcher, sipName_registerTimer, doc_QAbstractEventDispatcher_registerTimer);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractEventDispatcher_unregisterTimer, "unregisterTimer(self, int) -> bool");

extern "C" {static PyObject *meth_QAbstractEventDispatcher_unregisterTimer(PyObject *, PyObject *);}
static PyObject *meth_QAbstractEventDispatcher_unregisterTimer(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        int a0;
         ::QAbstractEventDispatcher *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QAbstractEventDispatcher, &sipCpp, &a0))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractEventDispatcher, sipName_unregisterTimer);
                return SIP_NULLPTR;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->unregisterTimer(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractEventDispatcher, sipName_unregisterTimer, doc_QAbstractEventDispatcher_unregisterTimer);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractEventDispatcher_unregisterTimers, "unregisterTimers(self, QObject) -> bool");

extern "C" {static PyObject *meth_QAbstractEventDispatcher_unregisterTimers(PyObject *, PyObject *);}
static PyObject *meth_QAbstractEventDispatcher_unregisterTimers(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::QObject* a0;
         ::QAbstractEventDispatcher *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QAbstractEventDispatcher, &sipCpp, sipType_QObject, &a0))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractEventDispatcher, sipName_unregisterTimers);
                return SIP_NULLPTR;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->unregisterTimers(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractEventDispatcher, sipName_unregisterTimers, doc_QAbstractEventDispatcher_unregisterTimers);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractEventDispatcher_registeredTimers, "registeredTimers(self, QObject) -> List[QAbstractEventDispatcher.TimerInfo]");

extern "C" {static PyObject *meth_QAbstractEventDispatcher_registeredTimers(PyObject *, PyObject *);}
static PyObject *meth_QAbstractEventDispatcher_registeredTimers(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::QObject* a0;
        const  ::QAbstractEventDispatcher *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QAbstractEventDispatcher, &sipCpp, sipType_QObject, &a0))
        {
            QList< ::QAbstractEventDispatcher::TimerInfo>*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractEventDispatcher, sipName_registeredTimers);
                return SIP_NULLPTR;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList< ::QAbstractEventDispatcher::TimerInfo>(sipCpp->registeredTimers(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0100QAbstractEventDispatcher_TimerInfo,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractEventDispatcher, sipName_registeredTimers, doc_QAbstractEventDispatcher_registeredTimers);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractEventDispatcher_wakeUp, "wakeUp(self)");

extern "C" {static PyObject *meth_QAbstractEventDispatcher_wakeUp(PyObject *, PyObject *);}
static PyObject *meth_QAbstractEventDispatcher_wakeUp(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::QAbstractEventDispatcher *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractEventDispatcher, &sipCpp))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractEventDispatcher, sipName_wakeUp);
                return SIP_NULLPTR;
            }

            Py_BEGIN_ALLOW_THREADS
            sipCpp->wakeUp();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractEventDispatcher, sipName_wakeUp, doc_QAbstractEventDispatcher_wakeUp);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractEventDispatcher_interrupt, "interrupt(self)");

extern "C" {static PyObject *meth_QAbstractEventDispatcher_interrupt(PyObject *, PyObject *);}
static PyObject *meth_QAbstractEventDispatcher_interrupt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::QAbstractEventDispatcher *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractEventDispatcher, &sipCpp))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractEventDispatcher, sipName_interrupt);
                return SIP_NULLPTR;
            }

            Py_BEGIN_ALLOW_THREADS
            sipCpp->interrupt();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractEventDispatcher, sipName_interrupt, doc_QAbstractEventDispatcher_interrupt);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractEventDispatcher_flush, "flush(self)");

extern "C" {static PyObject *meth_QAbstractEventDispatcher_flush(PyObject *, PyObject *);}
static PyObject *meth_QAbstractEventDispatcher_flush(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::QAbstractEventDispatcher *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractEventDispatcher, &sipCpp))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractEventDispatcher, sipName_flush);
                return SIP_NULLPTR;
            }

            Py_BEGIN_ALLOW_THREADS
            sipCpp->flush();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractEventDispatcher, sipName_flush, doc_QAbstractEventDispatcher_flush);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractEventDispatcher_startingUp, "startingUp(self)");

extern "C" {static PyObject *meth_QAbstractEventDispatcher_startingUp(PyObject *, PyObject *);}
static PyObject *meth_QAbstractEventDispatcher_startingUp(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QAbstractEventDispatcher *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractEventDispatcher, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QAbstractEventDispatcher::startingUp() : sipCpp->startingUp());
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractEventDispatcher, sipName_startingUp, doc_QAbstractEventDispatcher_startingUp);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractEventDispatcher_closingDown, "closingDown(self)");

extern "C" {static PyObject *meth_QAbstractEventDispatcher_closingDown(PyObject *, PyObject *);}
static PyObject *meth_QAbstractEventDispatcher_closingDown(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QAbstractEventDispatcher *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractEventDispatcher, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QAbstractEventDispatcher::closingDown() : sipCpp->closingDown());
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractEventDispatcher, sipName_closingDown, doc_QAbstractEventDispatcher_closingDown);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractEventDispatcher_filterEvent, "filterEvent(self, sip.voidptr) -> bool");

extern "C" {static PyObject *meth_QAbstractEventDispatcher_filterEvent(PyObject *, PyObject *);}
static PyObject *meth_QAbstractEventDispatcher_filterEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        void* a0;
         ::QAbstractEventDispatcher *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bv", &sipSelf, sipType_QAbstractEventDispatcher, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->filterEvent(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractEventDispatcher, sipName_filterEvent, doc_QAbstractEventDispatcher_filterEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractEventDispatcher_remainingTime, "remainingTime(self, int) -> int");

extern "C" {static PyObject *meth_QAbstractEventDispatcher_remainingTime(PyObject *, PyObject *);}
static PyObject *meth_QAbstractEventDispatcher_remainingTime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        int a0;
         ::QAbstractEventDispatcher *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QAbstractEventDispatcher, &sipCpp, &a0))
        {
            int sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractEventDispatcher, sipName_remainingTime);
                return SIP_NULLPTR;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->remainingTime(a0);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractEventDispatcher, sipName_remainingTime, doc_QAbstractEventDispatcher_remainingTime);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractEventDispatcher_installNativeEventFilter, "installNativeEventFilter(self, QAbstractNativeEventFilter)");

extern "C" {static PyObject *meth_QAbstractEventDispatcher_installNativeEventFilter(PyObject *, PyObject *);}
static PyObject *meth_QAbstractEventDispatcher_installNativeEventFilter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QAbstractNativeEventFilter* a0;
         ::QAbstractEventDispatcher *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QAbstractEventDispatcher, &sipCpp, sipType_QAbstractNativeEventFilter, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->installNativeEventFilter(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractEventDispatcher, sipName_installNativeEventFilter, doc_QAbstractEventDispatcher_installNativeEventFilter);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractEventDispatcher_removeNativeEventFilter, "removeNativeEventFilter(self, QAbstractNativeEventFilter)");

extern "C" {static PyObject *meth_QAbstractEventDispatcher_removeNativeEventFilter(PyObject *, PyObject *);}
static PyObject *meth_QAbstractEventDispatcher_removeNativeEventFilter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QAbstractNativeEventFilter* a0;
         ::QAbstractEventDispatcher *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QAbstractEventDispatcher, &sipCpp, sipType_QAbstractNativeEventFilter, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->removeNativeEventFilter(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractEventDispatcher, sipName_removeNativeEventFilter, doc_QAbstractEventDispatcher_removeNativeEventFilter);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QAbstractEventDispatcher(void *, const sipTypeDef *);}
static void *cast_QAbstractEventDispatcher(void *sipCppV, const sipTypeDef *targetType)
{
     ::QAbstractEventDispatcher *sipCpp = reinterpret_cast< ::QAbstractEventDispatcher *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QAbstractEventDispatcher(void *, int);}
static void release_QAbstractEventDispatcher(void *sipCppV, int)
{
     ::QAbstractEventDispatcher *sipCpp = reinterpret_cast< ::QAbstractEventDispatcher *>(sipCppV);

    Py_BEGIN_ALLOW_THREADS

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QAbstractEventDispatcher(sipSimpleWrapper *);}
static void dealloc_QAbstractEventDispatcher(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQAbstractEventDispatcher *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QAbstractEventDispatcher(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QAbstractEventDispatcher(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QAbstractEventDispatcher(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQAbstractEventDispatcher *sipCpp = SIP_NULLPTR;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQAbstractEventDispatcher(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QAbstractEventDispatcher[] = {{138, 255, 1}};


static PyMethodDef methods_QAbstractEventDispatcher[] = {
    {SIP_MLNAME_CAST(sipName_closingDown), meth_QAbstractEventDispatcher_closingDown, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractEventDispatcher_closingDown)},
    {SIP_MLNAME_CAST(sipName_filterEvent), meth_QAbstractEventDispatcher_filterEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractEventDispatcher_filterEvent)},
    {SIP_MLNAME_CAST(sipName_flush), meth_QAbstractEventDispatcher_flush, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractEventDispatcher_flush)},
    {SIP_MLNAME_CAST(sipName_hasPendingEvents), meth_QAbstractEventDispatcher_hasPendingEvents, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractEventDispatcher_hasPendingEvents)},
    {SIP_MLNAME_CAST(sipName_installNativeEventFilter), meth_QAbstractEventDispatcher_installNativeEventFilter, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractEventDispatcher_installNativeEventFilter)},
    {SIP_MLNAME_CAST(sipName_instance), SIP_MLMETH_CAST(meth_QAbstractEventDispatcher_instance), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractEventDispatcher_instance)},
    {SIP_MLNAME_CAST(sipName_interrupt), meth_QAbstractEventDispatcher_interrupt, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractEventDispatcher_interrupt)},
    {SIP_MLNAME_CAST(sipName_processEvents), meth_QAbstractEventDispatcher_processEvents, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractEventDispatcher_processEvents)},
    {SIP_MLNAME_CAST(sipName_registerSocketNotifier), meth_QAbstractEventDispatcher_registerSocketNotifier, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractEventDispatcher_registerSocketNotifier)},
    {SIP_MLNAME_CAST(sipName_registerTimer), meth_QAbstractEventDispatcher_registerTimer, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractEventDispatcher_registerTimer)},
    {SIP_MLNAME_CAST(sipName_registeredTimers), meth_QAbstractEventDispatcher_registeredTimers, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractEventDispatcher_registeredTimers)},
    {SIP_MLNAME_CAST(sipName_remainingTime), meth_QAbstractEventDispatcher_remainingTime, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractEventDispatcher_remainingTime)},
    {SIP_MLNAME_CAST(sipName_removeNativeEventFilter), meth_QAbstractEventDispatcher_removeNativeEventFilter, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractEventDispatcher_removeNativeEventFilter)},
    {SIP_MLNAME_CAST(sipName_startingUp), meth_QAbstractEventDispatcher_startingUp, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractEventDispatcher_startingUp)},
    {SIP_MLNAME_CAST(sipName_unregisterSocketNotifier), meth_QAbstractEventDispatcher_unregisterSocketNotifier, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractEventDispatcher_unregisterSocketNotifier)},
    {SIP_MLNAME_CAST(sipName_unregisterTimer), meth_QAbstractEventDispatcher_unregisterTimer, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractEventDispatcher_unregisterTimer)},
    {SIP_MLNAME_CAST(sipName_unregisterTimers), meth_QAbstractEventDispatcher_unregisterTimers, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractEventDispatcher_unregisterTimers)},
    {SIP_MLNAME_CAST(sipName_wakeUp), meth_QAbstractEventDispatcher_wakeUp, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractEventDispatcher_wakeUp)}
};

PyDoc_STRVAR(doc_QAbstractEventDispatcher, "\1QAbstractEventDispatcher(parent: QObject = None)");


/* Define this type's signals. */
static const pyqt4QtSignal signals_QAbstractEventDispatcher[] = {
    {"awake()", "\1awake(self)", SIP_NULLPTR, 0},
    {"aboutToBlock()", "\1aboutToBlock(self)", SIP_NULLPTR, 0},
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, 0}
};


static pyqt4ClassPluginDef plugin_QAbstractEventDispatcher = {
    & ::QAbstractEventDispatcher::staticMetaObject,
    0,
    signals_QAbstractEventDispatcher
};


sipClassTypeDef sipTypeDef_QtCore_QAbstractEventDispatcher = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QAbstractEventDispatcher,
        {SIP_NULLPTR},
        &plugin_QAbstractEventDispatcher
    },
    {
        sipNameNr_QAbstractEventDispatcher,
        {0, 0, 1},
        18, methods_QAbstractEventDispatcher,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QAbstractEventDispatcher,
    -1,
    -1,
    supers_QAbstractEventDispatcher,
    SIP_NULLPTR,
    init_type_QAbstractEventDispatcher,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QAbstractEventDispatcher,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QAbstractEventDispatcher,
    cast_QAbstractEventDispatcher,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

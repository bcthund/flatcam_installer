/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.23
 *
 * Copyright (c) 2018 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt4.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 26 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp2/pyqt4/sip/QtCore/qdir.sip"
#include <qdir.h>
#line 29 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp2/pyqt4/QtCore/sipQtCoreQDir.cpp"

#line 27 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp2/pyqt4/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 33 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp2/pyqt4/QtCore/sipQtCoreQDir.cpp"
#line 26 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp2/pyqt4/sip/QtCore/qdir.sip"
#include <qdir.h>
#line 36 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp2/pyqt4/QtCore/sipQtCoreQDir.cpp"
#line 26 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp2/pyqt4/sip/QtCore/qdir.sip"
#include <qdir.h>
#line 39 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp2/pyqt4/QtCore/sipQtCoreQDir.cpp"
#line 27 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp2/pyqt4/sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 42 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp2/pyqt4/QtCore/sipQtCoreQDir.cpp"
#line 63 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp2/pyqt4/sip/QtCore/qchar.sip"
#include <qchar.h>
#line 45 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp2/pyqt4/QtCore/sipQtCoreQDir.cpp"
#line 28 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp2/pyqt4/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 48 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp2/pyqt4/QtCore/sipQtCoreQDir.cpp"
#line 26 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp2/pyqt4/sip/QtCore/qfileinfo.sip"
#include <qfileinfo.h>
#line 51 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp2/pyqt4/QtCore/sipQtCoreQDir.cpp"


PyDoc_STRVAR(doc_QDir_setPath, "setPath(self, str)");

extern "C" {static PyObject *meth_QDir_setPath(PyObject *, PyObject *);}
static PyObject *meth_QDir_setPath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QDir *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDir, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setPath(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QDir, sipName_setPath, doc_QDir_setPath);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDir_path, "path(self) -> str");

extern "C" {static PyObject *meth_QDir_path(PyObject *, PyObject *);}
static PyObject *meth_QDir_path(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDir *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDir, &sipCpp))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->path());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDir, sipName_path, doc_QDir_path);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDir_absolutePath, "absolutePath(self) -> str");

extern "C" {static PyObject *meth_QDir_absolutePath(PyObject *, PyObject *);}
static PyObject *meth_QDir_absolutePath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDir *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDir, &sipCpp))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->absolutePath());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDir, sipName_absolutePath, doc_QDir_absolutePath);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDir_canonicalPath, "canonicalPath(self) -> str");

extern "C" {static PyObject *meth_QDir_canonicalPath(PyObject *, PyObject *);}
static PyObject *meth_QDir_canonicalPath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDir *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDir, &sipCpp))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->canonicalPath());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDir, sipName_canonicalPath, doc_QDir_canonicalPath);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDir_addResourceSearchPath, "addResourceSearchPath(str)");

extern "C" {static PyObject *meth_QDir_addResourceSearchPath(PyObject *, PyObject *);}
static PyObject *meth_QDir_addResourceSearchPath(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
             ::QDir::addResourceSearchPath(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QDir, sipName_addResourceSearchPath, doc_QDir_addResourceSearchPath);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDir_dirName, "dirName(self) -> str");

extern "C" {static PyObject *meth_QDir_dirName(PyObject *, PyObject *);}
static PyObject *meth_QDir_dirName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDir *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDir, &sipCpp))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->dirName());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDir, sipName_dirName, doc_QDir_dirName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDir_filePath, "filePath(self, str) -> str");

extern "C" {static PyObject *meth_QDir_filePath(PyObject *, PyObject *);}
static PyObject *meth_QDir_filePath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QDir *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDir, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->filePath(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDir, sipName_filePath, doc_QDir_filePath);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDir_absoluteFilePath, "absoluteFilePath(self, str) -> str");

extern "C" {static PyObject *meth_QDir_absoluteFilePath(PyObject *, PyObject *);}
static PyObject *meth_QDir_absoluteFilePath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QDir *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDir, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->absoluteFilePath(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDir, sipName_absoluteFilePath, doc_QDir_absoluteFilePath);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDir_relativeFilePath, "relativeFilePath(self, str) -> str");

extern "C" {static PyObject *meth_QDir_relativeFilePath(PyObject *, PyObject *);}
static PyObject *meth_QDir_relativeFilePath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QDir *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDir, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->relativeFilePath(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDir, sipName_relativeFilePath, doc_QDir_relativeFilePath);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDir_cd, "cd(self, str) -> bool");

extern "C" {static PyObject *meth_QDir_cd(PyObject *, PyObject *);}
static PyObject *meth_QDir_cd(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QDir *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDir, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->cd(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDir, sipName_cd, doc_QDir_cd);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDir_cdUp, "cdUp(self) -> bool");

extern "C" {static PyObject *meth_QDir_cdUp(PyObject *, PyObject *);}
static PyObject *meth_QDir_cdUp(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDir *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDir, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->cdUp();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDir, sipName_cdUp, doc_QDir_cdUp);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDir_nameFilters, "nameFilters(self) -> List[str]");

extern "C" {static PyObject *meth_QDir_nameFilters(PyObject *, PyObject *);}
static PyObject *meth_QDir_nameFilters(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDir *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDir, &sipCpp))
        {
             ::QStringList*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QStringList(sipCpp->nameFilters());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QStringList,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDir, sipName_nameFilters, doc_QDir_nameFilters);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDir_setNameFilters, "setNameFilters(self, Sequence[str])");

extern "C" {static PyObject *meth_QDir_setNameFilters(PyObject *, PyObject *);}
static PyObject *meth_QDir_setNameFilters(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStringList* a0;
        int a0State = 0;
         ::QDir *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDir, &sipCpp, sipType_QStringList,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setNameFilters(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QStringList *>(a0),sipType_QStringList,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QDir, sipName_setNameFilters, doc_QDir_setNameFilters);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDir_filter, "filter(self) -> QDir.Filters");

extern "C" {static PyObject *meth_QDir_filter(PyObject *, PyObject *);}
static PyObject *meth_QDir_filter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDir *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDir, &sipCpp))
        {
             ::QDir::Filters*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QDir::Filters(sipCpp->filter());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QDir_Filters,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDir, sipName_filter, doc_QDir_filter);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDir_setFilter, "setFilter(self, QDir.Filters)");

extern "C" {static PyObject *meth_QDir_setFilter(PyObject *, PyObject *);}
static PyObject *meth_QDir_setFilter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDir::Filters* a0;
        int a0State = 0;
         ::QDir *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDir, &sipCpp, sipType_QDir_Filters, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setFilter(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QDir_Filters,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QDir, sipName_setFilter, doc_QDir_setFilter);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDir_sorting, "sorting(self) -> QDir.SortFlags");

extern "C" {static PyObject *meth_QDir_sorting(PyObject *, PyObject *);}
static PyObject *meth_QDir_sorting(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDir *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDir, &sipCpp))
        {
             ::QDir::SortFlags*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QDir::SortFlags(sipCpp->sorting());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QDir_SortFlags,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDir, sipName_sorting, doc_QDir_sorting);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDir_setSorting, "setSorting(self, QDir.SortFlags)");

extern "C" {static PyObject *meth_QDir_setSorting(PyObject *, PyObject *);}
static PyObject *meth_QDir_setSorting(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDir::SortFlags* a0;
        int a0State = 0;
         ::QDir *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDir, &sipCpp, sipType_QDir_SortFlags, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setSorting(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QDir_SortFlags,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QDir, sipName_setSorting, doc_QDir_setSorting);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDir_count, "count(self) -> int");

extern "C" {static PyObject *meth_QDir_count(PyObject *, PyObject *);}
static PyObject *meth_QDir_count(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDir *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDir, &sipCpp))
        {
             ::uint sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->count();
            Py_END_ALLOW_THREADS

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDir, sipName_count, doc_QDir_count);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDir_nameFiltersFromString, "nameFiltersFromString(str) -> List[str]");

extern "C" {static PyObject *meth_QDir_nameFiltersFromString(PyObject *, PyObject *);}
static PyObject *meth_QDir_nameFiltersFromString(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
             ::QStringList*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QStringList( ::QDir::nameFiltersFromString(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QStringList,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDir, sipName_nameFiltersFromString, doc_QDir_nameFiltersFromString);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDir_entryList, "entryList(self, filters: QDir.Filters = QDir.NoFilter, sort: QDir.SortFlags = QDir.NoSort) -> List[str]\n"
"entryList(self, Sequence[str], filters: QDir.Filters = QDir.NoFilter, sort: QDir.SortFlags = QDir.NoSort) -> List[str]");

extern "C" {static PyObject *meth_QDir_entryList(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QDir_entryList(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDir::Filters a0def =  ::QDir::NoFilter;
         ::QDir::Filters* a0 = &a0def;
        int a0State = 0;
         ::QDir::SortFlags a1def =  ::QDir::NoSort;
         ::QDir::SortFlags* a1 = &a1def;
        int a1State = 0;
        const  ::QDir *sipCpp;

        static const char *sipKwdList[] = {
            sipName_filters,
            sipName_sort,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|J1J1", &sipSelf, sipType_QDir, &sipCpp, sipType_QDir_Filters, &a0, &a0State, sipType_QDir_SortFlags, &a1, &a1State))
        {
             ::QStringList*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QStringList(sipCpp->entryList(*a0,*a1));
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QDir_Filters,a0State);
            sipReleaseType(a1,sipType_QDir_SortFlags,a1State);

            return sipConvertFromNewType(sipRes,sipType_QStringList,SIP_NULLPTR);
        }
    }

    {
        const  ::QStringList* a0;
        int a0State = 0;
         ::QDir::Filters a1def =  ::QDir::NoFilter;
         ::QDir::Filters* a1 = &a1def;
        int a1State = 0;
         ::QDir::SortFlags a2def =  ::QDir::NoSort;
         ::QDir::SortFlags* a2 = &a2def;
        int a2State = 0;
        const  ::QDir *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_filters,
            sipName_sort,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|J1J1", &sipSelf, sipType_QDir, &sipCpp, sipType_QStringList,&a0, &a0State, sipType_QDir_Filters, &a1, &a1State, sipType_QDir_SortFlags, &a2, &a2State))
        {
             ::QStringList*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QStringList(sipCpp->entryList(*a0,*a1,*a2));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QStringList *>(a0),sipType_QStringList,a0State);
            sipReleaseType(a1,sipType_QDir_Filters,a1State);
            sipReleaseType(a2,sipType_QDir_SortFlags,a2State);

            return sipConvertFromNewType(sipRes,sipType_QStringList,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDir, sipName_entryList, doc_QDir_entryList);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDir_entryInfoList, "entryInfoList(self, filters: QDir.Filters = QDir.NoFilter, sort: QDir.SortFlags = QDir.NoSort) -> List[QFileInfo]\n"
"entryInfoList(self, Sequence[str], filters: QDir.Filters = QDir.NoFilter, sort: QDir.SortFlags = QDir.NoSort) -> List[QFileInfo]");

extern "C" {static PyObject *meth_QDir_entryInfoList(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QDir_entryInfoList(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDir::Filters a0def =  ::QDir::NoFilter;
         ::QDir::Filters* a0 = &a0def;
        int a0State = 0;
         ::QDir::SortFlags a1def =  ::QDir::NoSort;
         ::QDir::SortFlags* a1 = &a1def;
        int a1State = 0;
        const  ::QDir *sipCpp;

        static const char *sipKwdList[] = {
            sipName_filters,
            sipName_sort,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|J1J1", &sipSelf, sipType_QDir, &sipCpp, sipType_QDir_Filters, &a0, &a0State, sipType_QDir_SortFlags, &a1, &a1State))
        {
             ::QFileInfoList*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QFileInfoList(sipCpp->entryInfoList(*a0,*a1));
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QDir_Filters,a0State);
            sipReleaseType(a1,sipType_QDir_SortFlags,a1State);

            return sipConvertFromNewType(sipRes,sipType_QList_0100QFileInfo,SIP_NULLPTR);
        }
    }

    {
        const  ::QStringList* a0;
        int a0State = 0;
         ::QDir::Filters a1def =  ::QDir::NoFilter;
         ::QDir::Filters* a1 = &a1def;
        int a1State = 0;
         ::QDir::SortFlags a2def =  ::QDir::NoSort;
         ::QDir::SortFlags* a2 = &a2def;
        int a2State = 0;
        const  ::QDir *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_filters,
            sipName_sort,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|J1J1", &sipSelf, sipType_QDir, &sipCpp, sipType_QStringList,&a0, &a0State, sipType_QDir_Filters, &a1, &a1State, sipType_QDir_SortFlags, &a2, &a2State))
        {
             ::QFileInfoList*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QFileInfoList(sipCpp->entryInfoList(*a0,*a1,*a2));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QStringList *>(a0),sipType_QStringList,a0State);
            sipReleaseType(a1,sipType_QDir_Filters,a1State);
            sipReleaseType(a2,sipType_QDir_SortFlags,a2State);

            return sipConvertFromNewType(sipRes,sipType_QList_0100QFileInfo,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDir, sipName_entryInfoList, doc_QDir_entryInfoList);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDir_mkdir, "mkdir(self, str) -> bool");

extern "C" {static PyObject *meth_QDir_mkdir(PyObject *, PyObject *);}
static PyObject *meth_QDir_mkdir(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QDir *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDir, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->mkdir(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDir, sipName_mkdir, doc_QDir_mkdir);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDir_rmdir, "rmdir(self, str) -> bool");

extern "C" {static PyObject *meth_QDir_rmdir(PyObject *, PyObject *);}
static PyObject *meth_QDir_rmdir(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QDir *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDir, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->rmdir(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDir, sipName_rmdir, doc_QDir_rmdir);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDir_mkpath, "mkpath(self, str) -> bool");

extern "C" {static PyObject *meth_QDir_mkpath(PyObject *, PyObject *);}
static PyObject *meth_QDir_mkpath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QDir *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDir, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->mkpath(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDir, sipName_mkpath, doc_QDir_mkpath);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDir_rmpath, "rmpath(self, str) -> bool");

extern "C" {static PyObject *meth_QDir_rmpath(PyObject *, PyObject *);}
static PyObject *meth_QDir_rmpath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QDir *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDir, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->rmpath(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDir, sipName_rmpath, doc_QDir_rmpath);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDir_isReadable, "isReadable(self) -> bool");

extern "C" {static PyObject *meth_QDir_isReadable(PyObject *, PyObject *);}
static PyObject *meth_QDir_isReadable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDir *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDir, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isReadable();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDir, sipName_isReadable, doc_QDir_isReadable);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDir_exists, "exists(self) -> bool\n"
"exists(self, str) -> bool");

extern "C" {static PyObject *meth_QDir_exists(PyObject *, PyObject *);}
static PyObject *meth_QDir_exists(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDir *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDir, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->exists();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QDir *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDir, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->exists(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDir, sipName_exists, doc_QDir_exists);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDir_isRoot, "isRoot(self) -> bool");

extern "C" {static PyObject *meth_QDir_isRoot(PyObject *, PyObject *);}
static PyObject *meth_QDir_isRoot(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDir *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDir, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isRoot();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDir, sipName_isRoot, doc_QDir_isRoot);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDir_isRelativePath, "isRelativePath(str) -> bool");

extern "C" {static PyObject *meth_QDir_isRelativePath(PyObject *, PyObject *);}
static PyObject *meth_QDir_isRelativePath(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes =  ::QDir::isRelativePath(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDir, sipName_isRelativePath, doc_QDir_isRelativePath);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDir_isAbsolutePath, "isAbsolutePath(str) -> bool");

extern "C" {static PyObject *meth_QDir_isAbsolutePath(PyObject *, PyObject *);}
static PyObject *meth_QDir_isAbsolutePath(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes =  ::QDir::isAbsolutePath(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDir, sipName_isAbsolutePath, doc_QDir_isAbsolutePath);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDir_isRelative, "isRelative(self) -> bool");

extern "C" {static PyObject *meth_QDir_isRelative(PyObject *, PyObject *);}
static PyObject *meth_QDir_isRelative(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDir *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDir, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isRelative();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDir, sipName_isRelative, doc_QDir_isRelative);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDir_isAbsolute, "isAbsolute(self) -> bool");

extern "C" {static PyObject *meth_QDir_isAbsolute(PyObject *, PyObject *);}
static PyObject *meth_QDir_isAbsolute(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDir *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDir, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isAbsolute();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDir, sipName_isAbsolute, doc_QDir_isAbsolute);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDir_makeAbsolute, "makeAbsolute(self) -> bool");

extern "C" {static PyObject *meth_QDir_makeAbsolute(PyObject *, PyObject *);}
static PyObject *meth_QDir_makeAbsolute(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDir *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDir, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->makeAbsolute();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDir, sipName_makeAbsolute, doc_QDir_makeAbsolute);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDir_remove, "remove(self, str) -> bool");

extern "C" {static PyObject *meth_QDir_remove(PyObject *, PyObject *);}
static PyObject *meth_QDir_remove(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QDir *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDir, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->remove(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDir, sipName_remove, doc_QDir_remove);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDir_rename, "rename(self, str, str) -> bool");

extern "C" {static PyObject *meth_QDir_rename(PyObject *, PyObject *);}
static PyObject *meth_QDir_rename(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QString* a1;
        int a1State = 0;
         ::QDir *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QDir, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->rename(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDir, sipName_rename, doc_QDir_rename);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDir_refresh, "refresh(self)");

extern "C" {static PyObject *meth_QDir_refresh(PyObject *, PyObject *);}
static PyObject *meth_QDir_refresh(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDir *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDir, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->refresh();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QDir, sipName_refresh, doc_QDir_refresh);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDir_drives, "drives() -> List[QFileInfo]");

extern "C" {static PyObject *meth_QDir_drives(PyObject *, PyObject *);}
static PyObject *meth_QDir_drives(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QFileInfoList*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QFileInfoList( ::QDir::drives());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0100QFileInfo,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDir, sipName_drives, doc_QDir_drives);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDir_separator, "separator() -> str");

extern "C" {static PyObject *meth_QDir_separator(PyObject *, PyObject *);}
static PyObject *meth_QDir_separator(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QChar*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QChar( ::QDir::separator());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QChar,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDir, sipName_separator, doc_QDir_separator);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDir_setCurrent, "setCurrent(str) -> bool");

extern "C" {static PyObject *meth_QDir_setCurrent(PyObject *, PyObject *);}
static PyObject *meth_QDir_setCurrent(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes =  ::QDir::setCurrent(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDir, sipName_setCurrent, doc_QDir_setCurrent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDir_current, "current() -> QDir");

extern "C" {static PyObject *meth_QDir_current(PyObject *, PyObject *);}
static PyObject *meth_QDir_current(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QDir*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QDir( ::QDir::current());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QDir,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDir, sipName_current, doc_QDir_current);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDir_currentPath, "currentPath() -> str");

extern "C" {static PyObject *meth_QDir_currentPath(PyObject *, PyObject *);}
static PyObject *meth_QDir_currentPath(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString( ::QDir::currentPath());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDir, sipName_currentPath, doc_QDir_currentPath);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDir_home, "home() -> QDir");

extern "C" {static PyObject *meth_QDir_home(PyObject *, PyObject *);}
static PyObject *meth_QDir_home(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QDir*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QDir( ::QDir::home());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QDir,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDir, sipName_home, doc_QDir_home);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDir_homePath, "homePath() -> str");

extern "C" {static PyObject *meth_QDir_homePath(PyObject *, PyObject *);}
static PyObject *meth_QDir_homePath(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString( ::QDir::homePath());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDir, sipName_homePath, doc_QDir_homePath);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDir_root, "root() -> QDir");

extern "C" {static PyObject *meth_QDir_root(PyObject *, PyObject *);}
static PyObject *meth_QDir_root(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QDir*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QDir( ::QDir::root());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QDir,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDir, sipName_root, doc_QDir_root);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDir_rootPath, "rootPath() -> str");

extern "C" {static PyObject *meth_QDir_rootPath(PyObject *, PyObject *);}
static PyObject *meth_QDir_rootPath(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString( ::QDir::rootPath());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDir, sipName_rootPath, doc_QDir_rootPath);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDir_temp, "temp() -> QDir");

extern "C" {static PyObject *meth_QDir_temp(PyObject *, PyObject *);}
static PyObject *meth_QDir_temp(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QDir*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QDir( ::QDir::temp());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QDir,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDir, sipName_temp, doc_QDir_temp);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDir_tempPath, "tempPath() -> str");

extern "C" {static PyObject *meth_QDir_tempPath(PyObject *, PyObject *);}
static PyObject *meth_QDir_tempPath(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString( ::QDir::tempPath());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDir, sipName_tempPath, doc_QDir_tempPath);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDir_match, "match(Sequence[str], str) -> bool\n"
"match(str, str) -> bool");

extern "C" {static PyObject *meth_QDir_match(PyObject *, PyObject *);}
static PyObject *meth_QDir_match(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStringList* a0;
        int a0State = 0;
        const  ::QString* a1;
        int a1State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1J1", sipType_QStringList,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes =  ::QDir::match(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QStringList *>(a0),sipType_QStringList,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QString* a1;
        int a1State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1J1", sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes =  ::QDir::match(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDir, sipName_match, doc_QDir_match);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDir_cleanPath, "cleanPath(str) -> str");

extern "C" {static PyObject *meth_QDir_cleanPath(PyObject *, PyObject *);}
static PyObject *meth_QDir_cleanPath(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString( ::QDir::cleanPath(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDir, sipName_cleanPath, doc_QDir_cleanPath);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDir_toNativeSeparators, "toNativeSeparators(str) -> str");

extern "C" {static PyObject *meth_QDir_toNativeSeparators(PyObject *, PyObject *);}
static PyObject *meth_QDir_toNativeSeparators(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString( ::QDir::toNativeSeparators(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDir, sipName_toNativeSeparators, doc_QDir_toNativeSeparators);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDir_fromNativeSeparators, "fromNativeSeparators(str) -> str");

extern "C" {static PyObject *meth_QDir_fromNativeSeparators(PyObject *, PyObject *);}
static PyObject *meth_QDir_fromNativeSeparators(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString( ::QDir::fromNativeSeparators(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDir, sipName_fromNativeSeparators, doc_QDir_fromNativeSeparators);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDir_setSearchPaths, "setSearchPaths(str, Sequence[str])");

extern "C" {static PyObject *meth_QDir_setSearchPaths(PyObject *, PyObject *);}
static PyObject *meth_QDir_setSearchPaths(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QStringList* a1;
        int a1State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1J1", sipType_QString,&a0, &a0State, sipType_QStringList,&a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
             ::QDir::setSearchPaths(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QStringList *>(a1),sipType_QStringList,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QDir, sipName_setSearchPaths, doc_QDir_setSearchPaths);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDir_addSearchPath, "addSearchPath(str, str)");

extern "C" {static PyObject *meth_QDir_addSearchPath(PyObject *, PyObject *);}
static PyObject *meth_QDir_addSearchPath(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QString* a1;
        int a1State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1J1", sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
             ::QDir::addSearchPath(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QDir, sipName_addSearchPath, doc_QDir_addSearchPath);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDir_searchPaths, "searchPaths(str) -> List[str]");

extern "C" {static PyObject *meth_QDir_searchPaths(PyObject *, PyObject *);}
static PyObject *meth_QDir_searchPaths(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
             ::QStringList*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QStringList( ::QDir::searchPaths(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QStringList,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDir, sipName_searchPaths, doc_QDir_searchPaths);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDir_removeRecursively, "removeRecursively(self) -> bool");

extern "C" {static PyObject *meth_QDir_removeRecursively(PyObject *, PyObject *);}
static PyObject *meth_QDir_removeRecursively(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDir *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDir, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->removeRecursively();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDir, sipName_removeRecursively, doc_QDir_removeRecursively);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDir_swap, "swap(self, QDir)");

extern "C" {static PyObject *meth_QDir_swap(PyObject *, PyObject *);}
static PyObject *meth_QDir_swap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDir* a0;
         ::QDir *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QDir, &sipCpp, sipType_QDir, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->swap(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QDir, sipName_swap, doc_QDir_swap);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QDir___ne__(PyObject *,PyObject *);}
static PyObject *slot_QDir___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QDir *sipCpp = reinterpret_cast< ::QDir *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QDir));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDir* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QDir, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp-> ::QDir::operator!=(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, ne_slot, sipType_QDir, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QDir___eq__(PyObject *,PyObject *);}
static PyObject *slot_QDir___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QDir *sipCpp = reinterpret_cast< ::QDir *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QDir));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDir* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QDir, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp-> ::QDir::operator==(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, eq_slot, sipType_QDir, sipSelf, sipArg);
}


extern "C" {static int slot_QDir___contains__(PyObject *,PyObject *);}
static int slot_QDir___contains__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QDir *sipCpp = reinterpret_cast< ::QDir *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QDir));

    if (!sipCpp)
        return -1;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QString,&a0, &a0State))
        {
            int sipRes = 0;

#line 134 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp2/pyqt4/sip/QtCore/qdir.sip"
        sipRes = bool(sipCpp->entryList().contains(*a0));
#line 1952 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp2/pyqt4/QtCore/sipQtCoreQDir.cpp"
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipRes;
        }
    }

    sipNoMethod(sipParseErr, sipName_QDir, sipName___contains__, SIP_NULLPTR);

    return -1;
}


extern "C" {static PyObject *slot_QDir___getitem__(PyObject *,PyObject *);}
static PyObject *slot_QDir___getitem__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QDir *sipCpp = reinterpret_cast< ::QDir *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QDir));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
             ::QString*sipRes = 0;
            int sipIsErr = 0;

#line 104 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp2/pyqt4/sip/QtCore/qdir.sip"
        SIP_SSIZE_T idx = sipConvertFromSequenceIndex(a0, sipCpp->count());
        
        if (idx < 0)
            sipIsErr = 1;
        else
            sipRes = new QString(sipCpp->operator[]((int)idx));
#line 1990 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp2/pyqt4/QtCore/sipQtCoreQDir.cpp"

            if (sipIsErr)
                return 0;

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    {
        PyObject * a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1T", &PySlice_Type, &a0))
        {
             ::QStringList*sipRes = 0;
            int sipIsErr = 0;

#line 114 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp2/pyqt4/sip/QtCore/qdir.sip"
        SIP_SSIZE_T len, start, stop, step, slicelength, i;
        
        len = sipCpp->count();
        
        if (sipConvertFromSliceObject(a0, len, &start, &stop, &step, &slicelength) < 0)
            sipIsErr = 1;
        else
        {
            sipRes = new QStringList();
        
            for (i = 0; i < slicelength; ++i)
            {
                (*sipRes) += (*sipCpp)[start];
                start += step;
            }
        }
#line 2024 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp2/pyqt4/QtCore/sipQtCoreQDir.cpp"

            if (sipIsErr)
                return 0;

            return sipConvertFromNewType(sipRes,sipType_QStringList,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QDir, sipName___getitem__, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static SIP_SSIZE_T slot_QDir___len__(PyObject *);}
static SIP_SSIZE_T slot_QDir___len__(PyObject *sipSelf)
{
     ::QDir *sipCpp = reinterpret_cast< ::QDir *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QDir));

    if (!sipCpp)
        return 0;


    {
        {
            SIP_SSIZE_T sipRes = 0;

#line 1 "Auto-generated"
            sipRes = (SIP_SSIZE_T)sipCpp->count();
#line 2054 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp2/pyqt4/QtCore/sipQtCoreQDir.cpp"

            return sipRes;
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QDir(void *, int);}
static void release_QDir(void *sipCppV, int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast< ::QDir *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void *array_QDir(Py_ssize_t);}
static void *array_QDir(Py_ssize_t sipNrElem)
{
    return new  ::QDir[sipNrElem];
}


extern "C" {static void assign_QDir(void *, SIP_SSIZE_T, void *);}
static void assign_QDir(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QDir *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QDir *>(sipSrc);
}


extern "C" {static void *copy_QDir(const void *, SIP_SSIZE_T);}
static void *copy_QDir(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QDir(reinterpret_cast<const  ::QDir *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QDir(sipSimpleWrapper *);}
static void dealloc_QDir(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QDir(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QDir(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QDir(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QDir *sipCpp = SIP_NULLPTR;

    {
        const  ::QDir* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QDir, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new  ::QDir(*a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        const  ::QString& a0def = QString();
        const  ::QString* a0 = &a0def;
        int a0State = 0;

        static const char *sipKwdList[] = {
            sipName_path,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|J1", sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new  ::QDir(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipCpp;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QString* a1;
        int a1State = 0;
         ::QDir::SortFlags a2def = QDir::SortFlags(QDir::Name|QDir::IgnoreCase);
         ::QDir::SortFlags* a2 = &a2def;
        int a2State = 0;
         ::QDir::Filters a3def =  ::QDir::AllEntries;
         ::QDir::Filters* a3 = &a3def;
        int a3State = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_sort,
            sipName_filters,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1J1|J1J1", sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State, sipType_QDir_SortFlags, &a2, &a2State, sipType_QDir_Filters, &a3, &a3State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new  ::QDir(*a0,*a1,*a2,*a3);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);
            sipReleaseType(a2,sipType_QDir_SortFlags,a2State);
            sipReleaseType(a3,sipType_QDir_Filters,a3State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QDir[] = {
    {(void *)slot_QDir___ne__, ne_slot},
    {(void *)slot_QDir___eq__, eq_slot},
    {(void *)slot_QDir___contains__, contains_slot},
    {(void *)slot_QDir___getitem__, getitem_slot},
    {(void *)slot_QDir___len__, len_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QDir[] = {
    {SIP_MLNAME_CAST(sipName_absoluteFilePath), meth_QDir_absoluteFilePath, METH_VARARGS, SIP_MLDOC_CAST(doc_QDir_absoluteFilePath)},
    {SIP_MLNAME_CAST(sipName_absolutePath), meth_QDir_absolutePath, METH_VARARGS, SIP_MLDOC_CAST(doc_QDir_absolutePath)},
    {SIP_MLNAME_CAST(sipName_addResourceSearchPath), meth_QDir_addResourceSearchPath, METH_VARARGS, SIP_MLDOC_CAST(doc_QDir_addResourceSearchPath)},
    {SIP_MLNAME_CAST(sipName_addSearchPath), meth_QDir_addSearchPath, METH_VARARGS, SIP_MLDOC_CAST(doc_QDir_addSearchPath)},
    {SIP_MLNAME_CAST(sipName_canonicalPath), meth_QDir_canonicalPath, METH_VARARGS, SIP_MLDOC_CAST(doc_QDir_canonicalPath)},
    {SIP_MLNAME_CAST(sipName_cd), meth_QDir_cd, METH_VARARGS, SIP_MLDOC_CAST(doc_QDir_cd)},
    {SIP_MLNAME_CAST(sipName_cdUp), meth_QDir_cdUp, METH_VARARGS, SIP_MLDOC_CAST(doc_QDir_cdUp)},
    {SIP_MLNAME_CAST(sipName_cleanPath), meth_QDir_cleanPath, METH_VARARGS, SIP_MLDOC_CAST(doc_QDir_cleanPath)},
    {SIP_MLNAME_CAST(sipName_count), meth_QDir_count, METH_VARARGS, SIP_MLDOC_CAST(doc_QDir_count)},
    {SIP_MLNAME_CAST(sipName_current), meth_QDir_current, METH_VARARGS, SIP_MLDOC_CAST(doc_QDir_current)},
    {SIP_MLNAME_CAST(sipName_currentPath), meth_QDir_currentPath, METH_VARARGS, SIP_MLDOC_CAST(doc_QDir_currentPath)},
    {SIP_MLNAME_CAST(sipName_dirName), meth_QDir_dirName, METH_VARARGS, SIP_MLDOC_CAST(doc_QDir_dirName)},
    {SIP_MLNAME_CAST(sipName_drives), meth_QDir_drives, METH_VARARGS, SIP_MLDOC_CAST(doc_QDir_drives)},
    {SIP_MLNAME_CAST(sipName_entryInfoList), SIP_MLMETH_CAST(meth_QDir_entryInfoList), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QDir_entryInfoList)},
    {SIP_MLNAME_CAST(sipName_entryList), SIP_MLMETH_CAST(meth_QDir_entryList), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QDir_entryList)},
    {SIP_MLNAME_CAST(sipName_exists), meth_QDir_exists, METH_VARARGS, SIP_MLDOC_CAST(doc_QDir_exists)},
    {SIP_MLNAME_CAST(sipName_filePath), meth_QDir_filePath, METH_VARARGS, SIP_MLDOC_CAST(doc_QDir_filePath)},
    {SIP_MLNAME_CAST(sipName_filter), meth_QDir_filter, METH_VARARGS, SIP_MLDOC_CAST(doc_QDir_filter)},
    {SIP_MLNAME_CAST(sipName_fromNativeSeparators), meth_QDir_fromNativeSeparators, METH_VARARGS, SIP_MLDOC_CAST(doc_QDir_fromNativeSeparators)},
    {SIP_MLNAME_CAST(sipName_home), meth_QDir_home, METH_VARARGS, SIP_MLDOC_CAST(doc_QDir_home)},
    {SIP_MLNAME_CAST(sipName_homePath), meth_QDir_homePath, METH_VARARGS, SIP_MLDOC_CAST(doc_QDir_homePath)},
    {SIP_MLNAME_CAST(sipName_isAbsolute), meth_QDir_isAbsolute, METH_VARARGS, SIP_MLDOC_CAST(doc_QDir_isAbsolute)},
    {SIP_MLNAME_CAST(sipName_isAbsolutePath), meth_QDir_isAbsolutePath, METH_VARARGS, SIP_MLDOC_CAST(doc_QDir_isAbsolutePath)},
    {SIP_MLNAME_CAST(sipName_isReadable), meth_QDir_isReadable, METH_VARARGS, SIP_MLDOC_CAST(doc_QDir_isReadable)},
    {SIP_MLNAME_CAST(sipName_isRelative), meth_QDir_isRelative, METH_VARARGS, SIP_MLDOC_CAST(doc_QDir_isRelative)},
    {SIP_MLNAME_CAST(sipName_isRelativePath), meth_QDir_isRelativePath, METH_VARARGS, SIP_MLDOC_CAST(doc_QDir_isRelativePath)},
    {SIP_MLNAME_CAST(sipName_isRoot), meth_QDir_isRoot, METH_VARARGS, SIP_MLDOC_CAST(doc_QDir_isRoot)},
    {SIP_MLNAME_CAST(sipName_makeAbsolute), meth_QDir_makeAbsolute, METH_VARARGS, SIP_MLDOC_CAST(doc_QDir_makeAbsolute)},
    {SIP_MLNAME_CAST(sipName_match), meth_QDir_match, METH_VARARGS, SIP_MLDOC_CAST(doc_QDir_match)},
    {SIP_MLNAME_CAST(sipName_mkdir), meth_QDir_mkdir, METH_VARARGS, SIP_MLDOC_CAST(doc_QDir_mkdir)},
    {SIP_MLNAME_CAST(sipName_mkpath), meth_QDir_mkpath, METH_VARARGS, SIP_MLDOC_CAST(doc_QDir_mkpath)},
    {SIP_MLNAME_CAST(sipName_nameFilters), meth_QDir_nameFilters, METH_VARARGS, SIP_MLDOC_CAST(doc_QDir_nameFilters)},
    {SIP_MLNAME_CAST(sipName_nameFiltersFromString), meth_QDir_nameFiltersFromString, METH_VARARGS, SIP_MLDOC_CAST(doc_QDir_nameFiltersFromString)},
    {SIP_MLNAME_CAST(sipName_path), meth_QDir_path, METH_VARARGS, SIP_MLDOC_CAST(doc_QDir_path)},
    {SIP_MLNAME_CAST(sipName_refresh), meth_QDir_refresh, METH_VARARGS, SIP_MLDOC_CAST(doc_QDir_refresh)},
    {SIP_MLNAME_CAST(sipName_relativeFilePath), meth_QDir_relativeFilePath, METH_VARARGS, SIP_MLDOC_CAST(doc_QDir_relativeFilePath)},
    {SIP_MLNAME_CAST(sipName_remove), meth_QDir_remove, METH_VARARGS, SIP_MLDOC_CAST(doc_QDir_remove)},
    {SIP_MLNAME_CAST(sipName_removeRecursively), meth_QDir_removeRecursively, METH_VARARGS, SIP_MLDOC_CAST(doc_QDir_removeRecursively)},
    {SIP_MLNAME_CAST(sipName_rename), meth_QDir_rename, METH_VARARGS, SIP_MLDOC_CAST(doc_QDir_rename)},
    {SIP_MLNAME_CAST(sipName_rmdir), meth_QDir_rmdir, METH_VARARGS, SIP_MLDOC_CAST(doc_QDir_rmdir)},
    {SIP_MLNAME_CAST(sipName_rmpath), meth_QDir_rmpath, METH_VARARGS, SIP_MLDOC_CAST(doc_QDir_rmpath)},
    {SIP_MLNAME_CAST(sipName_root), meth_QDir_root, METH_VARARGS, SIP_MLDOC_CAST(doc_QDir_root)},
    {SIP_MLNAME_CAST(sipName_rootPath), meth_QDir_rootPath, METH_VARARGS, SIP_MLDOC_CAST(doc_QDir_rootPath)},
    {SIP_MLNAME_CAST(sipName_searchPaths), meth_QDir_searchPaths, METH_VARARGS, SIP_MLDOC_CAST(doc_QDir_searchPaths)},
    {SIP_MLNAME_CAST(sipName_separator), meth_QDir_separator, METH_VARARGS, SIP_MLDOC_CAST(doc_QDir_separator)},
    {SIP_MLNAME_CAST(sipName_setCurrent), meth_QDir_setCurrent, METH_VARARGS, SIP_MLDOC_CAST(doc_QDir_setCurrent)},
    {SIP_MLNAME_CAST(sipName_setFilter), meth_QDir_setFilter, METH_VARARGS, SIP_MLDOC_CAST(doc_QDir_setFilter)},
    {SIP_MLNAME_CAST(sipName_setNameFilters), meth_QDir_setNameFilters, METH_VARARGS, SIP_MLDOC_CAST(doc_QDir_setNameFilters)},
    {SIP_MLNAME_CAST(sipName_setPath), meth_QDir_setPath, METH_VARARGS, SIP_MLDOC_CAST(doc_QDir_setPath)},
    {SIP_MLNAME_CAST(sipName_setSearchPaths), meth_QDir_setSearchPaths, METH_VARARGS, SIP_MLDOC_CAST(doc_QDir_setSearchPaths)},
    {SIP_MLNAME_CAST(sipName_setSorting), meth_QDir_setSorting, METH_VARARGS, SIP_MLDOC_CAST(doc_QDir_setSorting)},
    {SIP_MLNAME_CAST(sipName_sorting), meth_QDir_sorting, METH_VARARGS, SIP_MLDOC_CAST(doc_QDir_sorting)},
    {SIP_MLNAME_CAST(sipName_swap), meth_QDir_swap, METH_VARARGS, SIP_MLDOC_CAST(doc_QDir_swap)},
    {SIP_MLNAME_CAST(sipName_temp), meth_QDir_temp, METH_VARARGS, SIP_MLDOC_CAST(doc_QDir_temp)},
    {SIP_MLNAME_CAST(sipName_tempPath), meth_QDir_tempPath, METH_VARARGS, SIP_MLDOC_CAST(doc_QDir_tempPath)},
    {SIP_MLNAME_CAST(sipName_toNativeSeparators), meth_QDir_toNativeSeparators, METH_VARARGS, SIP_MLDOC_CAST(doc_QDir_toNativeSeparators)}
};

static sipEnumMemberDef enummembers_QDir[] = {
    {sipName_AccessMask, static_cast<int>( ::QDir::AccessMask), 40},
    {sipName_AllDirs, static_cast<int>( ::QDir::AllDirs), 40},
    {sipName_AllEntries, static_cast<int>( ::QDir::AllEntries), 40},
    {sipName_CaseSensitive, static_cast<int>( ::QDir::CaseSensitive), 40},
    {sipName_Dirs, static_cast<int>( ::QDir::Dirs), 40},
    {sipName_DirsFirst, static_cast<int>( ::QDir::DirsFirst), 42},
    {sipName_DirsLast, static_cast<int>( ::QDir::DirsLast), 42},
    {sipName_Drives, static_cast<int>( ::QDir::Drives), 40},
    {sipName_Executable, static_cast<int>( ::QDir::Executable), 40},
    {sipName_Files, static_cast<int>( ::QDir::Files), 40},
    {sipName_Hidden, static_cast<int>( ::QDir::Hidden), 40},
    {sipName_IgnoreCase, static_cast<int>( ::QDir::IgnoreCase), 42},
    {sipName_LocaleAware, static_cast<int>( ::QDir::LocaleAware), 42},
    {sipName_Modified, static_cast<int>( ::QDir::Modified), 40},
    {sipName_Name, static_cast<int>( ::QDir::Name), 42},
    {sipName_NoDot, static_cast<int>( ::QDir::NoDot), 40},
    {sipName_NoDotAndDotDot, static_cast<int>( ::QDir::NoDotAndDotDot), 40},
    {sipName_NoDotDot, static_cast<int>( ::QDir::NoDotDot), 40},
    {sipName_NoFilter, static_cast<int>( ::QDir::NoFilter), 40},
    {sipName_NoSort, static_cast<int>( ::QDir::NoSort), 42},
    {sipName_NoSymLinks, static_cast<int>( ::QDir::NoSymLinks), 40},
    {sipName_PermissionMask, static_cast<int>( ::QDir::PermissionMask), 40},
    {sipName_Readable, static_cast<int>( ::QDir::Readable), 40},
    {sipName_Reversed, static_cast<int>( ::QDir::Reversed), 42},
    {sipName_Size, static_cast<int>( ::QDir::Size), 42},
    {sipName_SortByMask, static_cast<int>( ::QDir::SortByMask), 42},
    {sipName_System, static_cast<int>( ::QDir::System), 40},
    {sipName_Time, static_cast<int>( ::QDir::Time), 42},
    {sipName_Type, static_cast<int>( ::QDir::Type), 42},
    {sipName_TypeMask, static_cast<int>( ::QDir::TypeMask), 40},
    {sipName_Unsorted, static_cast<int>( ::QDir::Unsorted), 42},
    {sipName_Writable, static_cast<int>( ::QDir::Writable), 40},
};

PyDoc_STRVAR(doc_QDir, "\1QDir(QDir)\n"
"QDir(path: str = '')\n"
"QDir(str, str, sort: QDir.SortFlags = QDir.Name|QDir.IgnoreCase, filters: QDir.Filters = QDir.AllEntries)");


static pyqt4ClassPluginDef plugin_QDir = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QDir = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_CLASS,
        sipNameNr_QDir,
        {SIP_NULLPTR},
        &plugin_QDir
    },
    {
        sipNameNr_QDir,
        {0, 0, 1},
        56, methods_QDir,
        32, enummembers_QDir,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QDir,
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QDir,
    init_type_QDir,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QDir,
    assign_QDir,
    array_QDir,
    copy_QDir,
    release_QDir,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

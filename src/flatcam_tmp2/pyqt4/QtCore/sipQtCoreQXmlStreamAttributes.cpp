/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.23
 *
 * Copyright (c) 2018 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt4.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 53 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp2/pyqt4/sip/QtCore/qxmlstream.sip"
#include <qxmlstream.h>
#line 29 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp2/pyqt4/QtCore/sipQtCoreQXmlStreamAttributes.cpp"

#line 28 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp2/pyqt4/sip/QtCore/qxmlstream.sip"
#include <qxmlstream.h>
#line 33 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp2/pyqt4/QtCore/sipQtCoreQXmlStreamAttributes.cpp"
#line 27 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp2/pyqt4/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 36 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp2/pyqt4/QtCore/sipQtCoreQXmlStreamAttributes.cpp"
#line 785 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp2/pyqt4/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 39 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp2/pyqt4/QtCore/sipQtCoreQXmlStreamAttributes.cpp"


PyDoc_STRVAR(doc_QXmlStreamAttributes_value, "value(self, str, str) -> str\n"
"value(self, str) -> str");

extern "C" {static PyObject *meth_QXmlStreamAttributes_value(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamAttributes_value(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QString* a1;
        int a1State = 0;
        const  ::QXmlStreamAttributes *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QXmlStreamAttributes, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
             ::QStringRef*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QStringRef(sipCpp->value(*a0,*a1));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            return sipConvertFromNewType(sipRes,sipType_QStringRef,SIP_NULLPTR);
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QXmlStreamAttributes *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QXmlStreamAttributes, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::QStringRef*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QStringRef(sipCpp->value(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QStringRef,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QXmlStreamAttributes, sipName_value, doc_QXmlStreamAttributes_value);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamAttributes_append, "append(self, str, str, str)\n"
"append(self, str, str)\n"
"append(self, QXmlStreamAttribute)");

extern "C" {static PyObject *meth_QXmlStreamAttributes_append(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamAttributes_append(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QString* a1;
        int a1State = 0;
        const  ::QString* a2;
        int a2State = 0;
         ::QXmlStreamAttributes *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1J1", &sipSelf, sipType_QXmlStreamAttributes, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->append(*a0,*a1,*a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast< ::QString *>(a2),sipType_QString,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QString* a1;
        int a1State = 0;
         ::QXmlStreamAttributes *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QXmlStreamAttributes, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->append(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QXmlStreamAttribute* a0;
         ::QXmlStreamAttributes *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QXmlStreamAttributes, &sipCpp, sipType_QXmlStreamAttribute, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->append(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QXmlStreamAttributes, sipName_append, doc_QXmlStreamAttributes_append);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamAttributes_hasAttribute, "hasAttribute(self, str) -> bool\n"
"hasAttribute(self, str, str) -> bool");

extern "C" {static PyObject *meth_QXmlStreamAttributes_hasAttribute(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamAttributes_hasAttribute(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QXmlStreamAttributes *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QXmlStreamAttributes, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->hasAttribute(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QString* a1;
        int a1State = 0;
        const  ::QXmlStreamAttributes *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QXmlStreamAttributes, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->hasAttribute(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QXmlStreamAttributes, sipName_hasAttribute, doc_QXmlStreamAttributes_hasAttribute);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamAttributes_at, "at(self, int) -> QXmlStreamAttribute");

extern "C" {static PyObject *meth_QXmlStreamAttributes_at(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamAttributes_at(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QXmlStreamAttributes *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QXmlStreamAttributes, &sipCpp, &a0))
        {
             ::QXmlStreamAttribute*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QXmlStreamAttribute(sipCpp->at(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QXmlStreamAttribute,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QXmlStreamAttributes, sipName_at, doc_QXmlStreamAttributes_at);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamAttributes_clear, "clear(self)");

extern "C" {static PyObject *meth_QXmlStreamAttributes_clear(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamAttributes_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QXmlStreamAttributes *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamAttributes, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->clear();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QXmlStreamAttributes, sipName_clear, doc_QXmlStreamAttributes_clear);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamAttributes_contains, "contains(self, QXmlStreamAttribute) -> bool");

extern "C" {static PyObject *meth_QXmlStreamAttributes_contains(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamAttributes_contains(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QXmlStreamAttribute* a0;
        const  ::QXmlStreamAttributes *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QXmlStreamAttributes, &sipCpp, sipType_QXmlStreamAttribute, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->contains(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QXmlStreamAttributes, sipName_contains, doc_QXmlStreamAttributes_contains);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamAttributes_count, "count(self, QXmlStreamAttribute) -> int\n"
"count(self) -> int");

extern "C" {static PyObject *meth_QXmlStreamAttributes_count(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamAttributes_count(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QXmlStreamAttribute* a0;
        const  ::QXmlStreamAttributes *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QXmlStreamAttributes, &sipCpp, sipType_QXmlStreamAttribute, &a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->count(*a0);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        const  ::QXmlStreamAttributes *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamAttributes, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->count();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QXmlStreamAttributes, sipName_count, doc_QXmlStreamAttributes_count);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamAttributes_data, "data(self) -> sip.voidptr");

extern "C" {static PyObject *meth_QXmlStreamAttributes_data(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamAttributes_data(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QXmlStreamAttributes *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamAttributes, &sipCpp))
        {
            void*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->data();
            Py_END_ALLOW_THREADS

            return sipConvertFromVoidPtr(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QXmlStreamAttributes, sipName_data, doc_QXmlStreamAttributes_data);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamAttributes_fill, "fill(self, QXmlStreamAttribute, size: int = -1)");

extern "C" {static PyObject *meth_QXmlStreamAttributes_fill(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamAttributes_fill(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QXmlStreamAttribute* a0;
        int a1 = -1;
         ::QXmlStreamAttributes *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_size,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9|i", &sipSelf, sipType_QXmlStreamAttributes, &sipCpp, sipType_QXmlStreamAttribute, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->fill(*a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QXmlStreamAttributes, sipName_fill, doc_QXmlStreamAttributes_fill);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamAttributes_first, "first(self) -> QXmlStreamAttribute");

extern "C" {static PyObject *meth_QXmlStreamAttributes_first(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamAttributes_first(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QXmlStreamAttributes *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamAttributes, &sipCpp))
        {
             ::QXmlStreamAttribute*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &sipCpp->first();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QXmlStreamAttribute,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QXmlStreamAttributes, sipName_first, doc_QXmlStreamAttributes_first);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamAttributes_indexOf, "indexOf(self, QXmlStreamAttribute, from_: int = 0) -> int");

extern "C" {static PyObject *meth_QXmlStreamAttributes_indexOf(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamAttributes_indexOf(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QXmlStreamAttribute* a0;
        int a1 = 0;
        const  ::QXmlStreamAttributes *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_from,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9|i", &sipSelf, sipType_QXmlStreamAttributes, &sipCpp, sipType_QXmlStreamAttribute, &a0, &a1))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->indexOf(*a0,a1);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QXmlStreamAttributes, sipName_indexOf, doc_QXmlStreamAttributes_indexOf);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamAttributes_insert, "insert(self, int, QXmlStreamAttribute)");

extern "C" {static PyObject *meth_QXmlStreamAttributes_insert(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamAttributes_insert(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QXmlStreamAttribute* a1;
         ::QXmlStreamAttributes *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QXmlStreamAttributes, &sipCpp, &a0, sipType_QXmlStreamAttribute, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->insert(a0,*a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QXmlStreamAttributes, sipName_insert, doc_QXmlStreamAttributes_insert);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamAttributes_isEmpty, "isEmpty(self) -> bool");

extern "C" {static PyObject *meth_QXmlStreamAttributes_isEmpty(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamAttributes_isEmpty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QXmlStreamAttributes *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamAttributes, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isEmpty();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QXmlStreamAttributes, sipName_isEmpty, doc_QXmlStreamAttributes_isEmpty);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamAttributes_last, "last(self) -> QXmlStreamAttribute");

extern "C" {static PyObject *meth_QXmlStreamAttributes_last(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamAttributes_last(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QXmlStreamAttributes *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamAttributes, &sipCpp))
        {
             ::QXmlStreamAttribute*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &sipCpp->last();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QXmlStreamAttribute,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QXmlStreamAttributes, sipName_last, doc_QXmlStreamAttributes_last);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamAttributes_lastIndexOf, "lastIndexOf(self, QXmlStreamAttribute, from_: int = -1) -> int");

extern "C" {static PyObject *meth_QXmlStreamAttributes_lastIndexOf(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamAttributes_lastIndexOf(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QXmlStreamAttribute* a0;
        int a1 = -1;
        const  ::QXmlStreamAttributes *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_from,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9|i", &sipSelf, sipType_QXmlStreamAttributes, &sipCpp, sipType_QXmlStreamAttribute, &a0, &a1))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->lastIndexOf(*a0,a1);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QXmlStreamAttributes, sipName_lastIndexOf, doc_QXmlStreamAttributes_lastIndexOf);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamAttributes_prepend, "prepend(self, QXmlStreamAttribute)");

extern "C" {static PyObject *meth_QXmlStreamAttributes_prepend(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamAttributes_prepend(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QXmlStreamAttribute* a0;
         ::QXmlStreamAttributes *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QXmlStreamAttributes, &sipCpp, sipType_QXmlStreamAttribute, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->prepend(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QXmlStreamAttributes, sipName_prepend, doc_QXmlStreamAttributes_prepend);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamAttributes_remove, "remove(self, int)\n"
"remove(self, int, int)");

extern "C" {static PyObject *meth_QXmlStreamAttributes_remove(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamAttributes_remove(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QXmlStreamAttributes *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QXmlStreamAttributes, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->remove(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
         ::QXmlStreamAttributes *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QXmlStreamAttributes, &sipCpp, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->remove(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QXmlStreamAttributes, sipName_remove, doc_QXmlStreamAttributes_remove);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamAttributes_replace, "replace(self, int, QXmlStreamAttribute)");

extern "C" {static PyObject *meth_QXmlStreamAttributes_replace(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamAttributes_replace(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QXmlStreamAttribute* a1;
         ::QXmlStreamAttributes *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QXmlStreamAttributes, &sipCpp, &a0, sipType_QXmlStreamAttribute, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->replace(a0,*a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QXmlStreamAttributes, sipName_replace, doc_QXmlStreamAttributes_replace);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamAttributes_size, "size(self) -> int");

extern "C" {static PyObject *meth_QXmlStreamAttributes_size(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamAttributes_size(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QXmlStreamAttributes *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamAttributes, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->size();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QXmlStreamAttributes, sipName_size, doc_QXmlStreamAttributes_size);

    return SIP_NULLPTR;
}


extern "C" {static int slot_QXmlStreamAttributes___contains__(PyObject *,PyObject *);}
static int slot_QXmlStreamAttributes___contains__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QXmlStreamAttributes *sipCpp = reinterpret_cast< ::QXmlStreamAttributes *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QXmlStreamAttributes));

    if (!sipCpp)
        return -1;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QXmlStreamAttribute* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QXmlStreamAttribute, &a0))
        {
            int sipRes = 0;

#line 229 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp2/pyqt4/sip/QtCore/qxmlstream.sip"
// It looks like you can't assign QBool to int.
sipRes = bool(sipCpp->contains(*a0));
#line 771 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp2/pyqt4/QtCore/sipQtCoreQXmlStreamAttributes.cpp"

            return sipRes;
        }
    }

    sipNoMethod(sipParseErr, sipName_QXmlStreamAttributes, sipName___contains__, SIP_NULLPTR);

    return -1;
}


extern "C" {static int slot_QXmlStreamAttributes___delitem__(PyObject *,PyObject *);}
static int slot_QXmlStreamAttributes___delitem__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QXmlStreamAttributes *sipCpp = reinterpret_cast< ::QXmlStreamAttributes *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QXmlStreamAttributes));

    if (!sipCpp)
        return -1;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            int sipIsErr = 0;

#line 181 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp2/pyqt4/sip/QtCore/qxmlstream.sip"
int len;

len = sipCpp->count();

if ((a0 = (int)sipConvertFromSequenceIndex(a0, len)) < 0)
    sipIsErr = 1;
else
    sipCpp->remove(a0);
#line 809 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp2/pyqt4/QtCore/sipQtCoreQXmlStreamAttributes.cpp"

            if (sipIsErr)
                return -1;

            return 0;
        }
    }

    {
        PyObject * a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1T", &PySlice_Type, &a0))
        {
            int sipIsErr = 0;

#line 193 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp2/pyqt4/sip/QtCore/qxmlstream.sip"
SIP_SSIZE_T len, start, stop, step, slicelength, i;

len = sipCpp->count();

if (sipConvertFromSliceObject(a0, len, &start, &stop, &step, &slicelength) < 0)
    sipIsErr = 1;
else
    for (i = 0; i < slicelength; ++i)
    {
        sipCpp->remove(start);
        start += step - 1;
    }
#line 838 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp2/pyqt4/QtCore/sipQtCoreQXmlStreamAttributes.cpp"

            if (sipIsErr)
                return -1;

            return 0;
        }
    }

    sipNoMethod(sipParseErr, sipName_QXmlStreamAttributes, sipName___delitem__, SIP_NULLPTR);

    return -1;
}


extern "C" {static int slot_QXmlStreamAttributes___setitem__(PyObject *,PyObject *);}
static int slot_QXmlStreamAttributes___setitem__(PyObject *sipSelf,PyObject *sipArgs)
{
     ::QXmlStreamAttributes *sipCpp = reinterpret_cast< ::QXmlStreamAttributes *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QXmlStreamAttributes));

    if (!sipCpp)
        return -1;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QXmlStreamAttribute* a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "iJ9", &a0, sipType_QXmlStreamAttribute, &a1))
        {
            int sipIsErr = 0;

#line 138 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp2/pyqt4/sip/QtCore/qxmlstream.sip"
int len;

len = sipCpp->count();

if ((a0 = (int)sipConvertFromSequenceIndex(a0, len)) < 0)
    sipIsErr = 1;
else
    (*sipCpp)[a0] = *a1;
#line 880 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp2/pyqt4/QtCore/sipQtCoreQXmlStreamAttributes.cpp"

            if (sipIsErr)
                return -1;

            return 0;
        }
    }

    {
        PyObject * a0;
        const  ::QXmlStreamAttributes* a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "TJ9", &PySlice_Type, &a0, sipType_QXmlStreamAttributes, &a1))
        {
            int sipIsErr = 0;

#line 150 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp2/pyqt4/sip/QtCore/qxmlstream.sip"
SIP_SSIZE_T len, start, stop, step, slicelength, i;

len = sipCpp->count();

if (sipConvertFromSliceObject(a0, len, &start, &stop, &step, &slicelength) < 0)
    sipIsErr = 1;
else
{
    int vlen = a1->count();

    if (vlen != slicelength)
    {
        sipBadLengthForSlice(vlen, slicelength);
        sipIsErr = 1;
    }
    else
    {
        QVector<QXmlStreamAttribute>::const_iterator it = a1->begin();

        for (i = 0; i < slicelength; ++i)
        {
            (*sipCpp)[start] = *it;
            start += step;
            ++it;
        }
    }
}
#line 925 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp2/pyqt4/QtCore/sipQtCoreQXmlStreamAttributes.cpp"

            if (sipIsErr)
                return -1;

            return 0;
        }
    }

    sipNoMethod(sipParseErr, sipName_QXmlStreamAttributes, sipName___setitem__, SIP_NULLPTR);

    return -1;
}


extern "C" {static PyObject *slot_QXmlStreamAttributes___getitem__(PyObject *,PyObject *);}
static PyObject *slot_QXmlStreamAttributes___getitem__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QXmlStreamAttributes *sipCpp = reinterpret_cast< ::QXmlStreamAttributes *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QXmlStreamAttributes));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
             ::QXmlStreamAttribute*sipRes = 0;
            int sipIsErr = 0;

#line 126 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp2/pyqt4/sip/QtCore/qxmlstream.sip"
SIP_SSIZE_T idx = sipConvertFromSequenceIndex(a0, sipCpp->count());

if (idx < 0)
    sipIsErr = 1;
else
    sipRes = new QXmlStreamAttribute(sipCpp->operator[]((int)idx));
#line 965 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp2/pyqt4/QtCore/sipQtCoreQXmlStreamAttributes.cpp"

            if (sipIsErr)
                return 0;

            return sipConvertFromType(sipRes,sipType_QXmlStreamAttribute,SIP_NULLPTR);
        }
    }

    {
        PyObject * a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1T", &PySlice_Type, &a0))
        {
             ::QXmlStreamAttributes*sipRes = 0;
            int sipIsErr = 0;

#line 209 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp2/pyqt4/sip/QtCore/qxmlstream.sip"
SIP_SSIZE_T len, start, stop, step, slicelength, i;

len = sipCpp->count();

if (sipConvertFromSliceObject(a0, len, &start, &stop, &step, &slicelength) < 0)
    sipIsErr = 1;
else
{
    sipRes = new QXmlStreamAttributes();

    for (i = 0; i < slicelength; ++i)
    {
        (*sipRes) += (*sipCpp)[start];
        start += step;
    }
}
#line 999 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp2/pyqt4/QtCore/sipQtCoreQXmlStreamAttributes.cpp"

            if (sipIsErr)
                return 0;

            return sipConvertFromType(sipRes,sipType_QXmlStreamAttributes,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QXmlStreamAttributes, sipName___getitem__, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QXmlStreamAttributes___eq__(PyObject *,PyObject *);}
static PyObject *slot_QXmlStreamAttributes___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QXmlStreamAttributes *sipCpp = reinterpret_cast< ::QXmlStreamAttributes *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QXmlStreamAttributes));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QXmlStreamAttributes* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QXmlStreamAttributes, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp-> ::QXmlStreamAttributes::operator==(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, eq_slot, sipType_QXmlStreamAttributes, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QXmlStreamAttributes___iadd__(PyObject *,PyObject *);}
static PyObject *slot_QXmlStreamAttributes___iadd__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QXmlStreamAttributes *sipCpp = reinterpret_cast< ::QXmlStreamAttributes *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QXmlStreamAttributes));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QXmlStreamAttributes* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QXmlStreamAttributes, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp-> ::QXmlStreamAttributes::operator+=(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    {
        const  ::QXmlStreamAttribute* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QXmlStreamAttribute, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp-> ::QXmlStreamAttributes::operator+=(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    /* Raise an exception if the argument couldn't be parsed. */
    sipBadOperatorArg(sipSelf,sipArg,iconcat_slot);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QXmlStreamAttributes___ne__(PyObject *,PyObject *);}
static PyObject *slot_QXmlStreamAttributes___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QXmlStreamAttributes *sipCpp = reinterpret_cast< ::QXmlStreamAttributes *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QXmlStreamAttributes));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QXmlStreamAttributes* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QXmlStreamAttributes, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp-> ::QXmlStreamAttributes::operator!=(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, ne_slot, sipType_QXmlStreamAttributes, sipSelf, sipArg);
}


extern "C" {static SIP_SSIZE_T slot_QXmlStreamAttributes___len__(PyObject *);}
static SIP_SSIZE_T slot_QXmlStreamAttributes___len__(PyObject *sipSelf)
{
     ::QXmlStreamAttributes *sipCpp = reinterpret_cast< ::QXmlStreamAttributes *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QXmlStreamAttributes));

    if (!sipCpp)
        return 0;


    {
        {
            SIP_SSIZE_T sipRes = 0;

#line 1 "Auto-generated"
            sipRes = (SIP_SSIZE_T)sipCpp->count();
#line 1142 "/home/bcthund/OneDrive/Projects/github/flatcam_installer/src/flatcam_tmp2/pyqt4/QtCore/sipQtCoreQXmlStreamAttributes.cpp"

            return sipRes;
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QXmlStreamAttributes(void *, int);}
static void release_QXmlStreamAttributes(void *sipCppV, int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast< ::QXmlStreamAttributes *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void *array_QXmlStreamAttributes(Py_ssize_t);}
static void *array_QXmlStreamAttributes(Py_ssize_t sipNrElem)
{
    return new  ::QXmlStreamAttributes[sipNrElem];
}


extern "C" {static void assign_QXmlStreamAttributes(void *, SIP_SSIZE_T, void *);}
static void assign_QXmlStreamAttributes(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QXmlStreamAttributes *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QXmlStreamAttributes *>(sipSrc);
}


extern "C" {static void *copy_QXmlStreamAttributes(const void *, SIP_SSIZE_T);}
static void *copy_QXmlStreamAttributes(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QXmlStreamAttributes(reinterpret_cast<const  ::QXmlStreamAttributes *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QXmlStreamAttributes(sipSimpleWrapper *);}
static void dealloc_QXmlStreamAttributes(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QXmlStreamAttributes(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QXmlStreamAttributes(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QXmlStreamAttributes(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QXmlStreamAttributes *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new  ::QXmlStreamAttributes();
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        const  ::QXmlStreamAttributes* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QXmlStreamAttributes, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new  ::QXmlStreamAttributes(*a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QXmlStreamAttributes[] = {
    {(void *)slot_QXmlStreamAttributes___contains__, contains_slot},
    {(void *)slot_QXmlStreamAttributes___delitem__, delitem_slot},
    {(void *)slot_QXmlStreamAttributes___setitem__, setitem_slot},
    {(void *)slot_QXmlStreamAttributes___getitem__, getitem_slot},
    {(void *)slot_QXmlStreamAttributes___eq__, eq_slot},
    {(void *)slot_QXmlStreamAttributes___iadd__, iconcat_slot},
    {(void *)slot_QXmlStreamAttributes___ne__, ne_slot},
    {(void *)slot_QXmlStreamAttributes___len__, len_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QXmlStreamAttributes[] = {
    {SIP_MLNAME_CAST(sipName_append), meth_QXmlStreamAttributes_append, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamAttributes_append)},
    {SIP_MLNAME_CAST(sipName_at), meth_QXmlStreamAttributes_at, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamAttributes_at)},
    {SIP_MLNAME_CAST(sipName_clear), meth_QXmlStreamAttributes_clear, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamAttributes_clear)},
    {SIP_MLNAME_CAST(sipName_contains), meth_QXmlStreamAttributes_contains, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamAttributes_contains)},
    {SIP_MLNAME_CAST(sipName_count), meth_QXmlStreamAttributes_count, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamAttributes_count)},
    {SIP_MLNAME_CAST(sipName_data), meth_QXmlStreamAttributes_data, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamAttributes_data)},
    {SIP_MLNAME_CAST(sipName_fill), SIP_MLMETH_CAST(meth_QXmlStreamAttributes_fill), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QXmlStreamAttributes_fill)},
    {SIP_MLNAME_CAST(sipName_first), meth_QXmlStreamAttributes_first, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamAttributes_first)},
    {SIP_MLNAME_CAST(sipName_hasAttribute), meth_QXmlStreamAttributes_hasAttribute, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamAttributes_hasAttribute)},
    {SIP_MLNAME_CAST(sipName_indexOf), SIP_MLMETH_CAST(meth_QXmlStreamAttributes_indexOf), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QXmlStreamAttributes_indexOf)},
    {SIP_MLNAME_CAST(sipName_insert), meth_QXmlStreamAttributes_insert, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamAttributes_insert)},
    {SIP_MLNAME_CAST(sipName_isEmpty), meth_QXmlStreamAttributes_isEmpty, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamAttributes_isEmpty)},
    {SIP_MLNAME_CAST(sipName_last), meth_QXmlStreamAttributes_last, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamAttributes_last)},
    {SIP_MLNAME_CAST(sipName_lastIndexOf), SIP_MLMETH_CAST(meth_QXmlStreamAttributes_lastIndexOf), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QXmlStreamAttributes_lastIndexOf)},
    {SIP_MLNAME_CAST(sipName_prepend), meth_QXmlStreamAttributes_prepend, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamAttributes_prepend)},
    {SIP_MLNAME_CAST(sipName_remove), meth_QXmlStreamAttributes_remove, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamAttributes_remove)},
    {SIP_MLNAME_CAST(sipName_replace), meth_QXmlStreamAttributes_replace, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamAttributes_replace)},
    {SIP_MLNAME_CAST(sipName_size), meth_QXmlStreamAttributes_size, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamAttributes_size)},
    {SIP_MLNAME_CAST(sipName_value), meth_QXmlStreamAttributes_value, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamAttributes_value)}
};

PyDoc_STRVAR(doc_QXmlStreamAttributes, "\1QXmlStreamAttributes()\n"
"QXmlStreamAttributes(QXmlStreamAttributes)");


static pyqt4ClassPluginDef plugin_QXmlStreamAttributes = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QXmlStreamAttributes = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_CLASS,
        sipNameNr_QXmlStreamAttributes,
        {SIP_NULLPTR},
        &plugin_QXmlStreamAttributes
    },
    {
        sipNameNr_QXmlStreamAttributes,
        {0, 0, 1},
        19, methods_QXmlStreamAttributes,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QXmlStreamAttributes,
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QXmlStreamAttributes,
    init_type_QXmlStreamAttributes,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QXmlStreamAttributes,
    assign_QXmlStreamAttributes,
    array_QXmlStreamAttributes,
    copy_QXmlStreamAttributes,
    release_QXmlStreamAttributes,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
